{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createMat4 } from './math-utils';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, worldToPixels, altitudeToFovy, fovyToAltitude, DEFAULT_ALTITUDE, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nexport default class WebMercatorViewport {\n  constructor() {\n    var _this = this;\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 1,\n      height: 1\n    };\n    _defineProperty(this, \"latitude\", void 0);\n    _defineProperty(this, \"longitude\", void 0);\n    _defineProperty(this, \"zoom\", void 0);\n    _defineProperty(this, \"pitch\", void 0);\n    _defineProperty(this, \"bearing\", void 0);\n    _defineProperty(this, \"altitude\", void 0);\n    _defineProperty(this, \"fovy\", void 0);\n    _defineProperty(this, \"meterOffset\", void 0);\n    _defineProperty(this, \"center\", void 0);\n    _defineProperty(this, \"width\", void 0);\n    _defineProperty(this, \"height\", void 0);\n    _defineProperty(this, \"scale\", void 0);\n    _defineProperty(this, \"distanceScales\", void 0);\n    _defineProperty(this, \"viewMatrix\", void 0);\n    _defineProperty(this, \"projectionMatrix\", void 0);\n    _defineProperty(this, \"viewProjectionMatrix\", void 0);\n    _defineProperty(this, \"pixelProjectionMatrix\", void 0);\n    _defineProperty(this, \"pixelUnprojectionMatrix\", void 0);\n    _defineProperty(this, \"equals\", viewport => {\n      if (!(viewport instanceof WebMercatorViewport)) {\n        return false;\n      }\n      return viewport.width === this.width && viewport.height === this.height && mat4.equals(viewport.projectionMatrix, this.projectionMatrix) && mat4.equals(viewport.viewMatrix, this.viewMatrix);\n    });\n    _defineProperty(this, \"project\", function (lngLatZ) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        topLeft = true\n      } = options;\n      const worldPosition = _this.projectPosition(lngLatZ);\n      const coord = worldToPixels(worldPosition, _this.pixelProjectionMatrix);\n      const [x, y] = coord;\n      const y2 = topLeft ? y : _this.height - y;\n      return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    });\n    _defineProperty(this, \"unproject\", function (xyz) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        topLeft = true,\n        targetZ = undefined\n      } = options;\n      const [x, y, z] = xyz;\n      const y2 = topLeft ? y : _this.height - y;\n      const targetZWorld = targetZ && targetZ * _this.distanceScales.unitsPerMeter[2];\n      const coord = pixelsToWorld([x, y2, z], _this.pixelUnprojectionMatrix, targetZWorld);\n      const [X, Y, Z] = _this.unprojectPosition(coord);\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    });\n    _defineProperty(this, \"projectPosition\", xyz => {\n      const [X, Y] = lngLatToWorld(xyz);\n      const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    });\n    _defineProperty(this, \"unprojectPosition\", xyz => {\n      const [X, Y] = worldToLngLat(xyz);\n      const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    });\n    let {\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n    width = width || 1;\n    height = height || 1;\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n    const scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    const distanceScales = getDistanceScales({\n      longitude,\n      latitude\n    });\n    const center = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      scale,\n      center,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n    this.distanceScales = distanceScales;\n    this._initMatrices();\n    Object.freeze(this);\n  }\n  _initMatrices() {\n    const {\n      width,\n      height,\n      projectionMatrix,\n      viewMatrix\n    } = this;\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n    const m = createMat4();\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n  getMapCenterByLngLatPosition(_ref) {\n    let {\n      lngLat,\n      pos\n    } = _ref;\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n  fitBounds(bounds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      width,\n      height\n    } = this;\n    const {\n      longitude,\n      latitude,\n      zoom\n    } = fitBounds(Object.assign({\n      width,\n      height,\n      bounds\n    }, options));\n    return new WebMercatorViewport({\n      width,\n      height,\n      longitude,\n      latitude,\n      zoom\n    });\n  }\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n    const west = Math.min(...corners.map(p => p[0]));\n    const east = Math.max(...corners.map(p => p[0]));\n    const south = Math.min(...corners.map(p => p[1]));\n    const north = Math.max(...corners.map(p => p[1]));\n    return [[west, south], [east, north]];\n  }\n  getBoundingRegion() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getBounds(this, options.z || 0);\n  }\n  getLocationAtPoint(_ref2) {\n    let {\n      lngLat,\n      pos\n    } = _ref2;\n    return this.getMapCenterByLngLatPosition({\n      lngLat,\n      pos\n    });\n  }\n}","map":{"version":3,"names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","altitudeToFovy","fovyToAltitude","DEFAULT_ALTITUDE","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","constructor","_this","props","arguments","length","undefined","width","height","_defineProperty","viewport","equals","projectionMatrix","viewMatrix","lngLatZ","options","topLeft","worldPosition","projectPosition","coord","pixelProjectionMatrix","x","y","y2","xyz","targetZ","z","targetZWorld","distanceScales","unitsPerMeter","pixelUnprojectionMatrix","X","Y","Z","unprojectPosition","Number","isFinite","metersPerUnit","altitude","fovy","latitude","longitude","zoom","pitch","bearing","position","nearZMultiplier","farZMultiplier","scale","Math","max","center","push","add","mul","meterOffset","_initMatrices","Object","freeze","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","_ref","pos","fromLocation","toLocation","negate","newCenter","bounds","assign","corners","getBoundingRegion","west","min","map","p","east","south","north","getLocationAtPoint","_ref2"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/web-mercator/src/web-mercator-viewport.ts"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix,\n  DistanceScales\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport type {FitBoundsOptions} from './fit-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\n/**\n   * @param width=1 - Width of \"viewport\" or window\n   * @param height=1 - Height of \"viewport\" or window\n   * @param scale=1 - Either use scale or zoom\n   * @param pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param fovy= - Field of view of camera in degrees\n   * @param altitude= - Altitude of camera in screen units                                                               \n   *\n   * Web mercator projection short-hand parameters\n   * @param latitude - Center of viewport on map\n   * @param longitude - Center of viewport on map\n   * @param zoom - Scale = Math.pow(2,zoom) on map\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - Field of view is independent from altitude, provide `altitudeToFovy(1.5)` (default value) to match assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n */\nexport type WebMercatorViewportProps = {\n  // Map state\n  width: number;\n  height: number;\n  latitude?: number;\n  longitude?: number;\n  position?: number[];\n  zoom?: number;\n  pitch?: number;\n  bearing?: number;\n  altitude?: number;\n  fovy?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n};\n\n/**\n * The WebMercatorViewport class creates\n * - view/projection matrices\n * - \"uniform values\" (for shaders) from mercator params\n *\n * Note: Instances are immutable in the sense that they only have accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport default class WebMercatorViewport {\n  readonly latitude: number;\n  readonly longitude: number;\n  readonly zoom: number;\n  readonly pitch: number;\n  readonly bearing: number;\n  readonly altitude: number;\n  readonly fovy: number;\n\n  readonly meterOffset: number[];\n  readonly center: number[];\n\n  readonly width: number;\n  readonly height: number;\n  readonly scale: number;\n  readonly distanceScales: DistanceScales;\n\n  readonly viewMatrix: number[];\n  readonly projectionMatrix: number[];\n\n  viewProjectionMatrix: number[];\n  pixelProjectionMatrix: number[];\n  pixelUnprojectionMatrix: number[];\n\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(props: WebMercatorViewportProps = {width: 1, height: 1}) {\n    let {\n      // Map state\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center: number[] = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      scale,\n      center,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _initMatrices(): void {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  /** Two viewports are equal if width and height are identical, and if\n   * their view and projection matrices are (approximately) equal.\n   */\n  equals = (viewport: WebMercatorViewport | null): boolean => {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  };\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @return - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project = (lngLatZ: number[], options: {topLeft?: boolean} = {}): number[] => {\n    const {topLeft = true} = options;\n    const worldPosition = this.projectPosition(lngLatZ);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  };\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates, possibly `[lon, lat]` on map.\n   *\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   *\n   * @param xyz - screen coordinates, z as pixel depth\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @param options.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject = (xyz: number[], options: {topLeft?: boolean; targetZ?: number} = {}): number[] => {\n    const {topLeft = true, targetZ = undefined} = options;\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  };\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  };\n\n  unprojectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  };\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return [x,y] coordinates.\n   */\n  projectFlat(lngLat: number[]): number[] {\n    return lngLatToWorld(lngLat);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param xy - array with [x,y] members\n   *  representing point on projected map plane\n   * @return - array with [lat,lon] of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy: number[]): number[] {\n    return worldToLngLat(xy);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n   * @param opt\n   * @param opt.lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param opt.pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param bounds - [[lon, lat], [lon, lat]]\n   * @param [options]\n   * @param [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(\n    bounds: [[number, number], [number, number]],\n    options: Omit<FitBoundsOptions, 'width' | 'height' | 'bounds'> = {}\n  ): WebMercatorViewport {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} bounds - [[lon, lat], [lon, lat]]\n   */\n  getBounds(options?: {z?: number}): number[][] {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} an array of 4 points that define the visible region\n   */\n  getBoundingRegion(options: {z?: number} = {}): number[][] {\n    return getBounds(this, options.z || 0);\n  }\n\n  // DEPRECATED\n\n  /** @deprecated Legacy method name */\n  getLocationAtPoint({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}