{"ast":null,"code":"import { equals } from '@math.gl/core';\nexport const WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n};\nexport function modifyPolygonWindingDirection(points, direction) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const windingDirection = getPolygonWindingDirection(points, options);\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n  return false;\n}\nexport function getPolygonWindingDirection(points) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sign(getPolygonSignedArea(points, options));\n}\nexport function getPolygonSignedArea(points) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    start = 0,\n    end = points.length\n  } = options;\n  const dim = options.size || 2;\n  let area = 0;\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    area += (points[i] - points[j]) * (points[i + 1] + points[j + 1]);\n    j = i;\n  }\n  return area / 2;\n}\nexport function forEachSegmentInPolygon(points, visitor) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    start = 0,\n    end = points.length,\n    size = 2,\n    isClosed\n  } = options;\n  const numPoints = (end - start) / size;\n  for (let i = 0; i < numPoints - 1; ++i) {\n    visitor(points[start + i * size], points[start + i * size + 1], points[start + (i + 1) * size], points[start + (i + 1) * size + 1], i, i + 1);\n  }\n  const endPointIndex = start + (numPoints - 1) * size;\n  const isClosedEx = isClosed || equals(points[start], points[endPointIndex]) && equals(points[start + 1], points[endPointIndex + 1]);\n  if (!isClosedEx) {\n    visitor(points[endPointIndex], points[endPointIndex + 1], points[start], points[start + 1], numPoints - 1, 0);\n  }\n}\nfunction reversePolygon(points, options) {\n  const {\n    start = 0,\n    end = points.length,\n    size = 2\n  } = options;\n  const numPoints = (end - start) / size;\n  const numSwaps = Math.floor(numPoints / 2);\n  for (let i = 0; i < numSwaps; ++i) {\n    const b1 = start + i * size;\n    const b2 = start + (numPoints - 1 - i) * size;\n    for (let j = 0; j < size; ++j) {\n      const tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\nexport function modifyPolygonWindingDirectionPoints(points, direction) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const currentDirection = getPolygonWindingDirectionPoints(points, options);\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n  return false;\n}\nexport function getPolygonWindingDirectionPoints(points) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\nexport function getPolygonSignedAreaPoints(points) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    start = 0,\n    end = points.length\n  } = options;\n  let area = 0;\n  for (let i = start, j = end - 1; i < end; ++i) {\n    area += (points[i][0] - points[j][0]) * (points[i][1] + points[j][1]);\n    j = i;\n  }\n  return area / 2;\n}\nexport function forEachSegmentInPolygonPoints(points, visitor) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    start = 0,\n    end = points.length,\n    isClosed\n  } = options;\n  for (let i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n  const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}","map":{"version":3,"names":["equals","WINDING","CLOCKWISE","COUNTER_CLOCKWISE","modifyPolygonWindingDirection","points","direction","options","arguments","length","undefined","windingDirection","getPolygonWindingDirection","reversePolygon","Math","sign","getPolygonSignedArea","start","end","dim","size","area","i","j","forEachSegmentInPolygon","visitor","isClosed","numPoints","endPointIndex","isClosedEx","numSwaps","floor","b1","b2","tmp","modifyPolygonWindingDirectionPoints","currentDirection","getPolygonWindingDirectionPoints","reverse","getPolygonSignedAreaPoints","forEachSegmentInPolygonPoints"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/polygon/src/polygon-utils.ts"],"sourcesContent":["/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\n\nimport {equals} from '@math.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nexport const WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n} as const;\n\n/** Polygon representation where each point is represented as a separate array of positions. */\ntype PointsArray = NumericArray[];\n\n/** Segment visitor callback type for polygons defined with flat arrays, */\ntype SegmentVisitorFlat = (\n  p1x: number,\n  p1y: number,\n  p2x: number,\n  p2y: number,\n  i1: number,\n  i2: number\n) => void;\n\n/** Segment visitor callback type for polygons defined with array of points. */\nexport type SegmentVisitorPoints = (\n  p1: NumericArray,\n  p2: NumericArray,\n  i1: number,\n  i2: number\n) => void;\n\n/** Parameters of a polygon. */\ntype PolygonParams = {\n  start?: number; // Start index of the polygon in the array of positions. Defaults to 0.\n  end?: number; // End index of the polygon in the array of positions. Defaults to number of positions.\n  size?: number; // Size of a point, 2 (XZ) or 3 (XYZ). Defaults to 2. Affects only polygons stored in flat arrays.\n  isClosed?: boolean; // Indicates that the first point of the polygon is equal to the last point, and additional checks should be ommited.\n};\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points An array that represents points of the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirection(\n  points: NumericArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const windingDirection = getPolygonWindingDirection(points, options);\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirection(\n  points: NumericArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedArea(points, options));\n}\n\n/**\n * Returns signed area of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n * https://en.wikipedia.org/wiki/Shoelace_formula\n */\nexport function getPolygonSignedArea(points: NumericArray, options: PolygonParams = {}): number {\n  const {start = 0, end = points.length} = options;\n  const dim = options.size || 2;\n  let area = 0;\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    area += (points[i] - points[j]) * (points[i + 1] + points[j + 1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls the visitor callback for each segment in the polygon.\n * @param points An array that represents points of the polygon\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygon(\n  points: NumericArray,\n  visitor: SegmentVisitorFlat,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, size = 2, isClosed} = options;\n\n  const numPoints = (end - start) / size;\n  for (let i = 0; i < numPoints - 1; ++i) {\n    visitor(\n      points[start + i * size],\n      points[start + i * size + 1],\n      points[start + (i + 1) * size],\n      points[start + (i + 1) * size + 1],\n      i,\n      i + 1\n    );\n  }\n\n  const endPointIndex = start + (numPoints - 1) * size;\n  const isClosedEx =\n    isClosed ||\n    (equals(points[start], points[endPointIndex]) &&\n      equals(points[start + 1], points[endPointIndex + 1]));\n\n  if (!isClosedEx) {\n    visitor(\n      points[endPointIndex],\n      points[endPointIndex + 1],\n      points[start],\n      points[start + 1],\n      numPoints - 1,\n      0\n    );\n  }\n}\n\nfunction reversePolygon(\n  points: NumericArray,\n  options: {start?: number; end?: number; size?: number}\n): void {\n  const {start = 0, end = points.length, size = 2} = options;\n\n  const numPoints = (end - start) / size;\n  const numSwaps = Math.floor(numPoints / 2);\n  for (let i = 0; i < numSwaps; ++i) {\n    const b1 = start + i * size;\n    const b2 = start + (numPoints - 1 - i) * size;\n    for (let j = 0; j < size; ++j) {\n      const tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points Array of points that represent the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirectionPoints(\n  points: PointsArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const currentDirection = getPolygonWindingDirectionPoints(points, options);\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirectionPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\n\n/**\n * Returns signed area of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n */\nexport function getPolygonSignedAreaPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  const {start = 0, end = points.length} = options;\n  let area = 0;\n  for (let i = start, j = end - 1; i < end; ++i) {\n    area += (points[i][0] - points[j][0]) * (points[i][1] + points[j][1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls visitor callback for each segment in the polygon.\n * @param points Array of points that represent the polygon.\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygonPoints(\n  points: PointsArray,\n  visitor: SegmentVisitorPoints,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, isClosed} = options;\n  for (let i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n\n  const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}