{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Resource from './resource';\nexport default class ResourceManager {\n  constructor(_ref) {\n    let {\n      gl,\n      protocol\n    } = _ref;\n    _defineProperty(this, \"protocol\", void 0);\n    _defineProperty(this, \"_context\", void 0);\n    _defineProperty(this, \"_resources\", void 0);\n    _defineProperty(this, \"_consumers\", void 0);\n    _defineProperty(this, \"_pruneRequest\", void 0);\n    this.protocol = protocol || 'resource://';\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n    this._pruneRequest = null;\n  }\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n  add(_ref2) {\n    let {\n      resourceId,\n      data,\n      forceUpdate = false,\n      persistent = true\n    } = _ref2;\n    let res = this._resources[resourceId];\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    res.persistent = persistent;\n  }\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n  unsubscribe(_ref3) {\n    let {\n      consumerId\n    } = _ref3;\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n  subscribe(_ref4) {\n    let {\n      resourceId,\n      onChange,\n      consumerId,\n      requestId = 'default'\n    } = _ref4;\n    const {\n      _resources: resources,\n      protocol\n    } = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        this.add({\n          resourceId,\n          data: null,\n          persistent: false\n        });\n      }\n    }\n    const res = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n    return undefined;\n  }\n  prune() {\n    if (!this._pruneRequest) {\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = consumers[consumerId] = consumers[consumerId] || {};\n    const request = consumer[requestId] || {};\n    const oldResource = request.resourceId && this._resources[request.resourceId];\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resourceId = resource.id;\n      resource.subscribe(request);\n    }\n  }\n  _prune() {\n    this._pruneRequest = null;\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}","map":{"version":3,"names":["Resource","ResourceManager","constructor","_ref","gl","protocol","_defineProperty","_context","resourceManager","_resources","_consumers","_pruneRequest","contains","resourceId","startsWith","add","_ref2","data","forceUpdate","persistent","res","setData","remove","delete","unsubscribe","_ref3","consumerId","consumer","requestId","request","resource","prune","subscribe","_ref4","onChange","resources","replace","_track","getData","undefined","setTimeout","_prune","finalize","key","consumers","oldResource","id","Object","keys","inUse"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/lib/resource/resource-manager.ts"],"sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\nimport type {ResourceSubscriber} from './resource';\n\nexport type ResourceManagerContext = {\n  gl: WebGLRenderingContext;\n  resourceManager: ResourceManager;\n};\n\nexport default class ResourceManager {\n  protocol: string;\n\n  private _context: ResourceManagerContext;\n  private _resources: Record<string, Resource>;\n  private _consumers: Record<\n    string,\n    Record<\n      string,\n      ResourceSubscriber & {\n        resourceId: string;\n      }\n    >\n  >;\n  private _pruneRequest: number | null;\n\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId: string): boolean {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({\n    resourceId,\n    data,\n    forceUpdate = false,\n    persistent = true\n  }: {\n    resourceId: string;\n    data: any;\n    forceUpdate?: boolean;\n    persistent?: boolean;\n  }) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId: string): void {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}: {consumerId: string}): void {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe<T>({\n    resourceId,\n    onChange,\n    consumerId,\n    requestId = 'default'\n  }: {\n    resourceId: string;\n    onChange: (data: T | Promise<T>) => void;\n    consumerId: string;\n    requestId: string;\n  }): T | Promise<T> | undefined {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res: Resource<T> = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune(): void {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      // @ts-ignore setTimeout returns NodeJS.Timeout in node\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize(): void {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  private _track(\n    consumerId: string,\n    requestId: string,\n    resource: Resource,\n    onChange: (data: any) => void\n  ) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    const oldResource = request.resourceId && this._resources[request.resourceId];\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resourceId = resource.id;\n      resource.subscribe(request);\n    }\n  }\n\n  private _prune(): void {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}