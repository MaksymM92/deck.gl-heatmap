{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: x => x.sourcePosition\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: x => x.targetPosition\n  },\n  getSourceColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getTargetColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getHeight: {\n    type: 'accessor',\n    value: 1\n  },\n  getTilt: {\n    type: 'accessor',\n    value: 0\n  },\n  greatCircle: false,\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nexport default class ArcLayer extends Layer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  getBounds() {\n    var _this$getAttributeMan;\n    return (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 ? void 0 : _this$getAttributeMan.getBounds(['instanceSourcePositions', 'instanceTargetPositions']);\n  }\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n  get wrapLongitude() {\n    return false;\n  }\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n  }\n  updateState(opts) {\n    super.updateState(opts);\n    if (opts.changeFlags.extensionsChanged) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      wrapLongitude\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      greatCircle,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      useShortestPath: wrapLongitude\n    }).draw();\n  }\n  _getModel(gl) {\n    let positions = [];\n    const NUM_SEGMENTS = 50;\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 5,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n    model.setUniforms({\n      numSegments: NUM_SEGMENTS\n    });\n    return model;\n  }\n}\n_defineProperty(ArcLayer, \"layerName\", 'ArcLayer');\n_defineProperty(ArcLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","ArcLayer","constructor","arguments","_defineProperty","getBounds","_this$getAttributeMan","getAttributeManager","getShaders","modules","wrapLongitude","initializeState","attributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","props","colorFormat","length","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","updateState","opts","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","_ref","uniforms","setUniforms","useShortestPath","positions","NUM_SEGMENTS","i","concat","id","geometry","drawMode","attributes","Float32Array","isInstanced","numSegments"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/arc-layer/arc-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = any> = _ArcLayerProps<DataT> & LayerProps;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    // Re-generate model if geometry changed\n    if (opts.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    let positions: number[] = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}