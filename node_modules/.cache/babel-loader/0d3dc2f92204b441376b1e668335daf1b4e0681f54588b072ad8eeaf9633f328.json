{"ast":null,"code":"import { polyfillVertexArrayObject } from './polyfill-vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES } from './polyfill-table';\nexport function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  const {\n    luma\n  } = gl;\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {\n      target: luma,\n      target2: gl\n    });\n    luma.polyfilled = true;\n  }\n  return gl;\n}\nglobalThis.polyfillContext = polyfillContext;\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\nfunction installOverrides(gl, _ref) {\n  let {\n    target,\n    target2\n  } = _ref;\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {\n        extension,\n        target: gl.luma,\n        target2: gl\n      });\n    }\n  }\n}\nfunction polyfillExtension(gl, _ref2) {\n  let {\n    extension,\n    target,\n    target2\n  } = _ref2;\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n  const {\n    meta = {}\n  } = defaults;\n  const {\n    suffix = ''\n  } = meta;\n  const ext = gl.getExtension(extension);\n  for (const key of Object.keys(defaults)) {\n    const extKey = \"\".concat(key).concat(suffix);\n    let polyfill = null;\n    if (key === 'meta') {} else if (typeof gl[key] === 'function') {} else if (ext && typeof ext[extKey] === 'function') {\n      polyfill = function () {\n        return ext[extKey](...arguments);\n      };\n    } else if (typeof defaults[key] === 'function') {\n      polyfill = defaults[key].bind(target);\n    }\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}","map":{"version":3,"names":["polyfillVertexArrayObject","assert","WEBGL2_CONTEXT_POLYFILLS","WEBGL2_CONTEXT_OVERRIDES","polyfillContext","gl","luma","polyfilled","initializeExtensions","installPolyfills","installOverrides","target","target2","globalThis","extensions","EXTENSIONS","getSupportedExtensions","extension","getExtension","_ref","Object","keys","forEach","key","originalFunc","bind","polyfill","polyfills","getOwnPropertyNames","polyfillExtension","_ref2","defaults","meta","suffix","ext","extKey","concat","arguments"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/gltools/src/polyfill/polyfill-context.js"],"sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/** @typedef {import('./polyfill-context')} types */\n\nimport {polyfillVertexArrayObject} from './polyfill-vertex-array-object';\nimport {assert} from '../utils/assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n/** @type {types['polyfillContext']} */\nexport function polyfillContext(gl) {\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  const {luma} = gl;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: luma, target2: gl});\n    luma.polyfilled = true;\n  }\n\n  // TODO - only supporting a few members\n  /** @type {WebGL2RenderingContext} */\n  // @ts-ignore\n  return gl;\n}\n\n// TODO - is this still required?\n// @ts-ignore\nglobalThis.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}