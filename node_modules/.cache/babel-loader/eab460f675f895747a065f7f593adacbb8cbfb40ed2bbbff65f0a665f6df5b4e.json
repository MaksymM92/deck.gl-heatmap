{"ast":null,"code":"import { createIterable } from '@deck.gl/core';\nimport { getGridOffset } from '../utils/grid-aggregation-utils';\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  const hashInfo = pointsToGridHashing(props, aggregationParams);\n  const result = getGridLayerDataFromGridHash(hashInfo);\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\nfunction pointsToGridHashing(props, aggregationParams) {\n  const {\n    data = [],\n    cellSize\n  } = props;\n  const {\n    attributes,\n    viewport,\n    projectPoints,\n    numInstances\n  } = aggregationParams;\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  const boundingBox = aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  const offsets = aggregationParams.posOffset || [180, 90];\n  const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {\n      gridHash: {},\n      gridOffset\n    };\n  }\n  const {\n    width,\n    height\n  } = viewport;\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n  const gridHash = {};\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n  const position = new Array(3);\n  for (const pt of iterable) {\n    objectInfo.index++;\n    position[0] = positions[objectInfo.index * size];\n    position[1] = positions[objectInfo.index * size + 1];\n    position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n    const [x, y] = projectPoints ? viewport.project(position) : position;\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n      const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n      if (!projectPoints || xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow) {\n        const key = \"\".concat(yIndex, \"-\").concat(xIndex);\n        gridHash[key] = gridHash[key] || {\n          count: 0,\n          points: [],\n          lonIdx: xIndex,\n          latIdx: yIndex\n        };\n        gridHash[key].count += 1;\n        gridHash[key].points.push({\n          source: pt,\n          index: objectInfo.index\n        });\n      }\n    }\n  }\n  return {\n    gridHash,\n    gridOffset,\n    offsets: [offsets[0] * -1, offsets[1] * -1]\n  };\n}\nfunction getGridLayerDataFromGridHash(_ref) {\n  let {\n    gridHash,\n    gridOffset,\n    offsets\n  } = _ref;\n  const data = new Array(Object.keys(gridHash).length);\n  let i = 0;\n  for (const key in gridHash) {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const index = i++;\n    data[index] = {\n      index,\n      position: [offsets[0] + gridOffset.xOffset * lonIdx, offsets[1] + gridOffset.yOffset * latIdx],\n      ...gridHash[key]\n    };\n  }\n  return data;\n}\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  const positions = positionAttribute.value;\n  const {\n    size\n  } = positionAttribute.getAccessor();\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n  for (let i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n  return {\n    xMin,\n    xMax,\n    yMin,\n    yMax\n  };\n}","map":{"version":3,"names":["createIterable","getGridOffset","pointToDensityGridDataCPU","props","aggregationParams","hashInfo","pointsToGridHashing","result","getGridLayerDataFromGridHash","gridHash","gridOffset","data","cellSize","attributes","viewport","projectPoints","numInstances","positions","value","size","getAccessor","boundingBox","getPositionBoundingBox","offsets","posOffset","xOffset","yOffset","width","height","numCol","Math","ceil","numRow","iterable","objectInfo","position","Array","pt","index","x","y","project","Number","isFinite","yIndex","floor","xIndex","key","concat","count","points","lonIdx","latIdx","push","source","_ref","Object","keys","length","i","idxs","split","parseInt","positionAttribute","numInstance","yMin","Infinity","yMax","xMin","xMax"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/cpu-grid-layer/grid-aggregator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createIterable} from '@deck.gl/core';\nimport {getGridOffset} from '../utils/grid-aggregation-utils';\n\n/**\n * Calculate density grid from an array of points\n * @param {Object} props - object containing :\n * @param {Iterable} [props.data] - data objects to be aggregated\n * @param {Integer} [props.cellSize] - size of the grid cell\n *\n * @param {Object} aggregationParams - object containing :\n * @param {Object} gridOffset - {xOffset, yOffset} cell size in meters\n * @param {Integer} width - width of the grid\n * @param {Integer} height - height of the grid\n * @param {Boolean} projectPoints - `true` if doing screen space projection, `false` otherwise\n * @param {Array} attributes - attributes array containing position values\n * @param {Viewport} viewport - viewport to be used for projection\n * @param {Array} posOffset - [xOffset, yOffset] offset to be applied to positions to get cell index\n * @param {Object} boundingBox - {xMin, yMin, xMax, yMax} bounding box of input data\n *\n * @returns {object} - grid data, cell dimension\n */\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  const hashInfo = pointsToGridHashing(props, aggregationParams);\n  const result = getGridLayerDataFromGridHash(hashInfo);\n\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\n\n/**\n * Project points into each cell, return a hash table of cells\n * @param {Iterable} points\n * @param {number} cellSize - unit size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid hash and cell dimension\n */\n/* eslint-disable max-statements, complexity */\nfunction pointsToGridHashing(props, aggregationParams) {\n  const {data = [], cellSize} = props;\n  const {attributes, viewport, projectPoints, numInstances} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  const boundingBox =\n    aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  const offsets = aggregationParams.posOffset || [180, 90];\n  const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {gridHash: {}, gridOffset};\n  }\n\n  const {width, height} = viewport;\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n\n  // calculate count per cell\n  const gridHash = {};\n\n  const {iterable, objectInfo} = createIterable(data);\n  const position = new Array(3);\n  for (const pt of iterable) {\n    objectInfo.index++;\n    position[0] = positions[objectInfo.index * size];\n    position[1] = positions[objectInfo.index * size + 1];\n    position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n    const [x, y] = projectPoints ? viewport.project(position) : position;\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n      const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n      if (\n        !projectPoints ||\n        // when doing screen space agggregation (projectPoints = true), filter points outside of the viewport range.\n        (xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow)\n      ) {\n        const key = `${yIndex}-${xIndex}`;\n\n        gridHash[key] = gridHash[key] || {count: 0, points: [], lonIdx: xIndex, latIdx: yIndex};\n        gridHash[key].count += 1;\n        gridHash[key].points.push({\n          source: pt,\n          index: objectInfo.index\n        });\n      }\n    }\n  }\n\n  return {gridHash, gridOffset, offsets: [offsets[0] * -1, offsets[1] * -1]};\n}\n/* eslint-enable max-statements, complexity */\n\nfunction getGridLayerDataFromGridHash({gridHash, gridOffset, offsets}) {\n  const data = new Array(Object.keys(gridHash).length);\n  let i = 0;\n  for (const key in gridHash) {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const index = i++;\n\n    data[index] = {\n      index,\n      position: [\n        offsets[0] + gridOffset.xOffset * lonIdx,\n        offsets[1] + gridOffset.yOffset * latIdx\n      ],\n      ...gridHash[key]\n    };\n  }\n  return data;\n}\n\n// Calculate bounding box of position attribute\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = positionAttribute.value;\n  const {size} = positionAttribute.getAccessor();\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n\n  return {xMin, xMax, yMin, yMax};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}