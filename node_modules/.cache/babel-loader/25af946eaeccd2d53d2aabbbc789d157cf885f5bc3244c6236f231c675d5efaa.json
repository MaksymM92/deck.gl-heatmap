{"ast":null,"code":"import { createTexture, destroyTexture } from '../utils/texture';\nimport { deepEqual } from '../utils/deep-equal';\nconst TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType) {\n      return true;\n    },\n    equal(value1, value2, propType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate(value, propType) {\n      return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);\n    }\n  },\n  color: {\n    validate(value, propType) {\n      return propType.optional && !value || isArray(value) && (value.length === 3 || value.length === 4);\n    },\n    equal(value1, value2, propType) {\n      return deepEqual(value1, value2, 1);\n    }\n  },\n  accessor: {\n    validate(value, propType) {\n      const valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal(value1, value2, propType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return deepEqual(value1, value2, 1);\n    }\n  },\n  array: {\n    validate(value, propType) {\n      return propType.optional && !value || isArray(value);\n    },\n    equal(value1, value2, propType) {\n      const {\n        compare\n      } = propType;\n      const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;\n      return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n    }\n  },\n  object: {\n    equal(value1, value2, propType) {\n      if (propType.ignore) {\n        return true;\n      }\n      const {\n        compare\n      } = propType;\n      const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;\n      return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n    }\n  },\n  function: {\n    validate(value, propType) {\n      return propType.optional && !value || typeof value === 'function';\n    },\n    equal(value1, value2, propType) {\n      const shouldIgnore = !propType.compare && propType.ignore !== false;\n      return shouldIgnore || value1 === value2;\n    }\n  },\n  data: {\n    transform: (value, propType, component) => {\n      const {\n        dataTransform\n      } = component.props;\n      return dataTransform && value ? dataTransform(value) : value;\n    }\n  },\n  image: {\n    transform: (value, propType, component) => {\n      const context = component.context;\n      if (!context || !context.gl) {\n        return null;\n      }\n      return createTexture(context.gl, value, {\n        ...propType.parameters,\n        ...component.props.textureParameters\n      });\n    },\n    release: value => {\n      destroyTexture(value);\n    }\n  }\n};\nexport function parsePropTypes(propDefs) {\n  const propTypes = {};\n  const defaultProps = {};\n  const deprecatedProps = {};\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    const deprecated = propDef === null || propDef === void 0 ? void 0 : propDef.deprecatedFor;\n    if (deprecated) {\n      deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];\n    } else {\n      const propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {\n    propTypes,\n    defaultProps,\n    deprecatedProps\n  };\n}\nfunction parsePropType(name, propDef) {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n    case 'array':\n      return normalizePropDefinition(name, {\n        type: 'array',\n        value: propDef,\n        compare: false\n      });\n    case 'boolean':\n      return normalizePropDefinition(name, {\n        type: 'boolean',\n        value: propDef\n      });\n    case 'number':\n      return normalizePropDefinition(name, {\n        type: 'number',\n        value: propDef\n      });\n    case 'function':\n      return normalizePropDefinition(name, {\n        type: 'function',\n        value: propDef,\n        compare: true\n      });\n    default:\n      return {\n        name,\n        type: 'unknown',\n        value: propDef\n      };\n  }\n}\nfunction normalizePropDefinition(name, propDef) {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      return {\n        name,\n        type: 'object',\n        value: propDef\n      };\n    }\n    return {\n      name,\n      type: getTypeOf(propDef.value),\n      ...propDef\n    };\n  }\n  return {\n    name,\n    ...TYPE_DEFINITIONS[propDef.type],\n    ...propDef\n  };\n}\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\nfunction getTypeOf(value) {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}","map":{"version":3,"names":["createTexture","destroyTexture","deepEqual","TYPE_DEFINITIONS","boolean","validate","value","propType","equal","value1","value2","Boolean","number","Number","isFinite","max","min","color","optional","isArray","length","accessor","valueType","getTypeOf","array","compare","depth","isInteger","object","ignore","function","shouldIgnore","data","transform","component","dataTransform","props","image","context","gl","parameters","textureParameters","release","parsePropTypes","propDefs","propTypes","defaultProps","deprecatedProps","propName","propDef","Object","entries","deprecated","deprecatedFor","Array","parsePropType","name","normalizePropDefinition","type","ArrayBuffer","isView"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/lifecycle/prop-types.ts"],"sourcesContent":["import {createTexture, destroyTexture} from '../utils/texture';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type Component from './component';\nimport type {Color, Texture} from '../types/layer-props';\nimport type Layer from '../lib/layer';\n\ntype BasePropType<ValueT> = {\n  value: ValueT;\n  async?: boolean;\n  validate?: (value: any, propType: PropType) => boolean;\n  equal?: (value1: ValueT, value2: ValueT, propType: PropType) => boolean;\n};\n\n/**\n * Normalized prop type definition\n */\nexport type PropType = BasePropType<any> & {\n  type: string;\n  name: string;\n  transform?: (value: any, propType: PropType, component: Component<any>) => any;\n  release?: (value: any, propType: PropType, component: Component<any>) => void;\n};\n\ntype DefaultProp<T> =\n  | T\n  | DeprecatedProp\n  | BooleanPropType\n  | NumberPropType\n  | ColorPropType\n  | ImagePropType\n  | DataPropType<T>\n  | ArrayPropType<T>\n  | ObjectPropType<T>\n  | AccessorPropType<T>\n  | FunctionPropType<T>;\n\nexport type DefaultProps<PropsT extends {} = {}> = {\n  [propName in keyof PropsT]?: DefaultProp<Required<PropsT>[propName]>;\n};\n\ntype BooleanPropType = BasePropType<boolean> & {\n  type: 'boolean';\n};\ntype NumberPropType = BasePropType<number> & {\n  type: 'number';\n  min?: number;\n  max?: number;\n};\ntype ColorPropType = BasePropType<Color | null> & {\n  type: 'color';\n  optional?: boolean;\n};\ntype ArrayPropType<T = any[]> = BasePropType<T> & {\n  type: 'array';\n  optional?: boolean;\n  /** Ignore change in the prop value.\n   * @default false\n   */\n  ignore?: boolean;\n  /** Deep-compare two prop values. Only used if `ignore: false`.\n   * When a number is supplied, used as the depth of deep-comparison. 0 is equivalent to shallow comparison, -1 is infinite depth\n   * When a boolean is supplied, `true` is equivalent to `1` (shallow compare all child fields)\n   * @default false\n   */\n  compare?: boolean | number;\n};\ntype AccessorPropType<T = any> = BasePropType<T> & {\n  type: 'accessor';\n};\ntype FunctionPropType<T = Function> = BasePropType<T> & {\n  type: 'function';\n  optional?: boolean;\n  /** @deprecated use `ignore` instead */\n  compare?: boolean;\n  /** Ignore change in the prop value.\n   * @default true\n   */\n  ignore?: boolean;\n};\ntype DataPropType<T = any> = BasePropType<T> & {\n  type: 'data';\n};\ntype ImagePropType = BasePropType<Texture | null> & {\n  type: 'image';\n  parameters?: Record<number, number>;\n};\ntype ObjectPropType<T = any> = BasePropType<T> & {\n  type: 'object';\n  optional?: boolean;\n  /** Ignore change in the prop value.\n   * @default false\n   */\n  ignore?: boolean;\n  /** Deep-compare two prop values. Only used if `ignore: false`.\n   * When a number is supplied, used as the depth of deep-comparison. 0 is equivalent to shallow comparison, -1 is infinite depth\n   * When a boolean is supplied, `true` is equivalent to `1` (shallow compare all child fields)\n   * @default false\n   */\n  compare?: boolean | number;\n};\ntype DeprecatedProp = {\n  deprecatedFor?: string | string[];\n};\ntype PropTypeDef =\n  | DeprecatedProp\n  | boolean\n  | BooleanPropType\n  | number\n  | NumberPropType\n  | string\n  | DataPropType\n  | number[]\n  | ColorPropType\n  | ArrayPropType\n  | AccessorPropType\n  | FunctionPropType\n  | ImagePropType\n  | ObjectPropType\n  | null;\n\nconst TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType: BooleanPropType) {\n      return true;\n    },\n    equal(value1, value2, propType: BooleanPropType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate(value, propType: NumberPropType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max!) &&\n        (!('min' in propType) || value >= propType.min!)\n      );\n    }\n  },\n  color: {\n    validate(value, propType: ColorPropType) {\n      return (\n        (propType.optional && !value) ||\n        (isArray(value) && (value.length === 3 || value.length === 4))\n      );\n    },\n    equal(value1, value2, propType: ColorPropType) {\n      return deepEqual(value1, value2, 1);\n    }\n  },\n  accessor: {\n    validate(value, propType: AccessorPropType) {\n      const valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal(value1, value2, propType: AccessorPropType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return deepEqual(value1, value2, 1);\n    }\n  },\n  array: {\n    validate(value, propType: ArrayPropType) {\n      return (propType.optional && !value) || isArray(value);\n    },\n    equal(value1, value2, propType: ArrayPropType) {\n      const {compare} = propType;\n      const depth = Number.isInteger(compare as unknown) ? (compare as number) : compare ? 1 : 0;\n      return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n    }\n  },\n  object: {\n    equal(value1, value2, propType: ObjectPropType) {\n      if (propType.ignore) {\n        return true;\n      }\n      const {compare} = propType;\n      const depth = Number.isInteger(compare as unknown) ? (compare as number) : compare ? 1 : 0;\n      return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n    }\n  },\n  function: {\n    validate(value, propType: FunctionPropType) {\n      return (propType.optional && !value) || typeof value === 'function';\n    },\n    equal(value1, value2, propType: FunctionPropType) {\n      // Backward compatibility - {compare: true} and {ignore: false} are equivalent\n      const shouldIgnore = !propType.compare && propType.ignore !== false;\n      return shouldIgnore || value1 === value2;\n    }\n  },\n  data: {\n    transform: (value, propType: DataPropType, component) => {\n      const {dataTransform} = component.props;\n      return dataTransform && value ? dataTransform(value) : value;\n    }\n  },\n  image: {\n    transform: (value, propType: ImagePropType, component) => {\n      const context = (component as Layer).context;\n      if (!context || !context.gl) {\n        return null;\n      }\n      return createTexture(context.gl, value, {\n        ...propType.parameters,\n        ...component.props.textureParameters\n      });\n    },\n    release: value => {\n      destroyTexture(value);\n    }\n  }\n} as const;\n\nexport function parsePropTypes(propDefs: Record<string, PropTypeDef>): {\n  propTypes: Record<string, PropType>;\n  defaultProps: Record<string, any>;\n  deprecatedProps: Record<string, string[]>;\n} {\n  const propTypes = {};\n  const defaultProps = {};\n  const deprecatedProps = {};\n\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    const deprecated = (propDef as DeprecatedProp)?.deprecatedFor;\n    if (deprecated) {\n      deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];\n    } else {\n      const propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {propTypes, defaultProps, deprecatedProps};\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name: string, propDef: PropTypeDef): PropType {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {type: 'array', value: propDef, compare: false});\n\n    case 'boolean':\n      return normalizePropDefinition(name, {type: 'boolean', value: propDef});\n\n    case 'number':\n      return normalizePropDefinition(name, {type: 'number', value: propDef});\n\n    case 'function':\n      // return guessFunctionType(name, propDef);\n      return normalizePropDefinition(name, {type: 'function', value: propDef, compare: true});\n\n    default:\n      return {name, type: 'unknown', value: propDef};\n  }\n}\n\nfunction normalizePropDefinition(name, propDef): PropType {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {name, type: 'object', value: propDef};\n    }\n    return {name, type: getTypeOf(propDef.value), ...propDef};\n  }\n  return {name, ...TYPE_DEFINITIONS[propDef.type], ...propDef};\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value: any): string {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}