{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Layer from './layer';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nimport { PROP_TYPES_SYMBOL } from '../lifecycle/constants';\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n  getSubLayers() {\n    return this.internalState && this.internalState.subLayers || [];\n  }\n  initializeState(context) {}\n  setState(updateObject) {\n    super.setState(updateObject);\n    this.setNeedsUpdate();\n  }\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    const {\n      object\n    } = info;\n    const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n    if (!isDataWrapped) {\n      return info;\n    }\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n    return info;\n  }\n  filterSubLayer(context) {\n    return true;\n  }\n  shouldRenderSubLayer(subLayerId, data) {\n    return data && data.length;\n  }\n  getSubLayerClass(subLayerId, DefaultLayerClass) {\n    const {\n      _subLayerProps: overridingProps\n    } = this.props;\n    return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;\n  }\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        index: -1,\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n        return accessor(x, i);\n      };\n    }\n    return accessor;\n  }\n  getSubLayerProps() {\n    let sublayerProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _this$props$updateTri;\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n    const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n    if (overridingSublayerProps) {\n      const propTypes = this.props[PROP_TYPES_SYMBOL];\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n    Object.assign(newProps, sublayerProps, overridingSublayerProps);\n    newProps.id = \"\".concat(this.props.id, \"-\").concat(sublayerId);\n    newProps.updateTriggers = {\n      all: (_this$props$updateTri = this.props.updateTriggers) === null || _this$props$updateTri === void 0 ? void 0 : _this$props$updateTri.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n    return newProps;\n  }\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n  _getAttributeManager() {\n    return null;\n  }\n  _postUpdate(updateParams, forceUpdate) {\n    let subLayers = this.internalState.subLayers;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      subLayers = flatten(subLayersList, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n_defineProperty(CompositeLayer, \"layerName\", 'CompositeLayer');","map":{"version":3,"names":["Layer","debug","flatten","PROP_TYPES_SYMBOL","TRACE_RENDER_LAYERS","CompositeLayer","isComposite","isLoaded","getSubLayers","every","layer","internalState","subLayers","initializeState","context","setState","updateObject","setNeedsUpdate","getPickingInfo","_ref","info","object","isDataWrapped","__source","parent","id","index","filterSubLayer","shouldRenderSubLayer","subLayerId","data","length","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","props","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","accessor","objectInfo","target","x","i","getSubLayerProps","sublayerProps","arguments","undefined","_this$props$updateTri","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","newProps","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","subLayerPropTypes","_propTypes","key","propType","Object","assign","concat","all","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_getAttributeManager","_postUpdate","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","Boolean"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/lib/composite-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\nimport {PROP_TYPES_SYMBOL} from '../lifecycle/constants';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT extends {} = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  /** Returns sub layer props for a specific sublayer */\n  // eslint-disable-next-line complexity\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.props[PROP_TYPES_SYMBOL];\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}