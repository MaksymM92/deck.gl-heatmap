{"ast":null,"code":"export function formatTime(ms) {\n  let formatted;\n  if (ms < 10) {\n    formatted = \"\".concat(ms.toFixed(2), \"ms\");\n  } else if (ms < 100) {\n    formatted = \"\".concat(ms.toFixed(1), \"ms\");\n  } else if (ms < 1000) {\n    formatted = \"\".concat(ms.toFixed(0), \"ms\");\n  } else {\n    formatted = \"\".concat((ms / 1000).toFixed(2), \"s\");\n  }\n  return formatted;\n}\nexport function leftPad(string) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const padLength = Math.max(length - string.length, 0);\n  return \"\".concat(' '.repeat(padLength)).concat(string);\n}\nexport function rightPad(string) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const padLength = Math.max(length - string.length, 0);\n  return \"\".concat(string).concat(' '.repeat(padLength));\n}\nexport function formatValue(v) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const EPSILON = 1e-16;\n  const {\n    isInteger = false\n  } = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\nfunction formatArrayValue(v, opts) {\n  const {\n    maxElts = 16,\n    size = 1\n  } = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += \",\".concat(i % size === 0 ? ' ' : '');\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return \"\".concat(string).concat(terminator);\n}\nexport function formatImage(image, message, scale) {\n  let maxWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n  const width = image.width * scale;\n  const height = image.height * scale;\n  const style = ['font-size:1px;', \"padding:\".concat(Math.floor(height / 2), \"px \").concat(Math.floor(width / 2), \"px;\"), \"line-height:\".concat(height, \"px;\"), \"background:url(\".concat(imageUrl, \");\"), \"background-size:\".concat(width, \"px \").concat(height, \"px;\"), 'color:transparent;'].join('');\n  return [\"\".concat(message, \" %c+\"), style];\n}","map":{"version":3,"names":["formatTime","ms","formatted","concat","toFixed","leftPad","string","length","arguments","undefined","padLength","Math","max","repeat","rightPad","formatValue","v","opts","EPSILON","isInteger","Array","isArray","ArrayBuffer","isView","formatArrayValue","Number","isFinite","String","abs","toPrecision","decimal","indexOf","slice","maxElts","size","i","terminator","formatImage","image","message","scale","maxWidth","imageUrl","src","replace","width","min","height","style","floor","join"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@probe.gl/log/src/utils/formatters.ts"],"sourcesContent":["// TODO: Currently unused, keeping in case we want it later for log formatting\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, opts: {isInteger?: boolean} = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\n/** Inspired by https://github.com/hughsk/console-image (MIT license) */\nexport function formatImage(image, message, scale, maxWidth = 600) {\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n\n  const style = [\n    'font-size:1px;',\n    `padding:${Math.floor(height / 2)}px ${Math.floor(width / 2)}px;`,\n    `line-height:${height}px;`,\n    `background:url(${imageUrl});`,\n    `background-size:${width}px ${height}px;`,\n    'color:transparent;'\n  ].join('');\n\n  return [`${message} %c+`, style];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}