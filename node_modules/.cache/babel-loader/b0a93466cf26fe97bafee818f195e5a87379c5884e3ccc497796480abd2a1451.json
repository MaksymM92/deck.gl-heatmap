{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { replaceInRange } from '../utils';\nimport { binaryToFeatureForAccesor } from './geojson-binary';\nimport { POINT_LAYER, LINE_LAYER, POLYGON_LAYER, getDefaultProps, forwardProps } from './sub-layer-map';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nimport { createLayerPropsFromFeatures, createLayerPropsFromBinary } from './geojson-layer-props';\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\nconst defaultProps = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _full3d: false,\n  iconAtlas: {\n    type: 'object',\n    value: null\n  },\n  iconMapping: {\n    type: 'object',\n    value: {}\n  },\n  getIcon: {\n    type: 'accessor',\n    value: f => f.properties.icon\n  },\n  getText: {\n    type: 'accessor',\n    value: f => f.properties.text\n  },\n  pointType: 'circle',\n  getRadius: {\n    deprecatedFor: 'getPointRadius'\n  }\n};\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n  }\n  updateState(_ref) {\n    let {\n      props,\n      changeFlags\n    } = _ref;\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {\n      data\n    } = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n    this.setState({\n      binary\n    });\n    if (binary) {\n      this._updateStateBinary({\n        props,\n        changeFlags\n      });\n    } else {\n      this._updateStateJSON({\n        props,\n        changeFlags\n      });\n    }\n  }\n  _updateStateBinary(_ref2) {\n    let {\n      props,\n      changeFlags\n    } = _ref2;\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({\n      layerProps\n    });\n  }\n  _updateStateJSON(_ref3) {\n    let {\n      props,\n      changeFlags\n    } = _ref3;\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(replaceInRange({\n            data: newFeatures[key],\n            getIndex: f => f.__source.index,\n            dataRange,\n            replace: partialFeatures[key]\n          }));\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index,\n      sourceLayer\n    } = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer.id.startsWith(\"\".concat(this.id, \"-\").concat(ft, \"-\")));\n    if (index >= 0 && sourceLayer.id.startsWith(\"\".concat(this.id, \"-points-text\")) && this.state.binary) {\n      info.index = this.props.data.points.globalFeatureIds.value[index];\n    }\n    return info;\n  }\n  _updateAutoHighlight(info) {\n    const pointLayerIdPrefix = \"\".concat(this.id, \"-points-\");\n    const sourceIsPoints = info.featureType === 'points';\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n  _renderPolygonLayer() {\n    const {\n      extruded,\n      wireframe\n    } = this.props;\n    const {\n      layerProps\n    } = this.state;\n    const id = 'polygons-fill';\n    const PolygonFillLayer = this.shouldRenderSubLayer(id, layerProps.polygons.data) && this.getSubLayerClass(id, POLYGON_LAYER.type);\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n      return new PolygonFillLayer(forwardedProps, this.getSubLayerProps({\n        id,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.polygons);\n    }\n    return null;\n  }\n  _renderLineLayers() {\n    const {\n      extruded,\n      stroked\n    } = this.props;\n    const {\n      layerProps\n    } = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n    const PolygonStrokeLayer = !extruded && stroked && this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) && this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer = this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) && this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n      return [PolygonStrokeLayer && new PolygonStrokeLayer(forwardedProps, this.getSubLayerProps({\n        id: polygonStrokeLayerId,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.polygonsOutline), LineStringsLayer && new LineStringsLayer(forwardedProps, this.getSubLayerProps({\n        id: lineStringsLayerId,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.lines)];\n    }\n    return null;\n  }\n  _renderPointLayers() {\n    const {\n      pointType\n    } = this.props;\n    const {\n      layerProps,\n      binary\n    } = this.state;\n    let {\n      highlightedObjectIndex\n    } = this.props;\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(d => d.__source.index === highlightedObjectIndex);\n    }\n    const types = new Set(pointType.split('+'));\n    const pointLayers = [];\n    for (const type of types) {\n      const id = \"points-\".concat(type);\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer = PointLayerMapping && this.shouldRenderSubLayer(id, layerProps.points.data) && this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n        if (type === 'text' && binary) {\n          const {\n            instancePickingColors,\n            ...rest\n          } = pointsLayerProps.data.attributes;\n          pointsLayerProps = {\n            ...pointsLayerProps,\n            data: {\n              ...pointsLayerProps.data,\n              attributes: rest\n            }\n          };\n        }\n        pointLayers.push(new PointsLayer(forwardedProps, this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers,\n          highlightedObjectIndex\n        }), pointsLayerProps));\n      }\n    }\n    return pointLayers;\n  }\n  renderLayers() {\n    const {\n      extruded\n    } = this.props;\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n    return [!extruded && polygonFillLayer, lineLayers, pointLayers, extruded && polygonFillLayer];\n  }\n  getSubLayerAccessor(accessor) {\n    const {\n      binary\n    } = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n    return (object, info) => {\n      const {\n        data,\n        index\n      } = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n}\n_defineProperty(GeoJsonLayer, \"layerName\", 'GeoJsonLayer');\n_defineProperty(GeoJsonLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["CompositeLayer","replaceInRange","binaryToFeatureForAccesor","POINT_LAYER","LINE_LAYER","POLYGON_LAYER","getDefaultProps","forwardProps","getGeojsonFeatures","separateGeojsonFeatures","createLayerPropsFromFeatures","createLayerPropsFromBinary","FEATURE_TYPES","defaultProps","circle","icon","text","stroked","filled","extruded","wireframe","_full3d","iconAtlas","type","value","iconMapping","getIcon","f","properties","getText","pointType","getRadius","deprecatedFor","GeoJsonLayer","initializeState","state","layerProps","features","updateState","_ref","props","changeFlags","dataChanged","data","binary","setState","_updateStateBinary","_updateStateJSON","_ref2","encodePickingColor","_ref3","wrapFeature","getSubLayerRow","bind","newFeatures","featuresDiff","Array","isArray","oldFeatures","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","getPickingInfo","params","info","sourceLayer","featureType","find","ft","id","startsWith","concat","points","globalFeatureIds","_updateAutoHighlight","pointLayerIdPrefix","sourceIsPoints","layer","getSubLayers","updateAutoHighlight","_renderPolygonLayer","PolygonFillLayer","shouldRenderSubLayer","polygons","getSubLayerClass","forwardedProps","useLineColor","getLineColor","updateTriggers","lineColors","getSubLayerProps","_renderLineLayers","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","polygonsOutline","LineStringsLayer","lines","_renderPointLayers","highlightedObjectIndex","Number","isFinite","findIndex","d","types","Set","split","pointLayers","PointLayerMapping","PointsLayer","pointsLayerProps","instancePickingColors","rest","attributes","renderLayers","polygonFillLayer","lineLayers","getSubLayerAccessor","accessor","object","feature"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/geojson-layer/geojson-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  PickingInfo,\n  Unit,\n  Material,\n  UpdateParameters,\n  _ConstructorOf,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport type {BinaryFeatures} from '@loaders.gl/schema';\nimport type {Feature, GeoJSON} from 'geojson';\n\nimport {replaceInRange} from '../utils';\nimport {BinaryFeatureTypes, binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, SeparatedGeometries, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\n/** All properties supported by GeoJsonLayer */\nexport type GeoJsonLayerProps = _GeoJsonLayerProps & CompositeLayerProps;\n\n/** Properties added by GeoJsonLayer */\nexport type _GeoJsonLayerProps = {\n  data: string | GeoJSON | BinaryFeatures | Promise<GeoJSON | BinaryFeatures>;\n  /**\n   * How to render Point and MultiPoint features in the data.\n   *\n   * Supported types are:\n   *  * `'circle'`\n   *  * `'icon'`\n   *  * `'text'`\n   *\n   * @default 'circle'\n   */\n  pointType?: string;\n} & _GeoJsonLayerFillProps &\n  _GeoJsonLayerStrokeProps &\n  _GeoJsonLayer3DProps &\n  _GeoJsonLayerPointCircleProps &\n  _GeojsonLayerIconPointProps &\n  _GeojsonLayerTextPointProps;\n\n/** GeoJsonLayer fill options. */\ntype _GeoJsonLayerFillProps = {\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<Feature, Color>;\n};\n\n/** GeoJsonLayer stroke options. */\ntype _GeoJsonLayerStrokeProps = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<Feature, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<Feature, number>;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * A multiplier that is applied to all line widths\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  /**\n   * Type of line caps.\n   *\n   * If `true`, draw round caps. Otherwise draw square caps.\n   *\n   * @default false\n   */\n  lineCapRounded?: boolean;\n\n  /**\n   * If `true`, extrude the line in screen space (width always faces the camera).\n   * If `false`, the width always faces up.\n   *\n   * @default false\n   */\n  lineBillboard?: boolean;\n};\n\n/** GeoJsonLayer 3D options. */\ntype _GeoJsonLayer3DProps = {\n  /**\n   * Extrude Polygon and MultiPolygon features along the z-axis if set to true\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<Feature, number>;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: boolean;\n\n  /**\n   * Material settings for lighting effect. Applies to extruded polgons.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** GeoJsonLayer Properties forwarded to `ScatterPlotLayer` if `pointType` is `'circle'` */\nexport type _GeoJsonLayerPointCircleProps = {\n  getPointRadius?: Accessor<Feature, number>;\n  pointRadiusUnits?: Unit;\n  pointRadiusScale?: number;\n  pointRadiusMinPixels?: number;\n  pointRadiusMaxPixels?: number;\n  pointAntialiasing?: boolean;\n  pointBillboard?: boolean;\n\n  /** @deprecated use getPointRadius */\n  getRadius?: Accessor<Feature, number>;\n};\n\n/** GeoJsonLayer properties forwarded to `IconLayer` if `pointType` is `'icon'` */\ntype _GeojsonLayerIconPointProps = {\n  iconAtlas?: any;\n  iconMapping?: any;\n  getIcon?: Accessor<Feature, any>;\n  getIconSize?: Accessor<Feature, number>;\n  getIconColor?: Accessor<Feature, Color>;\n  getIconAngle?: Accessor<Feature, number>;\n  getIconPixelOffset?: Accessor<Feature, number[]>;\n  iconSizeUnits?: Unit;\n  iconSizeScale?: number;\n  iconSizeMinPixels?: number;\n  iconSizeMaxPixels?: number;\n  iconBillboard?: boolean;\n  iconAlphaCutoff?: number;\n};\n\n/** GeoJsonLayer properties forwarded to `TextLayer` if `pointType` is `'text'` */\ntype _GeojsonLayerTextPointProps = {\n  getText?: Accessor<Feature, any>;\n  getTextColor?: Accessor<Feature, Color>;\n  getTextAngle?: Accessor<Feature, number>;\n  getTextSize?: Accessor<Feature, number>;\n  getTextAnchor?: Accessor<Feature, string>;\n  getTextAlignmentBaseline?: Accessor<Feature, string>;\n  getTextPixelOffset?: Accessor<Feature, number[]>;\n  getTextBackgroundColor?: Accessor<Feature, Color>;\n  getTextBorderColor?: Accessor<Feature, Color>;\n  getTextBorderWidth?: Accessor<Feature, number>;\n  textSizeUnits?: Unit;\n  textSizeScale?: number;\n  textSizeMinPixels?: number;\n  textSizeMaxPixels?: number;\n  textCharacterSet?: any;\n  textFontFamily?: string;\n  textFontWeight?: number;\n  textLineHeight?: number;\n  textMaxWidth?: number;\n  textWordBreak?: string; // TODO\n  textBackground?: boolean;\n  textBackgroundPadding?: number[];\n  textOutlineColor?: Color;\n  textOutlineWidth?: number;\n  textBillboard?: boolean;\n  textFontSettings?: any;\n};\n\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\n\nconst defaultProps: DefaultProps<GeoJsonLayerProps> = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _full3d: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\ntype GeoJsonPickingInfo = PickingInfo & {\n  featureType?: string | null;\n  info?: any;\n};\n\n/** Render GeoJSON formatted data as polygons, lines and points (circles, icons and/or texts). */\nexport default class GeoJsonLayer<ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<GeoJsonLayerProps> & ExtraProps\n> {\n  static layerName = 'GeoJsonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary =\n      data && 'points' in (data as {}) && 'polygons' in (data as {}) && 'lines' in (data as {});\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  private _updateStateBinary({props, changeFlags}): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  private _updateStateJSON({props, changeFlags}): void {\n    const features: Feature[] = getGeojsonFeatures(props.data) as any;\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures: SeparatedGeometries = {} as SeparatedGeometries;\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  getPickingInfo(params): GeoJsonPickingInfo {\n    const info = super.getPickingInfo(params) as GeoJsonPickingInfo;\n    const {index, sourceLayer} = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer!.id.startsWith(`${this.id}-${ft}-`));\n    if (index >= 0 && sourceLayer!.id.startsWith(`${this.id}-points-text`) && this.state.binary) {\n      info.index = (this.props.data as BinaryFeatures).points!.globalFeatureIds.value[index];\n    }\n    return info;\n  }\n\n  _updateAutoHighlight(info: GeoJsonPickingInfo): void {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.featureType === 'points';\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  private _renderPolygonLayer(): Layer | null {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  private _renderLineLayers(): (Layer | false)[] | null {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  private _renderPointLayers(): Layer[] | null {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers: Layer[] = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer: _ConstructorOf<Layer> =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n\n        if (type === 'text' && binary) {\n          // Picking colors are per-point but for text per-character are required\n          // getPickingInfo() maps back to the correct index\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {instancePickingColors, ...rest} = pointsLayerProps.data.attributes;\n          pointsLayerProps = {\n            ...pointsLayerProps,\n            data: {...pointsLayerProps.data, attributes: rest}\n          };\n        }\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            pointsLayerProps\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data as unknown as BinaryFeatureTypes, index);\n      // @ts-ignore (TS2349) accessor is always function\n      return accessor(feature, info);\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}