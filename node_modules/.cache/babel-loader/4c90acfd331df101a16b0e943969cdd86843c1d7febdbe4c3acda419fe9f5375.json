{"ast":null,"code":"import Viewport from '../viewports/viewport';\nimport { Matrix4, clamp } from '@math.gl/core';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nconst viewMatrix = new Matrix4().lookAt({\n  eye: [0, 0, 1]\n});\nfunction getProjectionMatrix(_ref) {\n  let {\n    width,\n    height,\n    near,\n    far,\n    padding\n  } = _ref;\n  let left = -width / 2;\n  let right = width / 2;\n  let bottom = -height / 2;\n  let top = height / 2;\n  if (padding) {\n    const {\n      left: l = 0,\n      right: r = 0,\n      top: t = 0,\n      bottom: b = 0\n    } = padding;\n    const offsetX = clamp((l + width - r) / 2, 0, width) - width / 2;\n    const offsetY = clamp((t + height - b) / 2, 0, height) - height / 2;\n    left -= offsetX;\n    right -= offsetX;\n    bottom += offsetY;\n    top += offsetY;\n  }\n  return new Matrix4().ortho({\n    left,\n    right,\n    bottom,\n    top,\n    near,\n    far\n  });\n}\nexport default class OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      padding = null,\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n    let distanceScales;\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n    super({\n      ...props,\n      longitude: undefined,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width || 1,\n        height: height || 1,\n        padding,\n        near,\n        far\n      }),\n      zoom: zoom_,\n      distanceScales\n    });\n  }\n  projectFlat(_ref2) {\n    let [X, Y] = _ref2;\n    const {\n      unitsPerMeter\n    } = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n  unprojectFlat(_ref3) {\n    let [x, y] = _ref3;\n    const {\n      metersPerUnit\n    } = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return {\n      target: this.unprojectFlat(newCenter)\n    };\n  }\n}","map":{"version":3,"names":["Viewport","Matrix4","clamp","pixelsToWorld","vec2","viewMatrix","lookAt","eye","getProjectionMatrix","_ref","width","height","near","far","padding","left","right","bottom","top","l","r","t","b","offsetX","offsetY","ortho","OrthographicViewport","constructor","props","zoom","target","flipY","zoomX","Array","isArray","zoomY","zoom_","Math","min","scale","pow","distanceScales","scaleX","scaleY","unitsPerMeter","metersPerUnit","longitude","undefined","position","clone","projectionMatrix","projectFlat","_ref2","X","Y","unprojectFlat","_ref3","x","y","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","center"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/viewports/orthographic-viewport.ts"],"sourcesContent":["import Viewport from '../viewports/viewport';\n\nimport {Matrix4, clamp} from '@math.gl/core';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport type {Padding} from './viewport';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({\n  width,\n  height,\n  near,\n  far,\n  padding\n}: {\n  width: number;\n  height: number;\n  near: number;\n  far: number;\n  padding: Padding | null;\n}) {\n  let left = -width / 2;\n  let right = width / 2;\n  let bottom = -height / 2;\n  let top = height / 2;\n  if (padding) {\n    const {left: l = 0, right: r = 0, top: t = 0, bottom: b = 0} = padding;\n    const offsetX = clamp((l + width - r) / 2, 0, width) - width / 2;\n    const offsetY = clamp((t + height - b) / 2, 0, height) - height / 2;\n    left -= offsetX;\n    right -= offsetX;\n    bottom += offsetY;\n    top += offsetY;\n  }\n\n  return new Matrix4().ortho({\n    left,\n    right,\n    bottom,\n    top,\n    near,\n    far\n  });\n}\n\nexport type OrthographicViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target?: [number, number, number] | [number, number];\n  /**  The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large.\n   *   To apply independent zoom levels to the X and Y axes, supply an array `[zoomX, zoomY]`. Default `0`. */\n  zoom?: number | [number, number];\n  /** Padding around the viewport, in pixels. */\n  padding?: Padding | null;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to use top-left coordinates (`true`) or bottom-left coordinates (`false`). Default `true`. */\n  flipY?: boolean;\n};\n\nexport default class OrthographicViewport extends Viewport {\n  constructor(props: OrthographicViewportOptions) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      padding = null,\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    let distanceScales;\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: undefined,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width || 1,\n        height: height || 1,\n        padding,\n        near,\n        far\n      }),\n      zoom: zoom_,\n      distanceScales\n    });\n  }\n\n  projectFlat([X, Y]: number[]): [number, number] {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]: number[]): [number, number] {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords: number[], pixel: number[]): OrthographicViewportOptions {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: this.unprojectFlat(newCenter)};\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}