{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\nfunction normalizeData(data) {\n  const {\n    header,\n    attributes\n  } = data;\n  if (!header || !attributes) {\n    return;\n  }\n  data.length = header.vertexCount;\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n  updateState(params) {\n    const {\n      changeFlags,\n      props\n    } = params;\n    super.updateState(params);\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      pointSize,\n      sizeUnits\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeUnits: UNIT[sizeUnits],\n      radiusPixels: pointSize\n    }).draw();\n  }\n  _getModel(gl) {\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = i / 3 * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n_defineProperty(PointCloudLayer, \"layerName\", 'PointCloudLayer');\n_defineProperty(PointCloudLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["Layer","project32","gouraudLighting","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","normalizeData","data","header","attributes","length","vertexCount","POSITION","instancePositions","NORMAL","instanceNormals","COLOR_0","instanceColors","PointCloudLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","size","fp64","use64bitPositions","transition","accessor","defaultValue","props","colorFormat","normalized","updateState","params","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","dataChanged","draw","_ref","uniforms","setUniforms","positions","i","angle","Math","PI","push","cos","sin","id","geometry","drawMode","Float32Array","isInstanced"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/point-cloud-layer/point-cloud-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  gouraudLighting,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\nconst DEFAULT_NORMAL: [number, number, number] = [0, 0, 1];\n\nconst defaultProps: DefaultProps<PointCloudLayerProps> = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\n/** All properties supported by PointCloudLayer. */\nexport type PointCloudLayerProps<DataT = any> = _PointCloudLayerProps<DataT> & LayerProps;\n\n/** Properties added by PointCloudLayer. */\ntype _PointCloudLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the point size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n\n  /**\n   * Global radius of all points, in units specified by `sizeUnits`\n   * @default 10\n   */\n  pointSize?: number;\n\n  /**\n   * @deprecated Use `pointSize` instead\n   */\n  radiusPixels?: number;\n\n  /**\n   * Material settings for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The normal of each object, in `[nx, ny, nz]`.\n   * @default [0, 0, 1]\n   */\n  getNormal?: Accessor<DataT, [number, number, number]>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\n/** Render a point cloud with 3D positions, normals and colors. */\nexport default class PointCloudLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PointCloudLayerProps<DataT>>\n> {\n  static layerName = 'PointCloudLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    const {changeFlags, props} = params;\n    super.updateState(params);\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {pointSize, sizeUnits} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeUnits: UNIT[sizeUnits],\n        radiusPixels: pointSize\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a triangle that minimally cover the unit circle\n    const positions: number[] = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}