{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nexport function stubRemovedMethods(instance, className, version, methodNames) {\n  const upgradeMessage = \"See luma.gl \".concat(version, \" Upgrade Guide at https://luma.gl/docs/upgrade-guide\");\n  const prototype = Object.getPrototypeOf(instance);\n  methodNames.forEach(methodName => {\n    if (prototype.methodName) {\n      return;\n    }\n    prototype[methodName] = () => {\n      log.removed(\"Calling removed method \".concat(className, \".\").concat(methodName, \": \"), upgradeMessage)();\n      throw new Error(methodName);\n    };\n  });\n}","map":{"version":3,"names":["log","stubRemovedMethods","instance","className","version","methodNames","upgradeMessage","concat","prototype","Object","getPrototypeOf","forEach","methodName","removed","Error"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/utils/stub-methods.js"],"sourcesContent":["import {log} from '@luma.gl/gltools';\n\n// Install stubs for removed methods\nexport function stubRemovedMethods(instance, className, version, methodNames) {\n  const upgradeMessage = `See luma.gl ${version} Upgrade Guide at \\\nhttps://luma.gl/docs/upgrade-guide`;\n\n  const prototype = Object.getPrototypeOf(instance);\n\n  methodNames.forEach(methodName => {\n    if (prototype.methodName) {\n      return;\n    }\n\n    prototype[methodName] = () => {\n      log.removed(`Calling removed method ${className}.${methodName}: `, upgradeMessage)();\n      throw new Error(methodName);\n    };\n  });\n}\n"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,kBAAlB;AAGA,OAAO,SAASC,kBAATA,CAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,OAAjD,EAA0DC,WAA1D,EAAuE;EAC5E,MAAMC,cAAc,kBAAAC,MAAA,CAAkBH,OAAlB,yDAApB;EAGA,MAAMI,SAAS,GAAGC,MAAM,CAACC,cAAP,CAAsBR,QAAtB,CAAlB;EAEAG,WAAW,CAACM,OAAZ,CAAoBC,UAAU,IAAI;IAChC,IAAIJ,SAAS,CAACI,UAAd,EAA0B;MACxB;IACD;IAEDJ,SAAS,CAACI,UAAD,CAAT,GAAwB,MAAM;MAC5BZ,GAAG,CAACa,OAAJ,2BAAAN,MAAA,CAAsCJ,SAAtC,OAAAI,MAAA,CAAmDK,UAAnD,SAAmEN,cAAnE;MACA,MAAM,IAAIQ,KAAJ,CAAUF,UAAV,CAAN;IACD,CAHD;EAID,CATD;AAUD"},"metadata":{},"sourceType":"module","externalDependencies":[]}