{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { deepEqual } from '../utils/deep-equal';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\nexport default class ViewManager {\n  constructor(props) {\n    _defineProperty(this, \"width\", void 0);\n    _defineProperty(this, \"height\", void 0);\n    _defineProperty(this, \"views\", void 0);\n    _defineProperty(this, \"viewState\", void 0);\n    _defineProperty(this, \"controllers\", void 0);\n    _defineProperty(this, \"timeline\", void 0);\n    _defineProperty(this, \"_viewports\", void 0);\n    _defineProperty(this, \"_viewportMap\", void 0);\n    _defineProperty(this, \"_isUpdating\", void 0);\n    _defineProperty(this, \"_needsRedraw\", void 0);\n    _defineProperty(this, \"_needsUpdate\", void 0);\n    _defineProperty(this, \"_eventManager\", void 0);\n    _defineProperty(this, \"_eventCallbacks\", void 0);\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n  finalize() {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n  getView(viewId) {\n    return this.views.find(view => view.id === viewId);\n  }\n  getViewState(viewOrViewId) {\n    const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {\n      x: xyz[0],\n      y: xyz[1]\n    };\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n  setProps(props) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n  _update() {\n    this._isUpdating = true;\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n    this._isUpdating = false;\n  }\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n  _setViews(views) {\n    views = flatten(views, Boolean);\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n    this.views = views;\n  }\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState, 3);\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n  _onViewStateChange(viewId, event) {\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange({\n        ...event,\n        viewId\n      });\n    }\n  }\n  _createController(view, props) {\n    const Controller = props.type;\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState => {\n        var _this$getView;\n        return (_this$getView = this.getView(view.id)) === null || _this$getView === void 0 ? void 0 : _this$getView.makeViewport({\n          viewState,\n          width: this.width,\n          height: this.height\n        });\n      }\n    });\n    return controller;\n  }\n  _updateController(view, viewState, viewport, controller) {\n    const controllerProps = view.controller;\n    if (controllerProps) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n      if (!controller) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n  _rebuildViewports() {\n    const {\n      views\n    } = this;\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n    let invalidateControllers = false;\n    for (let i = views.length; i--;) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({\n        viewState,\n        width: this.width,\n        height: this.height\n      });\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        oldController.finalize();\n        oldController = null;\n      }\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n      this._viewports.unshift(viewport);\n    }\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n    this._buildViewportMap();\n  }\n  _buildViewportMap() {\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}","map":{"version":3,"names":["deepEqual","log","flatten","ViewManager","constructor","props","_defineProperty","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractionStateChange","Object","seal","setProps","finalize","key","controller","needsRedraw","opts","arguments","length","undefined","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","viewId","updateTransition","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","find","getViewState","viewOrViewId","getViewStateId","filterViewState","getViewport","unproject","xyz","viewports","pixel","x","y","i","p","slice","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_createController","Controller","type","bind","onStateChange","makeViewport","_this$getView","_updateController","controllerProps","resolvedProps","oldControllers","invalidateControllers","oldController","hasController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/lib/view-manager.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nimport type Controller from '../controllers/controller';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Timeline} from '@luma.gl/engine';\nimport type {EventManager} from 'mjolnir.js';\nimport type {ConstructorOf} from '../types/types';\n\nexport default class ViewManager {\n  width: number;\n  height: number;\n  views: View[];\n  viewState: any;\n  controllers: {[viewId: string]: Controller<any> | null};\n  timeline: Timeline;\n\n  private _viewports: Viewport[];\n  private _viewportMap: {[viewId: string]: Viewport};\n  private _isUpdating: boolean;\n  private _needsRedraw: string | false;\n  private _needsUpdate: string | false;\n  private _eventManager: EventManager;\n  private _eventCallbacks: {\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n  };\n\n  constructor(props: {\n    // Initial options\n    timeline: Timeline;\n    eventManager: EventManager;\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n    // Props\n    views?: View[];\n    viewState?: any;\n    width?: number;\n    height?: number;\n  }) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  /** Remove all resources and event listeners */\n  finalize(): void {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  /** Check if a redraw is needed */\n  needsRedraw(\n    opts: {\n      /** Reset redraw flags to false */\n      clearRedrawFlags?: boolean;\n    } = {clearRedrawFlags: false}\n  ): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n  setNeedsUpdate(reason: string): void {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Checks each viewport for transition updates */\n  updateViewStates(): void {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  /** Get a map of all views */\n  getViews(): {[viewId: string]: View} {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  /** Resolves a viewId string to a View */\n  getView(viewId: string): View | undefined {\n    return this.views.find(view => view.id === viewId);\n  }\n\n  /** Returns the viewState for a specific viewId. Matches the viewState by\n    1. view.viewStateId\n    2. view.id\n    3. root viewState\n    then applies the view's filter if any */\n  getViewState(viewOrViewId: string | View): any {\n    const view: View | undefined =\n      typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId: string): Viewport | undefined {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz: number[], opts?: {topLeft?: boolean}): number[] | null {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  /** Update the manager with new Deck props */\n  setProps(props: {views?: View[]; viewState?: any; width?: number; height?: number}) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width as number, props.height as number);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  private _update(): void {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  private _setSize(width: number, height: number): void {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  private _setViews(views: View[]): void {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  private _setViewState(viewState: any): void {\n    if (viewState) {\n      // depth = 3 when comparing viewStates: viewId.position.0\n      const viewStateChanged = !deepEqual(viewState, this.viewState, 3);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  private _onViewStateChange(viewId: string, event: ViewStateChangeParameters) {\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange({...event, viewId});\n    }\n  }\n\n  private _createController(\n    view: View,\n    props: {id: string; type: ConstructorOf<Controller<any>>}\n  ): Controller<any> {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        this.getView(view.id)?.makeViewport({\n          viewState,\n          width: this.width,\n          height: this.height\n        })\n    });\n\n    return controller;\n  }\n\n  private _updateController(\n    view: View,\n    viewState: any,\n    viewport: Viewport,\n    controller?: Controller<any> | null\n  ): Controller<any> | null {\n    const controllerProps = view.controller;\n    if (controllerProps) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (!controller) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  private _rebuildViewports(): void {\n    const {views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({viewState, width: this.width, height: this.height});\n\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap(): void {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews: View[], oldViews: View[]): boolean {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"mappings":";AAoBA,SAAQA,SAAR,QAAwB,qBAAxB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAQC,OAAR,QAAsB,kBAAtB;AAUA,eAAe,MAAMC,WAAN,CAAkB;EAmB/BC,WAAWA,CAACC,KAAD,EAWR;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAED,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,KAAL,GAAa,GAAb;IACA,KAAKC,MAAL,GAAc,GAAd;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,QAAL,GAAgBP,KAAK,CAACO,QAAtB;IAEA,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,YAAL,GAAoB,EAApB;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKC,YAAL,GAAoB,cAApB;IACA,KAAKC,YAAL,GAAoB,YAApB;IAEA,KAAKC,aAAL,GAAqBb,KAAK,CAACc,YAA3B;IACA,KAAKC,eAAL,GAAuB;MACrBC,iBAAiB,EAAEhB,KAAK,CAACgB,iBADJ;MAErBC,wBAAwB,EAAEjB,KAAK,CAACiB;IAFX,CAAvB;IAKAC,MAAM,CAACC,IAAP,CAAY,IAAZ;IAGA,KAAKC,QAAL,CAAcpB,KAAd;EACD;EAGDqB,QAAQA,CAAA,EAAS;IACf,KAAK,MAAMC,GAAX,IAAkB,KAAKhB,WAAvB,EAAoC;MAClC,MAAMiB,UAAU,GAAG,KAAKjB,WAAL,CAAiBgB,GAAjB,CAAnB;MACA,IAAIC,UAAJ,EAAgB;QACdA,UAAU,CAACF,QAAX;MACD;IACF;IACD,KAAKf,WAAL,GAAmB,EAAnB;EACD;EAGDkB,WAAWA,CAAA,EAKO;IAAA,IAJhBC,IAGC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;MAACG,gBAAgB,EAAE;IAAnB,CAJK;IAMT,MAAMC,MAAM,GAAG,KAAKnB,YAApB;IACA,IAAIc,IAAI,CAACI,gBAAT,EAA2B;MACzB,KAAKlB,YAAL,GAAoB,KAApB;IACD;IACD,OAAOmB,MAAP;EACD;EAGDC,cAAcA,CAACC,MAAD,EAAuB;IACnC,KAAKpB,YAAL,GAAoB,KAAKA,YAAL,IAAqBoB,MAAzC;IACA,KAAKrB,YAAL,GAAoB,KAAKA,YAAL,IAAqBqB,MAAzC;EACD;EAGDC,gBAAgBA,CAAA,EAAS;IACvB,KAAK,MAAMC,MAAX,IAAqB,KAAK5B,WAA1B,EAAuC;MACrC,MAAMiB,UAAU,GAAG,KAAKjB,WAAL,CAAiB4B,MAAjB,CAAnB;MACA,IAAIX,UAAJ,EAAgB;QACdA,UAAU,CAACY,gBAAX;MACD;IACF;EACF;EASDC,YAAYA,CAACC,IAAD,EAA6E;IACvF,IAAIA,IAAJ,EAAU;MACR,OAAO,KAAK7B,UAAL,CAAgB8B,MAAhB,CAAuBC,QAAQ,IAAIA,QAAQ,CAACC,aAAT,CAAuBH,IAAvB,CAAnC,CAAP;IACD;IACD,OAAO,KAAK7B,UAAZ;EACD;EAGDiC,QAAQA,CAAA,EAA6B;IACnC,MAAMC,OAAO,GAAG,EAAhB;IACA,KAAKxC,KAAL,CAAWyC,OAAX,CAAmBC,IAAI,IAAI;MACzBF,OAAO,CAACE,IAAI,CAACC,EAAN,CAAP,GAAmBD,IAAnB;IACD,CAFD;IAGA,OAAOF,OAAP;EACD;EAGDI,OAAOA,CAACZ,MAAD,EAAmC;IACxC,OAAO,KAAKhC,KAAL,CAAW6C,IAAX,CAAgBH,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYX,MAApC,CAAP;EACD;EAODc,YAAYA,CAACC,YAAD,EAAmC;IAC7C,MAAML,IAAsB,GAC1B,OAAOK,YAAP,KAAwB,QAAxB,GAAmC,KAAKH,OAAL,CAAaG,YAAb,CAAnC,GAAgEA,YADlE;IAGA,MAAM5C,SAAS,GAAIuC,IAAI,IAAI,KAAKvC,SAAL,CAAeuC,IAAI,CAACM,cAAL,EAAf,CAAT,IAAmD,KAAK7C,SAA1E;IACA,OAAOuC,IAAI,GAAGA,IAAI,CAACO,eAAL,CAAqB9C,SAArB,CAAH,GAAqCA,SAAhD;EACD;EAED+C,WAAWA,CAAClB,MAAD,EAAuC;IAChD,OAAO,KAAKzB,YAAL,CAAkByB,MAAlB,CAAP;EACD;EAYDmB,SAASA,CAACC,GAAD,EAAgB7B,IAAhB,EAA6D;IACpE,MAAM8B,SAAS,GAAG,KAAKnB,YAAL,EAAlB;IACA,MAAMoB,KAAK,GAAG;MAACC,CAAC,EAAEH,GAAG,CAAC,CAAD,CAAP;MAAYI,CAAC,EAAEJ,GAAG,CAAC,CAAD;IAAlB,CAAd;IACA,KAAK,IAAIK,CAAC,GAAGJ,SAAS,CAAC5B,MAAV,GAAmB,CAAhC,EAAmCgC,CAAC,IAAI,CAAxC,EAA2C,EAAEA,CAA7C,EAAgD;MAC9C,MAAMpB,QAAQ,GAAGgB,SAAS,CAACI,CAAD,CAA1B;MACA,IAAIpB,QAAQ,CAACC,aAAT,CAAuBgB,KAAvB,CAAJ,EAAmC;QACjC,MAAMI,CAAC,GAAGN,GAAG,CAACO,KAAJ,EAAV;QACAD,CAAC,CAAC,CAAD,CAAD,IAAQrB,QAAQ,CAACkB,CAAjB;QACAG,CAAC,CAAC,CAAD,CAAD,IAAQrB,QAAQ,CAACmB,CAAjB;QACA,OAAOnB,QAAQ,CAACc,SAAT,CAAmBO,CAAnB,EAAsBnC,IAAtB,CAAP;MACD;IACF;IACD,OAAO,IAAP;EACD;EAGDL,QAAQA,CAACpB,KAAD,EAA4E;IAClF,IAAIA,KAAK,CAACE,KAAV,EAAiB;MACf,KAAK4D,SAAL,CAAe9D,KAAK,CAACE,KAArB;IACD;IAED,IAAIF,KAAK,CAACK,SAAV,EAAqB;MACnB,KAAK0D,aAAL,CAAmB/D,KAAK,CAACK,SAAzB;IACD;IAED,IAAI,WAAWL,KAAX,IAAoB,YAAYA,KAApC,EAA2C;MACzC,KAAKgE,QAAL,CAAchE,KAAK,CAACG,KAApB,EAAqCH,KAAK,CAACI,MAA3C;IACD;IAKD,IAAI,CAAC,KAAKM,WAAV,EAAuB;MACrB,KAAKuD,OAAL;IACD;EACF;EAMOA,OAAOA,CAAA,EAAS;IACtB,KAAKvD,WAAL,GAAmB,IAAnB;IAGA,IAAI,KAAKE,YAAT,EAAuB;MACrB,KAAKA,YAAL,GAAoB,KAApB;MACA,KAAKsD,iBAAL;IACD;IAID,IAAI,KAAKtD,YAAT,EAAuB;MACrB,KAAKA,YAAL,GAAoB,KAApB;MACA,KAAKsD,iBAAL;IACD;IAED,KAAKxD,WAAL,GAAmB,KAAnB;EACD;EAEOsD,QAAQA,CAAC7D,KAAD,EAAgBC,MAAhB,EAAsC;IACpD,IAAID,KAAK,KAAK,KAAKA,KAAf,IAAwBC,MAAM,KAAK,KAAKA,MAA5C,EAAoD;MAClD,KAAKD,KAAL,GAAaA,KAAb;MACA,KAAKC,MAAL,GAAcA,MAAd;MACA,KAAK2B,cAAL,CAAoB,cAApB;IACD;EACF;EAIO+B,SAASA,CAAC5D,KAAD,EAAsB;IACrCA,KAAK,GAAGL,OAAO,CAACK,KAAD,EAAQiE,OAAR,CAAf;IAEA,MAAMC,YAAY,GAAG,KAAKC,UAAL,CAAgBnE,KAAhB,EAAuB,KAAKA,KAA5B,CAArB;IACA,IAAIkE,YAAJ,EAAkB;MAChB,KAAKrC,cAAL,CAAoB,eAApB;IACD;IAED,KAAK7B,KAAL,GAAaA,KAAb;EACD;EAEO6D,aAAaA,CAAC1D,SAAD,EAAuB;IAC1C,IAAIA,SAAJ,EAAe;MAEb,MAAMiE,gBAAgB,GAAG,CAAC3E,SAAS,CAACU,SAAD,EAAY,KAAKA,SAAjB,EAA4B,CAA5B,CAAnC;MAEA,IAAIiE,gBAAJ,EAAsB;QACpB,KAAKvC,cAAL,CAAoB,mBAApB;MACD;MAED,KAAK1B,SAAL,GAAiBA,SAAjB;IACD,CATD,MASO;MACLT,GAAG,CAAC2E,IAAJ,CAAS,2CAAT;IACD;EACF;EAEOC,kBAAkBA,CAACtC,MAAD,EAAiBuC,KAAjB,EAAmD;IAC3E,IAAI,KAAK1D,eAAL,CAAqBC,iBAAzB,EAA4C;MAC1C,KAAKD,eAAL,CAAqBC,iBAArB,CAAuC;QAAC,GAAGyD,KAAJ;QAAWvC;MAAX,CAAvC;IACD;EACF;EAEOwC,iBAAiBA,CACvB9B,IADuB,EAEvB5C,KAFuB,EAGN;IACjB,MAAM2E,UAAU,GAAG3E,KAAK,CAAC4E,IAAzB;IAEA,MAAMrD,UAAU,GAAG,IAAIoD,UAAJ,CAAe;MAChCpE,QAAQ,EAAE,KAAKA,QADiB;MAEhCO,YAAY,EAAE,KAAKD,aAFa;MAIhCG,iBAAiB,EAAE,KAAKwD,kBAAL,CAAwBK,IAAxB,CAA6B,IAA7B,EAAmC7E,KAAK,CAAC6C,EAAzC,CAJa;MAKhCiC,aAAa,EAAE,KAAK/D,eAAL,CAAqBE,wBALJ;MAMhC8D,YAAY,EAAE1E,SAAS;QAAA,IAAA2E,aAAA;QAAA,QAAAA,aAAA,GACrB,KAAKlC,OAAL,CAAaF,IAAI,CAACC,EAAlB,CADqB,cAAAmC,aAAA,uBACrBA,aAAA,CAAuBD,YAAvB,CAAoC;UAClC1E,SADkC;UAElCF,KAAK,EAAE,KAAKA,KAFsB;UAGlCC,MAAM,EAAE,KAAKA;QAHqB,CAApC,CADqB;MAAA;IANS,CAAf,CAAnB;IAcA,OAAOmB,UAAP;EACD;EAEO0D,iBAAiBA,CACvBrC,IADuB,EAEvBvC,SAFuB,EAGvBkC,QAHuB,EAIvBhB,UAJuB,EAKC;IACxB,MAAM2D,eAAe,GAAGtC,IAAI,CAACrB,UAA7B;IACA,IAAI2D,eAAJ,EAAqB;MACnB,MAAMC,aAAa,GAAG;QACpB,GAAG9E,SADiB;QAEpB,GAAG6E,eAFiB;QAGpBrC,EAAE,EAAED,IAAI,CAACC,EAHW;QAIpBY,CAAC,EAAElB,QAAQ,CAACkB,CAJQ;QAKpBC,CAAC,EAAEnB,QAAQ,CAACmB,CALQ;QAMpBvD,KAAK,EAAEoC,QAAQ,CAACpC,KANI;QAOpBC,MAAM,EAAEmC,QAAQ,CAACnC;MAPG,CAAtB;MAWA,IAAI,CAACmB,UAAL,EAAiB;QACfA,UAAU,GAAG,KAAKmD,iBAAL,CAAuB9B,IAAvB,EAA6BuC,aAA7B,CAAb;MACD;MACD,IAAI5D,UAAJ,EAAgB;QACdA,UAAU,CAACH,QAAX,CAAoB+D,aAApB;MACD;MACD,OAAO5D,UAAP;IACD;IACD,OAAO,IAAP;EACD;EAGO2C,iBAAiBA,CAAA,EAAS;IAChC,MAAM;MAAChE;IAAD,IAAU,IAAhB;IAEA,MAAMkF,cAAc,GAAG,KAAK9E,WAA5B;IACA,KAAKE,UAAL,GAAkB,EAAlB;IACA,KAAKF,WAAL,GAAmB,EAAnB;IAEA,IAAI+E,qBAAqB,GAAG,KAA5B;IAEA,KAAK,IAAI1B,CAAC,GAAGzD,KAAK,CAACyB,MAAnB,EAA2BgC,CAAC,EAA5B,GAAkC;MAChC,MAAMf,IAAI,GAAG1C,KAAK,CAACyD,CAAD,CAAlB;MACA,MAAMtD,SAAS,GAAG,KAAK2C,YAAL,CAAkBJ,IAAlB,CAAlB;MACA,MAAML,QAAQ,GAAGK,IAAI,CAACmC,YAAL,CAAkB;QAAC1E,SAAD;QAAYF,KAAK,EAAE,KAAKA,KAAxB;QAA+BC,MAAM,EAAE,KAAKA;MAA5C,CAAlB,CAAjB;MAEA,IAAIkF,aAAa,GAAGF,cAAc,CAACxC,IAAI,CAACC,EAAN,CAAlC;MACA,MAAM0C,aAAa,GAAGpB,OAAO,CAACvB,IAAI,CAACrB,UAAN,CAA7B;MACA,IAAIgE,aAAa,IAAI,CAACD,aAAtB,EAAqC;QAGnCD,qBAAqB,GAAG,IAAxB;MACD;MACD,IAAI,CAACA,qBAAqB,IAAI,CAACE,aAA3B,KAA6CD,aAAjD,EAAgE;QAE9DA,aAAa,CAACjE,QAAd;QACAiE,aAAa,GAAG,IAAhB;MACD;MAGD,KAAKhF,WAAL,CAAiBsC,IAAI,CAACC,EAAtB,IAA4B,KAAKoC,iBAAL,CAAuBrC,IAAvB,EAA6BvC,SAA7B,EAAwCkC,QAAxC,EAAkD+C,aAAlD,CAA5B;MAEA,KAAK9E,UAAL,CAAgBgF,OAAhB,CAAwBjD,QAAxB;IACD;IAGD,KAAK,MAAMM,EAAX,IAAiBuC,cAAjB,EAAiC;MAC/B,MAAME,aAAa,GAAGF,cAAc,CAACvC,EAAD,CAApC;MACA,IAAIyC,aAAa,IAAI,CAAC,KAAKhF,WAAL,CAAiBuC,EAAjB,CAAtB,EAA4C;QAC1CyC,aAAa,CAACjE,QAAd;MACD;IACF;IAED,KAAKoE,iBAAL;EACD;EAEDA,iBAAiBA,CAAA,EAAS;IAExB,KAAKhF,YAAL,GAAoB,EAApB;IACA,KAAKD,UAAL,CAAgBmC,OAAhB,CAAwBJ,QAAQ,IAAI;MAClC,IAAIA,QAAQ,CAACM,EAAb,EAAiB;QAEf,KAAKpC,YAAL,CAAkB8B,QAAQ,CAACM,EAA3B,IAAiC,KAAKpC,YAAL,CAAkB8B,QAAQ,CAACM,EAA3B,KAAkCN,QAAnE;MACD;IACF,CALD;EAMD;EAID8B,UAAUA,CAACqB,QAAD,EAAmBC,QAAnB,EAA8C;IACtD,IAAID,QAAQ,CAAC/D,MAAT,KAAoBgE,QAAQ,CAAChE,MAAjC,EAAyC;MACvC,OAAO,IAAP;IACD;IAED,OAAO+D,QAAQ,CAACE,IAAT,CAAc,CAACC,CAAD,EAAIlC,CAAJ,KAAU,CAAC+B,QAAQ,CAAC/B,CAAD,CAAR,CAAYmC,MAAZ,CAAmBH,QAAQ,CAAChC,CAAD,CAA3B,CAAzB,CAAP;EACD;AApX8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}