{"ast":null,"code":"import { log, assertWebGLContext } from '@luma.gl/gltools';\nimport Texture from './texture';\nconst FACES = [34069, 34070, 34071, 34072, 34073, 34074];\nexport default class TextureCube extends Texture {\n  get [Symbol.toStringTag]() {\n    return 'TextureCube';\n  }\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertWebGLContext(gl);\n    super(gl, Object.assign({}, props, {\n      target: 34067\n    }));\n    this.initialize(props);\n    Object.seal(this);\n  }\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      mipmaps = true,\n      parameters = {}\n    } = props;\n    this.opts = props;\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n  subImage(_ref) {\n    let {\n      face,\n      data,\n      x = 0,\n      y = 0,\n      mipmapLevel = 0\n    } = _ref;\n    return this._subImage({\n      target: face,\n      data,\n      x,\n      y,\n      mipmapLevel\n    });\n  }\n  async setCubeMapImageData(_ref2) {\n    let {\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = 6408,\n      type = 5121\n    } = _ref2;\n    const {\n      gl\n    } = this;\n    const imageDataMap = pixels || data;\n    const resolvedFaces = await Promise.all(FACES.map(face => {\n      const facePixels = imageDataMap[face];\n      return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n    }));\n    this.bind();\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        log.warn(\"\".concat(this.id, \" has mipmap and multiple LODs.\"))();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n    this.unbind();\n  }\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = 6408,\n      type = 5121\n    } = options;\n    const {\n      gl\n    } = this;\n    const imageData = pixels || data;\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData => this.setImageDataForFace(Object.assign({}, options, {\n        face,\n        data: resolvedImageData,\n        pixels: resolvedImageData\n      })));\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n    return this;\n  }\n}\nTextureCube.FACES = FACES;","map":{"version":3,"names":["log","assertWebGLContext","Texture","FACES","TextureCube","Symbol","toStringTag","constructor","gl","props","arguments","length","undefined","Object","assign","target","initialize","seal","mipmaps","parameters","opts","setCubeMapImageData","then","loaded","generateMipmap","setParameters","subImage","_ref","face","data","x","y","mipmapLevel","_subImage","_ref2","width","height","pixels","border","format","type","imageDataMap","resolvedFaces","Promise","all","map","facePixels","Array","isArray","bind","forEach","index","warn","concat","id","image","lodLevel","texImage2D","unbind","setImageDataForFace","options","imageData","resolvedImageData"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/texture-cube.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {log, assertWebGLContext} from '@luma.gl/gltools';\nimport Texture from './texture';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'TextureCube';\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    const {mipmaps = true, parameters = {}} = props;\n\n    // Store props for accessors\n    this.opts = props;\n\n    // @ts-ignore\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    // @ts-ignore TODO - is this a bug?\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}