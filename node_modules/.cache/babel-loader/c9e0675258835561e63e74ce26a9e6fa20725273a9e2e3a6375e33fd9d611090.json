{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { GridCellLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToDensityGridDataCPU } from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\nfunction nop() {}\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  gridAggregator: pointToDensityGridDataCPU,\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  extruded: false,\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      }\n    });\n  }\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances()\n      })\n    });\n  }\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      cellSize,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      cpuAggregator\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n    return new SubLayerClass({\n      cellSize,\n      coverage,\n      material,\n      elevationScale,\n      extruded,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'grid-cell',\n      updateTriggers\n    }), {\n      data: cpuAggregator.state.layerData.data\n    });\n  }\n}\n_defineProperty(CPUGridLayer, \"layerName\", 'CPUGridLayer');\n_defineProperty(CPUGridLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["_defineProperty","GridCellLayer","defaultColorRange","pointToDensityGridDataCPU","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","gridAggregator","cellSize","coverage","getPosition","x","position","extruded","material","_filterData","optional","CPUGridLayer","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","attributeManager","getAttributeManager","add","positions","size","accessor","updateState","opts","setState","viewport","context","attributes","getAttributes","numInstances","getNumInstances","getPickingInfo","_ref","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","getFillColor","bind","getElevation","getSubLayerProps","id","data","layerData"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/dist/esm/cpu-grid-layer/cpu-grid-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { GridCellLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToDensityGridDataCPU } from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  gridAggregator: pointToDensityGridDataCPU,\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  extruded: false,\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances()\n      })\n    });\n  }\n\n  getPickingInfo({\n    info\n  }) {\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      cellSize,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      cpuAggregator\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass({\n      cellSize,\n      coverage,\n      material,\n      elevationScale,\n      extruded,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'grid-cell',\n      updateTriggers\n    }), {\n      data: cpuAggregator.state.layerData.data\n    });\n  }\n\n}\n\n_defineProperty(CPUGridLayer, \"layerName\", 'CPUGridLayer');\n\n_defineProperty(CPUGridLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=cpu-grid-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}