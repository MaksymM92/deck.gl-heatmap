{"ast":null,"code":"import { COORDINATE_SYSTEM } from '../../lib/constants';\nimport { getOffsetOrigin } from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { addMetersToLngLat } from '@math.gl/web-mercator';\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  let offsetMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const p = viewport.projectPosition(lngLatZ);\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\nfunction normalizeParameters(opts) {\n  const {\n    viewport,\n    modelMatrix,\n    coordinateOrigin\n  } = opts;\n  let {\n    coordinateSystem,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = opts;\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n  }\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n  return {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  };\n}\nexport function getWorldPosition(position, _ref) {\n  let {\n    viewport,\n    modelMatrix,\n    coordinateSystem,\n    coordinateOrigin,\n    offsetMode\n  } = _ref;\n  let [x, y, z = 0] = position;\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]] : viewport.projectPosition([x, y, z]);\n  }\n}\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n  const {\n    autoOffset = true\n  } = params;\n  const {\n    geospatialOrigin = DEFAULT_COORDINATE_ORIGIN,\n    shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN,\n    offsetMode = false\n  } = autoOffset ? getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin) : {};\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n  return worldPosition;\n}","map":{"version":3,"names":["COORDINATE_SYSTEM","getOffsetOrigin","WebMercatorViewport","vec4","vec3","addMetersToLngLat","DEFAULT_COORDINATE_ORIGIN","lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","arguments","length","undefined","p","projectPosition","longitude","latitude","z","distanceScales","getDistanceScales","unitsPerMeter","normalizeParameters","opts","modelMatrix","coordinateOrigin","coordinateSystem","fromCoordinateSystem","fromCoordinateOrigin","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","getWorldPosition","position","_ref","x","y","transformMat4","LNGLAT_OFFSETS","METER_OFFSETS","params","autoOffset","geospatialOrigin","shaderCoordinateOrigin","worldPosition","positionCommonSpace","sub"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/shaderlib/project/project-functions.ts"],"sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\nimport type {CoordinateSystem} from '../../lib/constants';\nimport type Viewport from '../../viewports/viewport';\nimport type {NumericArray} from '../../types/types';\n\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(\n  lngLatZ: [number, number, number],\n  viewport: Viewport,\n  offsetMode: boolean = false\n): [number, number, number] {\n  const p = viewport.projectPosition(lngLatZ);\n\n  // TODO - avoid using instanceof\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\n\nfunction normalizeParameters(opts: {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem?: CoordinateSystem;\n  fromCoordinateOrigin?: [number, number, number];\n}): {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem: CoordinateSystem;\n  fromCoordinateOrigin: [number, number, number];\n} {\n  const {viewport, modelMatrix, coordinateOrigin} = opts;\n  let {coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  return {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  };\n}\n\n/** Get the common space position from world coordinates in the given coordinate system */\nexport function getWorldPosition(\n  position: number[],\n  {\n    viewport,\n    modelMatrix,\n    coordinateSystem,\n    coordinateOrigin,\n    offsetMode\n  }: {\n    viewport: Viewport;\n    modelMatrix?: NumericArray | null;\n    coordinateSystem: CoordinateSystem;\n    coordinateOrigin: [number, number, number];\n    offsetMode?: boolean;\n  }\n): [number, number, number] {\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]) as [number, number, number],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial\n        ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n        : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n */\nexport function projectPosition(\n  position: number[],\n  params: {\n    /** The current viewport */\n    viewport: Viewport;\n    /** The reference coordinate system used to align world position */\n    coordinateSystem: CoordinateSystem;\n    /** The reference coordinate origin used to align world position */\n    coordinateOrigin: [number, number, number];\n    /** The model matrix of the supplied position */\n    modelMatrix?: NumericArray | null;\n    /** The coordinate system that the supplied position is in. Default to the same as `coordinateSystem`. */\n    fromCoordinateSystem?: CoordinateSystem;\n    /** The coordinate origin that the supplied position is in. Default to the same as `coordinateOrigin`. */\n    fromCoordinateOrigin?: [number, number, number];\n    /** Whether to apply offset mode automatically as does the project shader module.\n     * Offset mode places the origin of the common space at the given viewport's center. It is used in some use cases\n     * to improve precision in the vertex shader due to the fp32 float limitation.\n     * Use `autoOffset:false` if the returned position should not be dependent on the current viewport.\n     * Default `true` */\n    autoOffset?: boolean;\n  }\n): [number, number, number] {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n  const {autoOffset = true} = params;\n\n  const {\n    geospatialOrigin = DEFAULT_COORDINATE_ORIGIN,\n    shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN,\n    offsetMode = false\n  } = autoOffset ? getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin) : {};\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}