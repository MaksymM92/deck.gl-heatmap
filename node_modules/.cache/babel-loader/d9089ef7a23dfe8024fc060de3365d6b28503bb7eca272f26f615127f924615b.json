{"ast":null,"code":"import { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  const {\n    data,\n    radius\n  } = props;\n  const {\n    viewport,\n    attributes\n  } = aggregationParams;\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  const screenPoints = [];\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n  const newHexbin = hexbin().radius(radiusCommon).x(d => d.screenCoord[0]).y(d => d.screenCoord[1]);\n  const hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  const {\n    attributes\n  } = aggregationParams;\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {\n    unitsPerMeter\n  } = viewport.getDistanceScales(center);\n  return radius * unitsPerMeter[0];\n}","map":{"version":3,"names":["hexbin","createIterable","log","pointToHexbin","props","aggregationParams","data","radius","viewport","attributes","centerLngLat","length","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","iterable","objectInfo","positions","value","size","getAccessor","object","index","posIndex","position","arrayIsFinite","Number","isFinite","push","screenCoord","projectFlat","source","warn","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","unprojectFlat","points","minX","Infinity","minY","maxX","maxY","i","Math","min","max","every","center","unitsPerMeter","getDistanceScales"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/hexagon-layer/hexagon-aggregator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}