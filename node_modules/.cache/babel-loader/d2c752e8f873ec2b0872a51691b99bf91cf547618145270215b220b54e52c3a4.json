{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: x => x.sourcePosition\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: x => x.targetPosition\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nexport default class LineLayer extends Layer {\n  getBounds() {\n    var _this$getAttributeMan;\n    return (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 ? void 0 : _this$getAttributeMan.getBounds(['instanceSourcePositions', 'instanceTargetPositions']);\n  }\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n  get wrapLongitude() {\n    return false;\n  }\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    if (params.changeFlags.extensionsChanged) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      wrapLongitude\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      useShortestPath: wrapLongitude ? 1 : 0\n    }).draw();\n    if (wrapLongitude) {\n      this.state.model.setUniforms({\n        useShortestPath: -1\n      }).draw();\n    }\n  }\n  _getModel(gl) {\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 5,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n_defineProperty(LineLayer, \"layerName\", 'LineLayer');\n_defineProperty(LineLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["_defineProperty","Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getColor","getWidth","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","LineLayer","getBounds","_this$getAttributeMan","getAttributeManager","getShaders","modules","wrapLongitude","initializeState","attributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceWidths","updateState","params","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","_ref","uniforms","setUniforms","useShortestPath","positions","id","geometry","drawMode","attributes","Float32Array","isInstanced"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/dist/esm/line-layer/line-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: x => x.sourcePosition\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: x => x.targetPosition\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nexport default class LineLayer extends Layer {\n  getBounds() {\n    var _this$getAttributeMan;\n\n    return (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 ? void 0 : _this$getAttributeMan.getBounds(['instanceSourcePositions', 'instanceTargetPositions']);\n  }\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      wrapLongitude\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      useShortestPath: wrapLongitude ? 1 : 0\n    }).draw();\n\n    if (wrapLongitude) {\n      this.state.model.setUniforms({\n        useShortestPath: -1\n      }).draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 5,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\n\n_defineProperty(LineLayer, \"layerName\", 'LineLayer');\n\n_defineProperty(LineLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=line-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}