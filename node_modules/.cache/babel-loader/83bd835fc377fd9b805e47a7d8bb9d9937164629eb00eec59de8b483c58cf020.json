{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isArray } from '@math.gl/core';\nimport { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from './polygon-utils';\nexport default class Polygon {\n  constructor(points) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _defineProperty(this, \"points\", void 0);\n    _defineProperty(this, \"isFlatArray\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n    Object.freeze(this);\n  }\n  getSignedArea() {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n    return getPolygonSignedAreaPoints(this.points, this.options);\n  }\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n  forEachSegment(visitor) {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(this.points, (x1, y1, x2, y2, i1, i2) => {\n        visitor([x1, y1], [x2, y2], i1, i2);\n      }, this.options);\n    } else {\n      forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n    }\n  }\n  modifyWindingDirection(direction) {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n  }\n}","map":{"version":3,"names":["isArray","getPolygonSignedArea","forEachSegmentInPolygon","modifyPolygonWindingDirection","getPolygonSignedAreaPoints","forEachSegmentInPolygonPoints","modifyPolygonWindingDirectionPoints","Polygon","constructor","points","options","arguments","length","undefined","_defineProperty","isFlatArray","start","end","size","isClosed","Object","freeze","getSignedArea","getArea","Math","abs","getWindingDirection","sign","forEachSegment","visitor","x1","y1","x2","y2","i1","i2","modifyWindingDirection","direction"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/polygon/src/polygon.ts"],"sourcesContent":["/* eslint-disable no-undef, no-console */\nimport {isArray} from '@math.gl/core';\nimport type {SegmentVisitorPoints} from './polygon-utils';\nimport type {NumericArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport type PolygonOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\nexport default class Polygon {\n  points: NumericArray | number[][];\n  isFlatArray: boolean;\n  options: PolygonOptions;\n\n  constructor(points: NumericArray | number[][], options: PolygonOptions = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns signed area of the polygon.\n   * @returns Signed area of the polygon.\n   */\n  getSignedArea(): number {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points as NumericArray, this.options);\n\n    return getPolygonSignedAreaPoints(this.points as number[][], this.options);\n  }\n\n  /**\n   * Returns absolute area of the polygon.\n   * @returns Absolute area of the polygon.\n   */\n  getArea(): number {\n    return Math.abs(this.getSignedArea());\n  }\n\n  /**\n   * Returns winding direction of the polygon.\n   * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n   */\n  getWindingDirection(): number {\n    return Math.sign(this.getSignedArea());\n  }\n\n  /**\n   * Calls the visitor callback for each segment in the polygon.\n   * @param visitor A callback to call for each segment.\n   */\n  forEachSegment(visitor: SegmentVisitorPoints): void {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points as NumericArray,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points as number[][], visitor, this.options);\n    }\n  }\n\n  /**\n   * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n   * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n   * @return Returns true if the winding direction was changed.\n   */\n  modifyWindingDirection(direction: number): boolean {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points as NumericArray, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points as number[][], direction, this.options);\n  }\n}\n"],"mappings":";AACA,SAAQA,OAAR,QAAsB,eAAtB;AAIA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,6BAHF,EAIEC,0BAJF,EAKEC,6BALF,EAMEC,mCANF,QAOO,iBAPP;AAgBA,eAAe,MAAMC,OAAN,CAAc;EAK3BC,WAAWA,CAACC,MAAD,EAAkE;IAAA,IAA9BC,OAAuB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAA9D;IAAkEG,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAC3E,KAAKL,MAAL,GAAcA,MAAd;IACA,KAAKM,WAAL,GAAmB,CAACf,OAAO,CAACS,MAAM,CAAC,CAAD,CAAP,CAA3B;IAEA,KAAKC,OAAL,GAAe;MACbM,KAAK,EAAEN,OAAO,CAACM,KAAR,IAAiB,CADX;MAEbC,GAAG,EAAEP,OAAO,CAACO,GAAR,IAAeR,MAAM,CAACG,MAFd;MAGbM,IAAI,EAAER,OAAO,CAACQ,IAAR,IAAgB,CAHT;MAIbC,QAAQ,EAAET,OAAO,CAACS;IAJL,CAAf;IAOAC,MAAM,CAACC,MAAP,CAAc,IAAd;EACD;EAMDC,aAAaA,CAAA,EAAW;IACtB,IAAI,KAAKP,WAAT,EAAsB,OAAOd,oBAAoB,CAAC,KAAKQ,MAAN,EAA8B,KAAKC,OAAnC,CAA3B;IAEtB,OAAON,0BAA0B,CAAC,KAAKK,MAAN,EAA4B,KAAKC,OAAjC,CAAjC;EACD;EAMDa,OAAOA,CAAA,EAAW;IAChB,OAAOC,IAAI,CAACC,GAAL,CAAS,KAAKH,aAAL,EAAT,CAAP;EACD;EAMDI,mBAAmBA,CAAA,EAAW;IAC5B,OAAOF,IAAI,CAACG,IAAL,CAAU,KAAKL,aAAL,EAAV,CAAP;EACD;EAMDM,cAAcA,CAACC,OAAD,EAAsC;IAClD,IAAI,KAAKd,WAAT,EAAsB;MACpBb,uBAAuB,CACrB,KAAKO,MADgB,EAGrB,CAACqB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,KAA4B;QAE1BN,OAAO,CAAC,CAACC,EAAD,EAAKC,EAAL,CAAD,EAAW,CAACC,EAAD,EAAKC,EAAL,CAAX,EAAqBC,EAArB,EAAyBC,EAAzB,CAAP;MACD,CANoB,EAOrB,KAAKzB,OAPgB,CAAvB;IASD,CAVD,MAUO;MACLL,6BAA6B,CAAC,KAAKI,MAAN,EAA4BoB,OAA5B,EAAqC,KAAKnB,OAA1C,CAA7B;IACD;EACF;EAOD0B,sBAAsBA,CAACC,SAAD,EAA6B;IACjD,IAAI,KAAKtB,WAAT,EAAsB;MACpB,OAAOZ,6BAA6B,CAAC,KAAKM,MAAN,EAA8B4B,SAA9B,EAAyC,KAAK3B,OAA9C,CAApC;IACD;IACD,OAAOJ,mCAAmC,CAAC,KAAKG,MAAN,EAA4B4B,SAA5B,EAAuC,KAAK3B,OAA5C,CAA1C;EACD;AA3E0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}