{"ast":null,"code":"import Geometry from '../geometry/geometry';\nimport { unpackIndexedGeometry } from '../geometry/geometry-utils';\nimport { uid } from '@luma.gl/webgl';\nexport default class PlaneGeometry extends Geometry {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('plane-geometry')\n    } = props;\n    const {\n      indices,\n      attributes\n    } = tesselatePlane(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {\n        ...attributes,\n        ...props.attributes\n      }\n    });\n  }\n}\nfunction tesselatePlane(props) {\n  const {\n    type = 'x,y',\n    offset = 0,\n    flipCull = false,\n    unpack = false\n  } = props;\n  const coords = type.split(',');\n  let c1len = props[\"\".concat(coords[0], \"len\")] || 1;\n  const c2len = props[\"\".concat(coords[1], \"len\")] || 1;\n  const subdivisions1 = props[\"n\".concat(coords[0])] || 1;\n  const subdivisions2 = props[\"n\".concat(coords[1])] || 1;\n  const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n  if (flipCull) {\n    c1len = -c1len;\n  }\n  let i2 = 0;\n  let i3 = 0;\n  for (let z = 0; z <= subdivisions2; z++) {\n    for (let x = 0; x <= subdivisions1; x++) {\n      const u = x / subdivisions1;\n      const v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n  const numVertsAcross = subdivisions1 + 1;\n  const indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n  for (let z = 0; z < subdivisions2; z++) {\n    for (let x = 0; x < subdivisions1; x++) {\n      const index = (z * subdivisions1 + x) * 6;\n      indices[index + 0] = (z + 0) * numVertsAcross + x;\n      indices[index + 1] = (z + 1) * numVertsAcross + x;\n      indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n      indices[index + 3] = (z + 1) * numVertsAcross + x;\n      indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n      indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n    }\n  }\n  const geometry = {\n    indices: {\n      size: 1,\n      value: indices\n    },\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: texCoords\n      }\n    }\n  };\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}","map":{"version":3,"names":["Geometry","unpackIndexedGeometry","uid","PlaneGeometry","constructor","props","arguments","length","undefined","id","indices","attributes","tesselatePlane","type","offset","flipCull","unpack","coords","split","c1len","concat","c2len","subdivisions1","subdivisions2","numVertices","positions","Float32Array","normals","texCoords","i2","i3","z","x","u","v","Error","numVertsAcross","Uint16Array","index","geometry","size","value","POSITION","NORMAL","TEXCOORD_0"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/engine/src/geometries/plane-geometry.js"],"sourcesContent":["import Geometry from '../geometry/geometry';\nimport {unpackIndexedGeometry} from '../geometry/geometry-utils';\nimport {uid} from '@luma.gl/webgl';\n\nexport default class PlaneGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('plane-geometry')} = props;\n\n    const {indices, attributes} = tesselatePlane(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\n/* eslint-disable complexity, max-statements */\nfunction tesselatePlane(props) {\n  const {type = 'x,y', offset = 0, flipCull = false, unpack = false} = props;\n\n  const coords = type.split(',');\n  // width, height\n  let c1len = props[`${coords[0]}len`] || 1;\n  const c2len = props[`${coords[1]}len`] || 1;\n  // subdivisionsWidth, subdivisionsDepth\n  const subdivisions1 = props[`n${coords[0]}`] || 1;\n  const subdivisions2 = props[`n${coords[1]}`] || 1;\n  const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  let i2 = 0;\n  let i3 = 0;\n  for (let z = 0; z <= subdivisions2; z++) {\n    for (let x = 0; x <= subdivisions1; x++) {\n      const u = x / subdivisions1;\n      const v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  const numVertsAcross = subdivisions1 + 1;\n  const indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (let z = 0; z < subdivisions2; z++) {\n    for (let x = 0; x < subdivisions1; x++) {\n      const index = (z * subdivisions1 + x) * 6;\n      // Make triangle 1 of quad.\n      indices[index + 0] = (z + 0) * numVertsAcross + x;\n      indices[index + 1] = (z + 1) * numVertsAcross + x;\n      indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n\n      // Make triangle 2 of quad.\n      indices[index + 3] = (z + 1) * numVertsAcross + x;\n      indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n      indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n    }\n  }\n\n  const geometry = {\n    indices: {size: 1, value: indices},\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n\n  // Optionally, unpack indexed geometry\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}