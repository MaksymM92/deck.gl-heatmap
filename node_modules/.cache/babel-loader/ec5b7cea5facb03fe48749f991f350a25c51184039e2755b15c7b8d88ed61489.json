{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport { Geometry, uid } from '@luma.gl/core';\nimport { modifyPolygonWindingDirection, WINDING } from '@math.gl/polygon';\nexport default class ColumnGeometry extends Geometry {\n  constructor(props) {\n    const {\n      id = uid('column-geometry')\n    } = props;\n    const {\n      indices,\n      attributes\n    } = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\nfunction tesselateColumn(props) {\n  const {\n    radius,\n    height = 1,\n    nradial = 10\n  } = props;\n  let {\n    vertices\n  } = props;\n  if (vertices) {\n    log.assert(vertices.length >= nradial);\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1;\n  const numVertices = isExtruded ? vertsAroundEdge * 3 + 1 : nradial;\n  const stepAngle = Math.PI * 2 / nradial;\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0);\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  let i = 0;\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n        i += 3;\n      }\n    }\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - j % 2);\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n    normals[i + 2] = 1;\n    i += 3;\n  }\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n  return {\n    indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      }\n    }\n  };\n}","map":{"version":3,"names":["log","Geometry","uid","modifyPolygonWindingDirection","WINDING","ColumnGeometry","constructor","props","id","indices","attributes","tesselateColumn","radius","height","nradial","vertices","assert","length","flatMap","v","COUNTER_CLOCKWISE","isExtruded","vertsAroundEdge","numVertices","stepAngle","Math","PI","Uint16Array","positions","Float32Array","normals","i","j","a","vertexIndex","sin","cos","k","floor","sign","index","POSITION","size","value","NORMAL"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/column-layer/column-geometry.ts"],"sourcesContent":["import {log, BinaryAttribute} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\ntype ColumnGeometryProps = {\n  id?: string;\n  radius: number;\n  height?: number;\n  nradial?: number;\n  vertices?: number[];\n};\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props: ColumnGeometryProps) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props: ColumnGeometryProps): {\n  indices: Uint16Array;\n  attributes: Record<string, BinaryAttribute>;\n} {\n  const {radius, height = 1, nradial = 10} = props;\n  let {vertices} = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = isExtruded\n    ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex\n    : nradial; // top\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n\n        i += 3;\n      }\n    }\n\n    // duplicate the last vertex to create proper degenerate triangle.\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  // The column geometry is rendered as a triangle strip, so\n  // in order to render sides and top in one go we need to use degenerate triangles.\n  // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      // top loop\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      // side vertical\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      // bottom loop\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}