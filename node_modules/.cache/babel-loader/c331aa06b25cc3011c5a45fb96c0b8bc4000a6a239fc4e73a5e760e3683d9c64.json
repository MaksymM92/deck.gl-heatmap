{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  _full3d: false,\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class SolidPolygonLayer extends Layer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n  get wrapLongitude() {\n    return false;\n  }\n  initializeState() {\n    const {\n      gl,\n      viewport\n    } = this.context;\n    let {\n      coordinateSystem\n    } = this.props;\n    const {\n      _full3d\n    } = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n    let preproject;\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n      if (_full3d) {\n        preproject = viewport.projectPosition.bind(viewport);\n      } else {\n        preproject = viewport.projectFlat.bind(viewport);\n      }\n    }\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        preproject,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    attributeManager.remove(['instancePickingColors']);\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: 5121,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n        },\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n  }\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      extruded,\n      filled,\n      wireframe,\n      elevationScale\n    } = this.props;\n    const {\n      topModel,\n      sideModel,\n      polygonTesselator\n    } = this.state;\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(3);\n        sideModel.setUniforms({\n          isWireframe: true\n        }).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(6);\n        sideModel.setUniforms({\n          isWireframe: false\n        }).draw();\n      }\n    }\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    this.updateGeometry(updateParams);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateParams;\n    const attributeManager = this.getAttributeManager();\n    const regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n    if (regenerateModels) {\n      var _this$state$models;\n      (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(model => model.delete());\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n  updateGeometry(_ref3) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref3;\n    const geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n    if (geometryConfigChanged) {\n      const {\n        polygonTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged,\n        full3d: props._full3d\n      });\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n  _getModels(gl) {\n    const {\n      id,\n      filled,\n      extruded\n    } = this.props;\n    let topModel;\n    let sideModel;\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n      topModel = new Model(gl, {\n        ...shaders,\n        id: \"\".concat(id, \"-top\"),\n        drawMode: 4,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: \"\".concat(id, \"-side\"),\n        geometry: new Geometry({\n          drawMode: 1,\n          vertexCount: 4,\n          attributes: {\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n      sideModel.userData.excludeAttributes = {\n        indices: true\n      };\n    }\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n  calculateIndices(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n  calculatePositions(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n_defineProperty(SolidPolygonLayer, \"defaultProps\", defaultProps);\n_defineProperty(SolidPolygonLayer, \"layerName\", 'SolidPolygonLayer');","map":{"version":3,"names":["_defineProperty","Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","_full3d","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","constructor","arguments","getShaders","vs","defines","RING_WINDING_ORDER_CW","props","modules","wrapLongitude","initializeState","gl","viewport","context","coordinateSystem","isGeospatial","DEFAULT","LNGLAT","preproject","projectPosition","bind","projectFlat","setState","numInstances","polygonTesselator","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","_ref","index","target","encodePickingColor","__source","instancePickingColors","getPickingInfo","params","info","data","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","_ref2","uniforms","topModel","sideModel","state","renderUniforms","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","_this$state$models","models","forEach","model","delete","_getModels","invalidateAll","_ref3","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","resolution","full3d","startIndices","vertexStarts","id","shaders","NON_INSTANCED_MODEL","concat","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/dist/esm/solid-polygon-layer/solid-polygon-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  _full3d: false,\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class SolidPolygonLayer extends Layer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {\n      gl,\n      viewport\n    } = this.context;\n    let {\n      coordinateSystem\n    } = this.props;\n    const {\n      _full3d\n    } = this.props;\n\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    let preproject;\n\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n      if (_full3d) {\n        preproject = viewport.projectPosition.bind(viewport);\n      } else {\n        preproject = viewport.projectFlat.bind(viewport);\n      }\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        preproject,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    attributeManager.remove(['instancePickingColors']);\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: 5121,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, {\n          index,\n          target: value\n        }) => this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      extruded,\n      filled,\n      wireframe,\n      elevationScale\n    } = this.props;\n    const {\n      topModel,\n      sideModel,\n      polygonTesselator\n    } = this.state;\n    const renderUniforms = { ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n\n      if (wireframe) {\n        sideModel.setDrawMode(3);\n        sideModel.setUniforms({\n          isWireframe: true\n        }).draw();\n      }\n\n      if (filled) {\n        sideModel.setDrawMode(6);\n        sideModel.setUniforms({\n          isWireframe: false\n        }).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    this.updateGeometry(updateParams);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateParams;\n    const attributeManager = this.getAttributeManager();\n    const regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      var _this$state$models;\n\n      (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(model => model.delete());\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({\n    props,\n    oldProps,\n    changeFlags\n  }) {\n    const geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n    if (geometryConfigChanged) {\n      const {\n        polygonTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged,\n        full3d: props._full3d\n      });\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {\n      id,\n      filled,\n      extruded\n    } = this.props;\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n      topModel = new Model(gl, { ...shaders,\n        id: \"\".concat(id, \"-top\"),\n        drawMode: 4,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n\n    if (extruded) {\n      sideModel = new Model(gl, { ...this.getShaders('side'),\n        id: \"\".concat(id, \"-side\"),\n        geometry: new Geometry({\n          drawMode: 1,\n          vertexCount: 4,\n          attributes: {\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n      sideModel.userData.excludeAttributes = {\n        indices: true\n      };\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n\n}\n\n_defineProperty(SolidPolygonLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(SolidPolygonLayer, \"layerName\", 'SolidPolygonLayer');\n//# sourceMappingURL=solid-polygon-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}