{"ast":null,"code":"import { isWebGL2, assertWebGL2Context, withParameters } from '@luma.gl/gltools';\nimport Texture from './texture';\nimport { DATA_FORMAT_CHANNELS, TYPE_SIZES } from './texture-formats';\nimport Buffer from './buffer';\nexport default class Texture3D extends Texture {\n  get [Symbol.toStringTag]() {\n    return 'Texture3D';\n  }\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertWebGL2Context(gl);\n    props = Object.assign({\n      depth: 1\n    }, props, {\n      target: 32879,\n      unpackFlipY: false\n    });\n    super(gl, props);\n    this.initialize(props);\n    Object.seal(this);\n  }\n  setImageData(_ref) {\n    let {\n      level = 0,\n      dataFormat = 6408,\n      width,\n      height,\n      depth = 1,\n      border = 0,\n      format,\n      type = 5121,\n      offset = 0,\n      data,\n      parameters = {}\n    } = _ref;\n    this._trackDeallocatedMemory('Texture');\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, border, format, type, data);\n      }\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(35052, data.handle);\n        this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, border, format, type, offset);\n      }\n    });\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n      this._trackAllocatedMemory(this.width * this.height * this.depth * channels * channelSize, 'Texture');\n    }\n    this.loaded = true;\n    return this;\n  }\n}","map":{"version":3,"names":["isWebGL2","assertWebGL2Context","withParameters","Texture","DATA_FORMAT_CHANNELS","TYPE_SIZES","Buffer","Texture3D","Symbol","toStringTag","isSupported","gl","constructor","props","arguments","length","undefined","Object","assign","depth","target","unpackFlipY","initialize","seal","setImageData","_ref","level","dataFormat","width","height","border","format","type","offset","data","parameters","_trackDeallocatedMemory","bindTexture","handle","ArrayBuffer","isView","texImage3D","bindBuffer","byteLength","_trackAllocatedMemory","channels","channelSize","loaded"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/texture-3d.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters} from '@luma.gl/gltools';\nimport Texture from './texture';\nimport {DATA_FORMAT_CHANNELS, TYPE_SIZES} from './texture-formats';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Texture3D';\n  }\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    props = Object.assign({depth: 1}, props, {target: GL.TEXTURE_3D, unpackFlipY: false});\n    super(gl, props);\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImageData({\n    level = 0,\n    dataFormat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    data,\n    parameters = {}\n  }) {\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        // @ts-ignore\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          data\n        );\n      }\n\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        // @ts-ignore\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      // @ts-ignore\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      // @ts-ignore\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(\n        this.width * this.height * this.depth * channels * channelSize,\n        'Texture'\n      );\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n}\n"],"mappings":"AACA,SAAQA,QAAR,EAAkBC,mBAAlB,EAAuCC,cAAvC,QAA4D,kBAA5D;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,oBAAR,EAA8BC,UAA9B,QAA+C,mBAA/C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,MAAMC,SAAN,SAAwBJ,OAAxB,CAAgC;EAEtB,KAAlBK,MAAM,CAACC,WAAW,IAAI;IACzB,OAAO,WAAP;EACD;EAEiB,OAAXC,WAAWA,CAACC,EAAD,EAAK;IACrB,OAAOX,QAAQ,CAACW,EAAD,CAAf;EACD;EAEDC,WAAWA,CAACD,EAAD,EAAiB;IAAA,IAAZE,KAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAC1Bb,mBAAmB,CAACU,EAAD,CAAnB;IACAE,KAAK,GAAGI,MAAM,CAACC,MAAP,CAAc;MAACC,KAAK,EAAE;IAAR,CAAd,EAA0BN,KAA1B,EAAiC;MAACO,MAAM,OAAP;MAAwBC,WAAW,EAAE;IAArC,CAAjC,CAAR;IACA,MAAMV,EAAN,EAAUE,KAAV;IACA,KAAKS,UAAL,CAAgBT,KAAhB;IAEAI,MAAM,CAACM,IAAP,CAAY,IAAZ;EACD;EAGDC,YAAYA,CAAAC,IAAA,EAYT;IAAA,IAZU;MACXC,KAAK,GAAG,CADG;MAEXC,UAAU,OAFC;MAGXC,KAHW;MAIXC,MAJW;MAKXV,KAAK,GAAG,CALG;MAMXW,MAAM,GAAG,CANE;MAOXC,MAPW;MAQXC,IAAI,OARO;MASXC,MAAM,GAAG,CATE;MAUXC,IAVW;MAWXC,UAAU,GAAG;IAXF,CAYV,GAAAV,IAAA;IACD,KAAKW,uBAAL,CAA6B,SAA7B;IAEA,KAAKzB,EAAL,CAAQ0B,WAAR,CAAoB,KAAKjB,MAAzB,EAAiC,KAAKkB,MAAtC;IAEApC,cAAc,CAAC,KAAKS,EAAN,EAAUwB,UAAV,EAAsB,MAAM;MACxC,IAAII,WAAW,CAACC,MAAZ,CAAmBN,IAAnB,CAAJ,EAA8B;QAE5B,KAAKvB,EAAL,CAAQ8B,UAAR,CACE,KAAKrB,MADP,EAEEM,KAFF,EAGEC,UAHF,EAIEC,KAJF,EAKEC,MALF,EAMEV,KANF,EAOEW,MAPF,EAQEC,MARF,EASEC,IATF,EAUEE,IAVF;MAYD;MAED,IAAIA,IAAI,YAAY5B,MAApB,EAA4B;QAC1B,KAAKK,EAAL,CAAQ+B,UAAR,QAA2CR,IAAI,CAACI,MAAhD;QAEA,KAAK3B,EAAL,CAAQ8B,UAAR,CACE,KAAKrB,MADP,EAEEM,KAFF,EAGEC,UAHF,EAIEC,KAJF,EAKEC,MALF,EAMEV,KANF,EAOEW,MAPF,EAQEC,MARF,EASEC,IATF,EAUEC,MAVF;MAYD;IACF,CAjCa,CAAd;IAmCA,IAAIC,IAAI,IAAIA,IAAI,CAACS,UAAjB,EAA6B;MAC3B,KAAKC,qBAAL,CAA2BV,IAAI,CAACS,UAAhC,EAA4C,SAA5C;IACD,CAFD,MAEO;MAGL,MAAME,QAAQ,GAAGzC,oBAAoB,CAAC,KAAKuB,UAAN,CAApB,IAAyC,CAA1D;MAEA,MAAMmB,WAAW,GAAGzC,UAAU,CAAC,KAAK2B,IAAN,CAAV,IAAyB,CAA7C;MAEA,KAAKY,qBAAL,CACE,KAAKhB,KAAL,GAAa,KAAKC,MAAlB,GAA2B,KAAKV,KAAhC,GAAwC0B,QAAxC,GAAmDC,WADrD,EAEE,SAFF;IAID;IAED,KAAKC,MAAL,GAAc,IAAd;IAEA,OAAO,IAAP;EACD;AA1F4C"},"metadata":{},"sourceType":"module","externalDependencies":[]}