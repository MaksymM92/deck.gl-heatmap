{"ast":null,"code":"function _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    var instance = Reflect.construct(cls, Array.from(arguments));\n    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n    return instance;\n  }\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n  return ExtendableBuiltin;\n}\nimport { config, formatValue, equals, isArray } from '../../lib/common';\nexport default class MathArray extends _extendableBuiltin(Array) {\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n  toArray() {\n    let targetArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      targetArray[offset + i] = this[i];\n    }\n    return targetArray;\n  }\n  from(arrayOrObject) {\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n  to(arrayOrObject) {\n    if (arrayOrObject === this) {\n      return this;\n    }\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n  toTarget(target) {\n    return target ? this.to(target) : this;\n  }\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n  toString() {\n    return this.formatString(config);\n  }\n  formatString(opts) {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n  }\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  negate() {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n  lerp(a, b, t) {\n    if (t === undefined) {\n      return this.lerp(this, a, b);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n    return this.check();\n  }\n  min(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n  max(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n  clamp(minVector, maxVector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n  add() {\n    for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n      vectors[_key] = arguments[_key];\n    }\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n  subtract() {\n    for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      vectors[_key2] = arguments[_key2];\n    }\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n  scale(scale) {\n    if (typeof scale === 'number') {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scale;\n      }\n    } else {\n      for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {\n        this[i] *= scale[i];\n      }\n    }\n    return this.check();\n  }\n  multiplyByScalar(scalar) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n  check() {\n    if (config.debug && !this.validate()) {\n      throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n    }\n    return this;\n  }\n  validate() {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n  sub(a) {\n    return this.subtract(a);\n  }\n  setScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n  addScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n  subScalar(a) {\n    return this.addScalar(-a);\n  }\n  multiplyScalar(scalar) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n  divideScalar(a) {\n    return this.multiplyByScalar(1 / a);\n  }\n  clampScalar(min, max) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n  get elements() {\n    return this;\n  }\n}","map":{"version":3,"names":["config","formatValue","equals","isArray","MathArray","_extendableBuiltin","Array","clone","constructor","copy","fromArray","array","offset","arguments","length","undefined","i","ELEMENTS","check","toArray","targetArray","from","arrayOrObject","fromObject","to","toObject","toTarget","target","toFloat32Array","Float32Array","toString","formatString","opts","string","concat","printTypes","name","exactEquals","negate","lerp","a","b","t","ai","min","vector","Math","max","clamp","minVector","maxVector","add","_len","vectors","_key","subtract","_len2","_key2","scale","multiplyByScalar","scalar","debug","validate","Error","valid","Number","isFinite","sub","setScalar","addScalar","subScalar","multiplyScalar","divideScalar","clampScalar","elements"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/core/src/classes/base/math-array.ts"],"sourcesContent":["// math.gl, MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {ConfigurationOptions, config, formatValue, equals, isArray} from '../../lib/common';\n\n/** Base class for vectors and matrices */\nexport default abstract class MathArray extends Array<number> {\n  /** Number of elements (values) in this array */\n  abstract get ELEMENTS(): number;\n\n  abstract copy(vector: Readonly<NumericArray>): this;\n\n  abstract fromObject(object: object): this;\n\n  // Common methods\n\n  /**\n   * Clone the current object\n   * @returns a new copy of this object\n   */\n  clone(): this {\n    // @ts-expect-error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return new this.constructor().copy(this); // eslint-disable-line\n  }\n\n  fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n\n  toArray<TypedArray>(targetArray: TypedArray, offset?: number): TypedArray;\n  toArray(targetArray?: number[], offset?: number): NumericArray;\n\n  toArray(targetArray: NumericArray = [], offset: number = 0): NumericArray {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      targetArray[offset + i] = this[i];\n    }\n    return targetArray;\n  }\n\n  from(arrayOrObject: Readonly<NumericArray> | object): this {\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n\n  to<T extends NumericArray | object>(arrayOrObject: T): T {\n    // @ts-ignore\n    if (arrayOrObject === this) {\n      return this;\n    }\n    // @ts-expect-error TS2339: Property 'toObject' does not exist on type 'MathArray'.\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target: this): this {\n    return target ? this.to(target) : this;\n  }\n\n  /** @deprecated */\n  toFloat32Array(): Float32Array {\n    return new Float32Array(this);\n  }\n\n  toString(): string {\n    return this.formatString(config);\n  }\n\n  /** Formats string according to options */\n  formatString(opts: ConfigurationOptions): string {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;\n  }\n\n  equals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exactEquals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Modifiers\n\n  /** Negates all values in this object */\n  negate(): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n\n  /** Linearly interpolates between two values */\n  lerp(a: Readonly<NumericArray>, t: number): this;\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray>, t: number): this;\n\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n    return this.check();\n  }\n\n  /** Minimal */\n  min(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  /** Maximal */\n  max(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  clamp(minVector: Readonly<NumericArray>, maxVector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n\n  add(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  subtract(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  scale(scale: number | Readonly<NumericArray>): this {\n    if (typeof scale === 'number') {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scale;\n      }\n    } else {\n      for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {\n        this[i] *= scale[i];\n      }\n    }\n    return this.check();\n  }\n\n  /**\n   * Multiplies all elements by `scale`\n   * Note: `Matrix4.multiplyByScalar` only scales its 3x3 \"minor\"\n   */\n  multiplyByScalar(scalar: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  // Debug checks\n\n  /** Throws an error if array length is incorrect or contains illegal values */\n  check(): this {\n    if (config.debug && !this.validate()) {\n      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);\n    }\n    return this;\n  }\n\n  /** Returns false if the array length is incorrect or contains illegal values */\n  validate(): boolean {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n\n  // three.js compatibility\n\n  /** @deprecated */\n  sub(a: Readonly<NumericArray>): this {\n    return this.subtract(a);\n  }\n\n  /** @deprecated */\n  setScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  addScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  subScalar(a: number): this {\n    return this.addScalar(-a);\n  }\n\n  /** @deprecated */\n  multiplyScalar(scalar: number): this {\n    // Multiplies all elements\n    // `Matrix4.scale` only scales its 3x3 \"minor\"\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  divideScalar(a: number): this {\n    return this.multiplyByScalar(1 / a);\n  }\n\n  /** @deprecated */\n  clampScalar(min: number, max: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  get elements(): NumericArray {\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}