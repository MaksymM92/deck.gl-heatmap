{"ast":null,"code":"import Resource from './resource';\nimport Buffer from './buffer';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { getScratchArray, fillArray } from '../utils/array-utils-flat';\nimport { assert } from '../utils/assert';\nimport { getBrowser } from '@probe.gl/env';\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\nexport default class VertexArrayObject extends Resource {\n  get [Symbol.toStringTag]() {\n    return 'VertexArrayObject';\n  }\n  static isSupported(gl) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n    return true;\n  }\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {\n        handle: null,\n        isDefaultArray: true\n      });\n    }\n    return gl.luma.defaultVertexArray;\n  }\n  static getMaxAttributes(gl) {\n    VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = opts.id || opts.program && opts.program.id;\n    super(gl, Object.assign({}, opts, {\n      id\n    }));\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n    this.gl2 = gl;\n    this.initialize(opts);\n    Object.seal(this);\n  }\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    return this;\n  }\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.setProps(props);\n  }\n  setProps(props) {\n    return this;\n  }\n  setElementBuffer() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS);\n    this.bind(() => {\n      this.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);\n    });\n    return this;\n  }\n  setBuffer(location, buffer, accessor) {\n    if (buffer.target === 34963) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n    const {\n      size,\n      type,\n      stride,\n      offset,\n      normalized,\n      integer,\n      divisor\n    } = accessor;\n    const {\n      gl,\n      gl2\n    } = this;\n    location = Number(location);\n    this.bind(() => {\n      gl.bindBuffer(34962, buffer.handle);\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n    });\n    return this;\n  }\n  enable(location) {\n    let enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const disablingAttributeZero = !enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {\n      constantAttributeZero: true\n    });\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(() => enable ? this.gl.enableVertexAttribArray(location) : this.gl.disableVertexAttribArray(location));\n    }\n    return this;\n  }\n  getConstantBuffer(elementCount, value) {\n    const constantValue = this._normalizeConstantArrayValue(value);\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n    let updateNeeded = !this.buffer;\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n    updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n    if (updateNeeded) {\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({\n        target: typedArray,\n        source: constantValue,\n        start: 0,\n        count: length\n      });\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n    return this.buffer;\n  }\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n  _createHandle() {\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    return [this.elements];\n  }\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n  _getParameter(pname, _ref) {\n    let {\n      location\n    } = _ref;\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case 34373:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n}","map":{"version":3,"names":["Resource","Buffer","isWebGL2","getScratchArray","fillArray","assert","getBrowser","ERR_ELEMENTS","VertexArrayObject","Symbol","toStringTag","isSupported","gl","options","arguments","length","undefined","constantAttributeZero","getDefaultArray","luma","defaultVertexArray","handle","isDefaultArray","getMaxAttributes","MAX_ATTRIBUTES","getParameter","setConstant","location","array","constructor","Float32Array","_setConstantFloatArray","Int32Array","_setConstantIntArray","Uint32Array","_setConstantUintArray","opts","id","program","Object","assign","buffer","bufferValue","gl2","initialize","seal","delete","props","setProps","setElementBuffer","elementBuffer","target","bind","bindBuffer","setBuffer","accessor","size","type","stride","offset","normalized","integer","divisor","Number","vertexAttribIPointer","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","enable","disablingAttributeZero","disableVertexAttribArray","getConstantBuffer","elementCount","value","constantValue","_normalizeConstantArrayValue","byteLength","updateNeeded","reallocate","_compareConstantArrayValues","typedArray","source","start","count","subData","arrayValue","Array","isArray","v1","v2","i","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","_createHandle","createVertexArray","_deleteHandle","deleteVertexArray","elements","_bindHandle","bindVertexArray","_getParameter","pname","_ref","isFinite","getVertexAttribOffset","getVertexAttrib"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/vertex-array-object.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils/assert';\nimport {getBrowser} from '@probe.gl/env';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'VertexArrayObject';\n  }\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return true;\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  // TODO(Tarek): VAOs are now polyfilled. Deprecate this in 9.0\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    // @ts-ignore\n    VertexArrayObject.MAX_ATTRIBUTES =\n      // @ts-ignore\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    // @ts-ignore\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n\n    /** @type {WebGL2RenderingContext} */\n    this.gl2 = gl;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl, gl2} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    /** @type {WebGL2RenderingContext} */\n    // @ts-ignore\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    // @ts-ignore\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}