{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ScreenPass from '../passes/screen-pass';\nimport { normalizeShaderModule } from '@luma.gl/core';\nexport default class PostProcessEffect {\n  constructor(module) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"props\", void 0);\n    _defineProperty(this, \"module\", void 0);\n    _defineProperty(this, \"passes\", void 0);\n    this.id = \"\".concat(module.name, \"-pass\");\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n  setProps(props) {\n    this.props = props;\n  }\n  preRender() {}\n  postRender(gl, params) {\n    const passes = this.passes || createPasses(gl, this.module, this.id);\n    this.passes = passes;\n    const {\n      target\n    } = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({\n        inputBuffer,\n        outputBuffer,\n        moduleSettings: this.props\n      });\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\nfunction createPasses(gl, module, id) {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs\n    });\n    return [pass];\n  }\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = \"\".concat(id, \"-\").concat(index);\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs\n    });\n  });\n}\nconst FILTER_FS_TEMPLATE = func => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = texture2D(texture, texCoord);\\n  gl_FragColor = \".concat(func, \"(gl_FragColor, texSize, texCoord);\\n}\\n\");\nconst SAMPLER_FS_TEMPLATE = func => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = \".concat(func, \"(texture, texSize, texCoord);\\n}\\n\");\nfunction getFragmentShaderForRenderPass(module) {\n  let pass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : module;\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : \"\".concat(module.name, \"_filterColor\");\n    return FILTER_FS_TEMPLATE(func);\n  }\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : \"\".concat(module.name, \"_sampleColor\");\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n  return null;\n}","map":{"version":3,"names":["ScreenPass","normalizeShaderModule","PostProcessEffect","constructor","module","props","arguments","length","undefined","_defineProperty","id","concat","name","setProps","preRender","postRender","gl","params","passes","createPasses","target","inputBuffer","outputBuffer","swapBuffer","index","render","moduleSettings","switchBuffer","cleanup","pass","delete","fs","getFragmentShaderForRenderPass","map","idn","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE","filter","sampler"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/effects/post-process-effect.ts"],"sourcesContent":["import ScreenPass from '../passes/screen-pass';\nimport {normalizeShaderModule} from '@luma.gl/core';\n\nimport type {Effect, PostRenderOptions} from '../lib/effect';\nimport type {Framebuffer} from '@luma.gl/webgl';\nimport type {ShaderModule} from '../types/types';\n\nexport default class PostProcessEffect implements Effect {\n  id: string;\n  props: any;\n  module: ShaderModule;\n  passes?: ScreenPass[];\n\n  constructor(module: ShaderModule, props: any = {}) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  setProps(props: any) {\n    this.props = props;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender(): void {}\n\n  postRender(gl: WebGLRenderingContext, params: PostRenderOptions): Framebuffer {\n    const passes = this.passes || createPasses(gl, this.module, this.id);\n    this.passes = passes;\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer, moduleSettings: this.props});\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup(): void {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\n\nfunction createPasses(gl: WebGLRenderingContext, module: ShaderModule, id: string): ScreenPass[] {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,SAAQC,qBAAR,QAAoC,eAApC;AAMA,eAAe,MAAMC,iBAAN,CAA0C;EAMvDC,WAAWA,CAACC,MAAD,EAAwC;IAAA,IAAjBC,KAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAApC;IAAwCG,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACjD,KAAKC,EAAL,MAAAC,MAAA,CAAaP,MAAM,CAACQ,IAApB;IACA,KAAKP,KAAL,GAAaA,KAAb;IACAJ,qBAAqB,CAACG,MAAD,CAArB;IACA,KAAKA,MAAL,GAAcA,MAAd;EACD;EAEDS,QAAQA,CAACR,KAAD,EAAa;IACnB,KAAKA,KAAL,GAAaA,KAAb;EACD;EAGDS,SAASA,CAAA,EAAS,CAAE;EAEpBC,UAAUA,CAACC,EAAD,EAA4BC,MAA5B,EAAoE;IAC5E,MAAMC,MAAM,GAAG,KAAKA,MAAL,IAAeC,YAAY,CAACH,EAAD,EAAK,KAAKZ,MAAV,EAAkB,KAAKM,EAAvB,CAA1C;IACA,KAAKQ,MAAL,GAAcA,MAAd;IAEA,MAAM;MAACE;IAAD,IAAWH,MAAjB;IACA,IAAII,WAAW,GAAGJ,MAAM,CAACI,WAAzB;IACA,IAAIC,YAAY,GAAGL,MAAM,CAACM,UAA1B;IAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKN,MAAL,CAAYX,MAAxC,EAAgDiB,KAAK,EAArD,EAAyD;MACvD,IAAIJ,MAAM,IAAII,KAAK,KAAK,KAAKN,MAAL,CAAYX,MAAZ,GAAqB,CAA7C,EAAgD;QAC9Ce,YAAY,GAAGF,MAAf;MACD;MACD,KAAKF,MAAL,CAAYM,KAAZ,EAAmBC,MAAnB,CAA0B;QAACJ,WAAD;QAAcC,YAAd;QAA4BI,cAAc,EAAE,KAAKrB;MAAjD,CAA1B;MACA,MAAMsB,YAAY,GAAGL,YAArB;MACAA,YAAY,GAAGD,WAAf;MACAA,WAAW,GAAGM,YAAd;IACD;IACD,OAAON,WAAP;EACD;EAEDO,OAAOA,CAAA,EAAS;IACd,IAAI,KAAKV,MAAT,EAAiB;MACf,KAAK,MAAMW,IAAX,IAAmB,KAAKX,MAAxB,EAAgC;QAC9BW,IAAI,CAACC,MAAL;MACD;MACD,KAAKZ,MAAL,GAAcV,SAAd;IACD;EACF;AA/CsD;AAkDzD,SAASW,YAATA,CAAsBH,EAAtB,EAAiDZ,MAAjD,EAAuEM,EAAvE,EAAiG;EAC/F,IAAI,CAACN,MAAM,CAACc,MAAZ,EAAoB;IAClB,MAAMa,EAAE,GAAGC,8BAA8B,CAAC5B,MAAD,CAAzC;IACA,MAAMyB,IAAI,GAAG,IAAI7B,UAAJ,CAAegB,EAAf,EAAmB;MAC9BN,EAD8B;MAE9BN,MAF8B;MAG9B2B;IAH8B,CAAnB,CAAb;IAKA,OAAO,CAACF,IAAD,CAAP;EACD;EAED,OAAOzB,MAAM,CAACc,MAAP,CAAce,GAAd,CAAkB,CAACJ,IAAD,EAAOL,KAAP,KAAiB;IACxC,MAAMO,EAAE,GAAGC,8BAA8B,CAAC5B,MAAD,EAASyB,IAAT,CAAzC;IACA,MAAMK,GAAG,MAAAvB,MAAA,CAAMD,EAAN,OAAAC,MAAA,CAAYa,KAAZ,CAAT;IAEA,OAAO,IAAIxB,UAAJ,CAAegB,EAAf,EAAmB;MACxBN,EAAE,EAAEwB,GADoB;MAExB9B,MAFwB;MAGxB2B;IAHwB,CAAnB,CAAP;EAKD,CATM,CAAP;AAUD;AAED,MAAMI,kBAAkB,GAAGC,IAAI,mPAAAzB,MAAA,CAYZyB,IAZY,4CAA/B;AAgBA,MAAMC,mBAAmB,GAAGD,IAAI,mMAAAzB,MAAA,CAWbyB,IAXa,uCAAhC;AAeA,SAASJ,8BAATA,CAAwC5B,MAAxC,EAA+D;EAAA,IAAfyB,IAAI,GAAAvB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGF,MAAvD;EACE,IAAIyB,IAAI,CAACS,MAAT,EAAiB;IACf,MAAMF,IAAI,GAAG,OAAOP,IAAI,CAACS,MAAZ,KAAuB,QAAvB,GAAkCT,IAAI,CAACS,MAAvC,MAAA3B,MAAA,CAAmDP,MAAM,CAACQ,IAA1D,iBAAb;IACA,OAAOuB,kBAAkB,CAACC,IAAD,CAAzB;EACD;EAED,IAAIP,IAAI,CAACU,OAAT,EAAkB;IAChB,MAAMH,IAAI,GAAG,OAAOP,IAAI,CAACU,OAAZ,KAAwB,QAAxB,GAAmCV,IAAI,CAACU,OAAxC,MAAA5B,MAAA,CAAqDP,MAAM,CAACQ,IAA5D,iBAAb;IACA,OAAOyB,mBAAmB,CAACD,IAAD,CAA1B;EACD;EAGD,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}