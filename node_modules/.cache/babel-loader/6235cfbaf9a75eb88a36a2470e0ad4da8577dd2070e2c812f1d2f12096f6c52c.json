{"ast":null,"code":"import { assert } from '../utils/assert';\nlet pathPrefix = '';\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\nexport function loadFile(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(\"Could not load image \".concat(url, \".\")));\n      image.crossOrigin = opts && opts.crossOrigin || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}","map":{"version":3,"names":["assert","pathPrefix","setPathPrefix","prefix","loadFile","url","options","arguments","length","undefined","dataType","fetch","then","res","loadImage","opts","Promise","resolve","reject","image","Image","onload","onerror","Error","concat","crossOrigin","src","error"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/utils/load-file.js"],"sourcesContent":["import {assert} from '../utils/assert';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\n// Reads raw file data from:\nexport function loadFile(url, options = {}) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,iBAArB;AAEA,IAAIC,UAAU,GAAG,EAAjB;AAKA,OAAO,SAASC,aAATA,CAAuBC,MAAvB,EAA+B;EACpCF,UAAU,GAAGE,MAAb;AACD;AAGD,OAAO,SAASC,QAATA,CAAkBC,GAAlB,EAAqC;EAAA,IAAdC,OAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;EAC1CP,MAAM,CAAC,OAAOK,GAAP,KAAe,QAAhB,CAAN;EACAA,GAAG,GAAGJ,UAAU,GAAGI,GAAnB;EACA,MAAMK,QAAQ,GAAGJ,OAAO,CAACI,QAAR,IAAoB,MAArC;EACA,OAAOC,KAAK,CAACN,GAAD,EAAMC,OAAN,CAAL,CAAoBM,IAApB,CAAyBC,GAAG,IAAIA,GAAG,CAACH,QAAD,CAAH,EAAhC,CAAP;AACD;AAOD,OAAO,SAASI,SAATA,CAAmBT,GAAnB,EAAwBU,IAAxB,EAA8B;EACnCf,MAAM,CAAC,OAAOK,GAAP,KAAe,QAAhB,CAAN;EACAA,GAAG,GAAGJ,UAAU,GAAGI,GAAnB;EACA,OAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC,IAAI;MACF,MAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;MACAD,KAAK,CAACE,MAAN,GAAe,MAAMJ,OAAO,CAACE,KAAD,CAA5B;MACAA,KAAK,CAACG,OAAN,GAAgB,MAAMJ,MAAM,CAAC,IAAIK,KAAJ,yBAAAC,MAAA,CAAkCnB,GAAlC,OAAD,CAA5B;MACAc,KAAK,CAACM,WAAN,GAAqBV,IAAI,IAAIA,IAAI,CAACU,WAAd,IAA8B,WAAlD;MACAN,KAAK,CAACO,GAAN,GAAYrB,GAAZ;IACD,CAND,CAME,OAAOsB,KAAP,EAAc;MACdT,MAAM,CAACS,KAAD,CAAN;IACD;EACF,CAVM,CAAP;AAWD"},"metadata":{},"sourceType":"module","externalDependencies":[]}