{"ast":null,"code":"import IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\nexport function getDefaultProps(_ref) {\n  let {\n    type,\n    props\n  } = _ref;\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\nexport function forwardProps(layer, mapping) {\n  const {\n    transitions,\n    updateTriggers\n  } = layer.props;\n  const result = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      value = layer.getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}","map":{"version":3,"names":["IconLayer","ScatterplotLayer","TextLayer","PathLayer","SolidPolygonLayer","POINT_LAYER","circle","type","props","filled","stroked","lineWidthMaxPixels","lineWidthMinPixels","lineWidthScale","lineWidthUnits","pointRadiusMaxPixels","pointRadiusMinPixels","pointRadiusScale","pointRadiusUnits","pointAntialiasing","pointBillboard","getFillColor","getLineColor","getLineWidth","getPointRadius","icon","iconAtlas","iconMapping","iconSizeMaxPixels","iconSizeMinPixels","iconSizeScale","iconSizeUnits","iconAlphaCutoff","iconBillboard","getIcon","getIconAngle","getIconColor","getIconPixelOffset","getIconSize","text","textSizeMaxPixels","textSizeMinPixels","textSizeScale","textSizeUnits","textBackground","textBackgroundPadding","textFontFamily","textFontWeight","textLineHeight","textMaxWidth","textOutlineColor","textOutlineWidth","textWordBreak","textCharacterSet","textBillboard","textFontSettings","getText","getTextAngle","getTextColor","getTextPixelOffset","getTextSize","getTextAnchor","getTextAlignmentBaseline","getTextBackgroundColor","getTextBorderColor","getTextBorderWidth","LINE_LAYER","lineJointRounded","lineCapRounded","lineMiterLimit","lineBillboard","POLYGON_LAYER","extruded","wireframe","elevationScale","material","_full3d","getElevation","getDefaultProps","_ref","result","key","defaultProps","forwardProps","layer","mapping","transitions","updateTriggers","getPosition","geometry","sourceKey","targetKey","value","startsWith","getSubLayerAccessor"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/geojson-layer/sub-layer-map.ts"],"sourcesContent":["import {CompositeLayer, Layer} from '@deck.gl/core';\n\nimport IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({\n  type,\n  props\n}: {\n  type: typeof Layer;\n  props: Record<string, string>;\n}): Record<string, any> {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(\n  layer: CompositeLayer,\n  mapping: Record<string, string>\n): Record<string, any> {\n  const {transitions, updateTriggers} = layer.props;\n  const result: Record<string, any> = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = (layer as any).getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}