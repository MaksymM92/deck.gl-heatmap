{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  padding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getBoundingRect: {\n    type: 'accessor',\n    value: [0, 0, 0, 0]\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\nexport default class TextBackgroundLayer extends Layer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      changeFlags\n    } = params;\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      getLineWidth\n    } = this.props;\n    let {\n      padding\n    } = this.props;\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n    this.state.model.setUniforms(uniforms).setUniforms({\n      billboard,\n      stroked: Boolean(getLineWidth),\n      padding,\n      sizeUnits: UNIT[sizeUnits],\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels\n    }).draw();\n  }\n  _getModel(gl) {\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount: 4,\n        attributes: {\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n_defineProperty(TextBackgroundLayer, \"defaultProps\", defaultProps);\n_defineProperty(TextBackgroundLayer, \"layerName\", 'TextBackgroundLayer');","map":{"version":3,"names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","constructor","arguments","_defineProperty","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","_ref","uniforms","props","length","setUniforms","stroked","Boolean","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer.ts"],"sourcesContent":["import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = any> = _TextBackgroundLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}