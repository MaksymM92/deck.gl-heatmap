{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\nexport default class Pose {\n  constructor() {\n    let {\n      x = 0,\n      y = 0,\n      z = 0,\n      roll = 0,\n      pitch = 0,\n      yaw = 0,\n      position,\n      orientation\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"position\", void 0);\n    _defineProperty(this, \"orientation\", void 0);\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    this.position.x = value;\n  }\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    this.position.y = value;\n  }\n  get z() {\n    return this.position.z;\n  }\n  set z(value) {\n    this.position.z = value;\n  }\n  get roll() {\n    return this.orientation.roll;\n  }\n  set roll(value) {\n    this.orientation.roll = value;\n  }\n  get pitch() {\n    return this.orientation.pitch;\n  }\n  set pitch(value) {\n    this.orientation.pitch = value;\n  }\n  get yaw() {\n    return this.orientation.yaw;\n  }\n  set yaw(value) {\n    this.orientation.yaw = value;\n  }\n  getPosition() {\n    return this.position;\n  }\n  getOrientation() {\n    return this.orientation;\n  }\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation);\n  }\n  getTransformationMatrix() {\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n    return new Matrix4().setRowMajor(cw * cp, -sw * cr + cw * sp * sr, sw * sr + cw * sp * cr, this.x, sw * cp, cw * cr + sw * sp * sr, -cw * sr + sw * sp * cr, this.y, -sp, cp * sr, cp * cr, this.z, 0, 0, 0, 1);\n  }\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4().multiplyRight(this.getTransformationMatrix()).multiplyRight(pose.getTransformationMatrix().invert());\n  }\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4().multiplyRight(pose.getTransformationMatrix()).multiplyRight(this.getTransformationMatrix().invert());\n  }\n}","map":{"version":3,"names":["Matrix4","Vector3","Euler","Pose","constructor","x","y","z","roll","pitch","yaw","position","orientation","arguments","length","undefined","_defineProperty","Array","isArray","RollPitchYaw","value","getPosition","getOrientation","equals","pose","exactEquals","getTransformationMatrix","sr","Math","sin","sp","sw","cr","cos","cp","cw","setRowMajor","getTransformationMatrixFromPose","multiplyRight","invert","getTransformationMatrixToPose"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/core/src/classes/pose.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\nimport {NumericArray} from '@math.gl/types';\n\ntype PoseOptions = {\n  position?: Readonly<NumericArray>;\n  orientation?: Readonly<NumericArray>;\n  x?: number;\n  y?: number;\n  z?: number;\n  roll?: number;\n  pitch?: number;\n  yaw?: number;\n};\n\nexport default class Pose {\n  readonly position: Vector3;\n  readonly orientation: Euler;\n\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position,\n    orientation\n  }: PoseOptions = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      // @ts-expect-error\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x(): number {\n    return this.position.x;\n  }\n\n  set x(value: number) {\n    this.position.x = value;\n  }\n\n  get y(): number {\n    return this.position.y;\n  }\n\n  set y(value: number) {\n    this.position.y = value;\n  }\n\n  get z(): number {\n    return this.position.z;\n  }\n\n  set z(value: number) {\n    this.position.z = value;\n  }\n\n  get roll(): number {\n    return this.orientation.roll;\n  }\n\n  set roll(value: number) {\n    this.orientation.roll = value;\n  }\n\n  get pitch(): number {\n    return this.orientation.pitch;\n  }\n  set pitch(value: number) {\n    this.orientation.pitch = value;\n  }\n\n  get yaw(): number {\n    return this.orientation.yaw;\n  }\n\n  set yaw(value: number) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition(): Vector3 {\n    return this.position;\n  }\n\n  getOrientation(): Euler {\n    return this.orientation;\n  }\n\n  equals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  getTransformationMatrix(): Matrix4 {\n    // setup pre computations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    // Create matrix\n    return new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n      0,\n      0,\n      0,\n      1\n    );\n  }\n\n  getTransformationMatrixFromPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}