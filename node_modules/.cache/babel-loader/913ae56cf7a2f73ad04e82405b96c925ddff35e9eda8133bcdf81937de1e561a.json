{"ast":null,"code":"const EMPTY_ARRAY = [];\nconst placeholderArray = [];\nexport function createIterable(data) {\n  let startRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let endRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  let iterable = EMPTY_ARRAY;\n  const objectInfo = {\n    index: -1,\n    data,\n    target: []\n  };\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n  return {\n    iterable,\n    objectInfo\n  };\n}\nexport function isAsyncIterable(data) {\n  return data && data[Symbol.asyncIterator];\n}\nexport function getAccessorFromBuffer(typedArray, options) {\n  const {\n    size,\n    stride,\n    offset,\n    startIndices,\n    nested\n  } = options;\n  const bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : size;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n  return (_, _ref) => {\n    let {\n      index,\n      target\n    } = _ref;\n    if (!startIndices) {\n      const sourceIndex = index * elementStride + elementOffset;\n      for (let j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n      return target;\n    }\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || vertexCount;\n    let result;\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        target = new Array(size);\n        for (let j = 0; j < size; j++) {\n          target[j] = typedArray[sourceIndex + j];\n        }\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      let targetIndex = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        for (let j = 0; j < size; j++) {\n          result[targetIndex++] = typedArray[sourceIndex + j];\n        }\n      }\n    }\n    return result;\n  };\n}","map":{"version":3,"names":["EMPTY_ARRAY","placeholderArray","createIterable","data","startRow","arguments","length","undefined","endRow","Infinity","iterable","objectInfo","index","target","Symbol","iterator","Number","isFinite","Array","isArray","from","slice","isAsyncIterable","asyncIterator","getAccessorFromBuffer","typedArray","options","size","stride","offset","startIndices","nested","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","vertexCount","Math","floor","_","_ref","sourceIndex","j","startIndex","endIndex","result","i","subarray","constructor","targetIndex"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/utils/iterable-utils.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport type {NumericArray} from '../types/types';\nimport type {AccessorFunction} from '../types/layer-props';\n\nconst EMPTY_ARRAY = [];\nconst placeholderArray = [];\n\n/*\n * Create an Iterable\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n * and a \"context\" tracker from the given data\n */\nexport function createIterable(\n  data,\n  startRow = 0,\n  endRow = Infinity\n): {\n  iterable: Iterable<any>;\n  objectInfo: {\n    index: number;\n    data: any;\n    target: any[];\n  };\n} {\n  let iterable: Iterable<any> = EMPTY_ARRAY;\n\n  const objectInfo = {\n    index: -1,\n    data,\n    // visitor can optionally utilize this to avoid constructing a new array for every object\n    target: []\n  };\n\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    // data is already an iterable\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n\n  return {iterable, objectInfo};\n}\n\n/*\n * Returns true if data is an async iterable object\n */\nexport function isAsyncIterable(data): boolean {\n  return data && data[Symbol.asyncIterator];\n}\n\n/*\n * Create an accessor function from a flat buffer that yields the value at each object index\n */\nexport function getAccessorFromBuffer(\n  typedArray,\n  options: {\n    size: number;\n    stride?: number;\n    offset?: number;\n    startIndices?: NumericArray;\n    nested?: boolean;\n  }\n): AccessorFunction<any, NumericArray> {\n  const {size, stride, offset, startIndices, nested} = options;\n  const bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : size;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n\n  return (_, {index, target}) => {\n    if (!startIndices) {\n      const sourceIndex = index * elementStride + elementOffset;\n      for (let j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n      return target;\n    }\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || vertexCount;\n    let result;\n\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        target = new Array(size);\n        for (let j = 0; j < size; j++) {\n          target[j] = typedArray[sourceIndex + j];\n        }\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(\n        startIndex * size + elementOffset,\n        endIndex * size + elementOffset\n      );\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      let targetIndex = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        for (let j = 0; j < size; j++) {\n          result[targetIndex++] = typedArray[sourceIndex + j];\n        }\n      }\n    }\n\n    return result;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}