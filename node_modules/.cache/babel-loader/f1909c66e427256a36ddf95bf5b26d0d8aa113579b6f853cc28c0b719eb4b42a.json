{"ast":null,"code":"import { log } from '@deck.gl/core';\nexport function getScale(domain, range, scaleFunction) {\n  const scale = scaleFunction;\n  scale.domain = () => domain;\n  scale.range = () => range;\n  return scale;\n}\nexport function getQuantizeScale(domain, range) {\n  const scaleFunction = value => quantizeScale(domain, range, value);\n  return getScale(domain, range, scaleFunction);\n}\nexport function getLinearScale(domain, range) {\n  const scaleFunction = value => linearScale(domain, range, value);\n  return getScale(domain, range, scaleFunction);\n}\nexport function getQuantileScale(domain, range) {\n  const sortedDomain = domain.sort(ascending);\n  let i = 0;\n  const n = Math.max(1, range.length);\n  const thresholds = new Array(n - 1);\n  while (++i < n) {\n    thresholds[i - 1] = threshold(sortedDomain, i / n);\n  }\n  const scaleFunction = value => thresholdsScale(thresholds, range, value);\n  scaleFunction.thresholds = () => thresholds;\n  return getScale(domain, range, scaleFunction);\n}\nfunction ascending(a, b) {\n  return a - b;\n}\nfunction threshold(domain, fraction) {\n  const domainLength = domain.length;\n  if (fraction <= 0 || domainLength < 2) {\n    return domain[0];\n  }\n  if (fraction >= 1) {\n    return domain[domainLength - 1];\n  }\n  const domainFraction = (domainLength - 1) * fraction;\n  const lowIndex = Math.floor(domainFraction);\n  const low = domain[lowIndex];\n  const high = domain[lowIndex + 1];\n  return low + (high - low) * (domainFraction - lowIndex);\n}\nfunction bisectRight(a, x) {\n  let lo = 0;\n  let hi = a.length;\n  while (lo < hi) {\n    const mid = lo + hi >>> 1;\n    if (ascending(a[mid], x) > 0) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  return lo;\n}\nfunction thresholdsScale(thresholds, range, value) {\n  return range[bisectRight(thresholds, value)];\n}\nfunction ordinalScale(domain, domainMap, range, value) {\n  const key = \"\".concat(value);\n  let d = domainMap.get(key);\n  if (d === undefined) {\n    d = domain.push(value);\n    domainMap.set(key, d);\n  }\n  return range[(d - 1) % range.length];\n}\nexport function getOrdinalScale(domain, range) {\n  const domainMap = new Map();\n  const uniqueDomain = [];\n  for (const d of domain) {\n    const key = \"\".concat(d);\n    if (!domainMap.has(key)) {\n      domainMap.set(key, uniqueDomain.push(d));\n    }\n  }\n  const scaleFunction = value => ordinalScale(uniqueDomain, domainMap, range, value);\n  return getScale(domain, range, scaleFunction);\n}\nexport function quantizeScale(domain, range, value) {\n  const domainRange = domain[1] - domain[0];\n  if (domainRange <= 0) {\n    log.warn('quantizeScale: invalid domain, returning range[0]')();\n    return range[0];\n  }\n  const step = domainRange / range.length;\n  const idx = Math.floor((value - domain[0]) / step);\n  const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);\n  return range[clampIdx];\n}\nexport function linearScale(domain, range, value) {\n  return (value - domain[0]) / (domain[1] - domain[0]) * (range[1] - range[0]) + range[0];\n}\nfunction notNullOrUndefined(d) {\n  return d !== undefined && d !== null;\n}\nexport function unique(values) {\n  const results = [];\n  values.forEach(v => {\n    if (!results.includes(v) && notNullOrUndefined(v)) {\n      results.push(v);\n    }\n  });\n  return results;\n}\nfunction getTruthyValues(data, valueAccessor) {\n  const values = typeof valueAccessor === 'function' ? data.map(valueAccessor) : data;\n  return values.filter(notNullOrUndefined);\n}\nexport function getLinearDomain(data, valueAccessor) {\n  const sorted = getTruthyValues(data, valueAccessor).sort();\n  return sorted.length ? [sorted[0], sorted[sorted.length - 1]] : [0, 0];\n}\nexport function getQuantileDomain(data, valueAccessor) {\n  return getTruthyValues(data, valueAccessor);\n}\nexport function getOrdinalDomain(data, valueAccessor) {\n  return unique(getTruthyValues(data, valueAccessor));\n}\nexport function getScaleDomain(scaleType, data, valueAccessor) {\n  switch (scaleType) {\n    case 'quantize':\n    case 'linear':\n      return getLinearDomain(data, valueAccessor);\n    case 'quantile':\n      return getQuantileDomain(data, valueAccessor);\n    case 'ordinal':\n      return getOrdinalDomain(data, valueAccessor);\n    default:\n      return getLinearDomain(data, valueAccessor);\n  }\n}\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nexport function getScaleFunctionByScaleType(scaleType) {\n  switch (scaleType) {\n    case 'quantize':\n      return getQuantizeScale;\n    case 'linear':\n      return getLinearScale;\n    case 'quantile':\n      return getQuantileScale;\n    case 'ordinal':\n      return getOrdinalScale;\n    default:\n      return getQuantizeScale;\n  }\n}","map":{"version":3,"names":["log","getScale","domain","range","scaleFunction","scale","getQuantizeScale","value","quantizeScale","getLinearScale","linearScale","getQuantileScale","sortedDomain","sort","ascending","i","n","Math","max","length","thresholds","Array","threshold","thresholdsScale","a","b","fraction","domainLength","domainFraction","lowIndex","floor","low","high","bisectRight","x","lo","hi","mid","ordinalScale","domainMap","key","concat","d","get","undefined","push","set","getOrdinalScale","Map","uniqueDomain","has","domainRange","warn","step","idx","clampIdx","min","notNullOrUndefined","unique","values","results","forEach","v","includes","getTruthyValues","data","valueAccessor","map","filter","getLinearDomain","sorted","getQuantileDomain","getOrdinalDomain","getScaleDomain","scaleType","clamp","getScaleFunctionByScaleType"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/utils/scale-utils.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\n\n// a scale function wrapper just like d3-scales\nexport function getScale(domain, range, scaleFunction) {\n  const scale = scaleFunction;\n  scale.domain = () => domain;\n  scale.range = () => range;\n\n  return scale;\n}\n\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\n// return a quantize scale function\nexport function getQuantizeScale(domain, range) {\n  const scaleFunction = value => quantizeScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\n// return a linear scale function\nexport function getLinearScale(domain, range) {\n  const scaleFunction = value => linearScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\nexport function getQuantileScale(domain, range) {\n  // calculate threshold\n  const sortedDomain = domain.sort(ascending);\n  let i = 0;\n  const n = Math.max(1, range.length);\n  const thresholds = new Array(n - 1);\n  while (++i < n) {\n    thresholds[i - 1] = threshold(sortedDomain, i / n);\n  }\n\n  const scaleFunction = value => thresholdsScale(thresholds, range, value);\n  scaleFunction.thresholds = () => thresholds;\n\n  return getScale(domain, range, scaleFunction);\n}\n\nfunction ascending(a, b) {\n  return a - b;\n}\n\nfunction threshold(domain, fraction) {\n  const domainLength = domain.length;\n  if (fraction <= 0 || domainLength < 2) {\n    return domain[0];\n  }\n  if (fraction >= 1) {\n    return domain[domainLength - 1];\n  }\n\n  const domainFraction = (domainLength - 1) * fraction;\n  const lowIndex = Math.floor(domainFraction);\n  const low = domain[lowIndex];\n  const high = domain[lowIndex + 1];\n  return low + (high - low) * (domainFraction - lowIndex);\n}\n\nfunction bisectRight(a, x) {\n  let lo = 0;\n  let hi = a.length;\n  while (lo < hi) {\n    const mid = (lo + hi) >>> 1;\n    if (ascending(a[mid], x) > 0) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  return lo;\n}\n\n// return a quantize scale function\nfunction thresholdsScale(thresholds, range, value) {\n  return range[bisectRight(thresholds, value)];\n}\n\n// ordinal Scale\nfunction ordinalScale(domain, domainMap, range, value) {\n  const key = `${value}`;\n  let d = domainMap.get(key);\n  if (d === undefined) {\n    // update the domain\n    d = domain.push(value);\n    domainMap.set(key, d);\n  }\n  return range[(d - 1) % range.length];\n}\n\nexport function getOrdinalScale(domain, range) {\n  const domainMap = new Map();\n  const uniqueDomain = [];\n  for (const d of domain) {\n    const key = `${d}`;\n    if (!domainMap.has(key)) {\n      domainMap.set(key, uniqueDomain.push(d));\n    }\n  }\n\n  const scaleFunction = value => ordinalScale(uniqueDomain, domainMap, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\nexport function quantizeScale(domain, range, value) {\n  const domainRange = domain[1] - domain[0];\n  if (domainRange <= 0) {\n    log.warn('quantizeScale: invalid domain, returning range[0]')();\n    return range[0];\n  }\n  const step = domainRange / range.length;\n  const idx = Math.floor((value - domain[0]) / step);\n  const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);\n\n  return range[clampIdx];\n}\n\n// Linear scale maps continuous domain to continuous range\nexport function linearScale(domain, range, value) {\n  return ((value - domain[0]) / (domain[1] - domain[0])) * (range[1] - range[0]) + range[0];\n}\n\n// get scale domains\nfunction notNullOrUndefined(d) {\n  return d !== undefined && d !== null;\n}\n\nexport function unique(values) {\n  const results = [];\n  values.forEach(v => {\n    if (!results.includes(v) && notNullOrUndefined(v)) {\n      results.push(v);\n    }\n  });\n\n  return results;\n}\n\nfunction getTruthyValues(data, valueAccessor) {\n  const values = typeof valueAccessor === 'function' ? data.map(valueAccessor) : data;\n  return values.filter(notNullOrUndefined);\n}\n\nexport function getLinearDomain(data, valueAccessor) {\n  const sorted = getTruthyValues(data, valueAccessor).sort();\n  return sorted.length ? [sorted[0], sorted[sorted.length - 1]] : [0, 0];\n}\n\nexport function getQuantileDomain(data, valueAccessor) {\n  return getTruthyValues(data, valueAccessor);\n}\n\nexport function getOrdinalDomain(data, valueAccessor) {\n  return unique(getTruthyValues(data, valueAccessor));\n}\n\nexport function getScaleDomain(scaleType, data, valueAccessor) {\n  switch (scaleType) {\n    case 'quantize':\n    case 'linear':\n      return getLinearDomain(data, valueAccessor);\n\n    case 'quantile':\n      return getQuantileDomain(data, valueAccessor);\n\n    case 'ordinal':\n      return getOrdinalDomain(data, valueAccessor);\n\n    default:\n      return getLinearDomain(data, valueAccessor);\n  }\n}\n\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nexport function getScaleFunctionByScaleType(scaleType) {\n  switch (scaleType) {\n    case 'quantize':\n      return getQuantizeScale;\n    case 'linear':\n      return getLinearScale;\n    case 'quantile':\n      return getQuantileScale;\n    case 'ordinal':\n      return getOrdinalScale;\n\n    default:\n      return getQuantizeScale;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}