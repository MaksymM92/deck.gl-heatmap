{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport getHiResTimestamp from '../utils/hi-res-timestamp';\nexport default class Stat {\n  constructor(name, type) {\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"sampleSize\", 1);\n    _defineProperty(this, \"time\", void 0);\n    _defineProperty(this, \"count\", void 0);\n    _defineProperty(this, \"samples\", void 0);\n    _defineProperty(this, \"lastTiming\", void 0);\n    _defineProperty(this, \"lastSampleTime\", void 0);\n    _defineProperty(this, \"lastSampleCount\", void 0);\n    _defineProperty(this, \"_count\", 0);\n    _defineProperty(this, \"_time\", 0);\n    _defineProperty(this, \"_samples\", 0);\n    _defineProperty(this, \"_startTime\", 0);\n    _defineProperty(this, \"_timerPending\", false);\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n    return this;\n  }\n  incrementCount() {\n    this.addCount(1);\n    return this;\n  }\n  decrementCount() {\n    this.subtractCount(1);\n    return this;\n  }\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n    return this;\n  }\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n    return this;\n  }\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    return this;\n  }\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}","map":{"version":3,"names":["getHiResTimestamp","Stat","constructor","name","type","_defineProperty","reset","setSampleSize","samples","sampleSize","incrementCount","addCount","decrementCount","subtractCount","value","_count","_samples","_checkSampling","addTime","time","_time","lastTiming","timeStart","_startTime","_timerPending","timeEnd","getSampleAverageCount","lastSampleCount","getSampleAverageTime","lastSampleTime","getSampleHz","getAverageCount","count","getAverageTime","getHz"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@probe.gl/stats/src/lib/stat.ts"],"sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string;\n  sampleSize: number = 1;\n  time: number;\n  count: number;\n  samples: number;\n  lastTiming: number;\n  lastSampleTime: number;\n  lastSampleCount: number;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}