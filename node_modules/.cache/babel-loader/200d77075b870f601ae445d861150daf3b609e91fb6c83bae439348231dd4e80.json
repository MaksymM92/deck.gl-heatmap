{"ast":null,"code":"import BinSorter from './bin-sorter';\nimport { getScaleFunctionByScaleType } from './scale-utils';\nimport { getValueFunc, wrapGetValueFunc } from './aggregation-operation-utils';\nfunction nop() {}\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [{\n  key: 'fillColor',\n  accessor: 'getFillColor',\n  pickingInfo: 'colorValue',\n  getBins: {\n    triggers: {\n      value: {\n        prop: 'getColorValue',\n        updateTrigger: 'getColorValue'\n      },\n      weight: {\n        prop: 'getColorWeight',\n        updateTrigger: 'getColorWeight'\n      },\n      aggregation: {\n        prop: 'colorAggregation'\n      },\n      filterData: {\n        prop: '_filterData',\n        updateTrigger: '_filterData'\n      }\n    }\n  },\n  getDomain: {\n    triggers: {\n      lowerPercentile: {\n        prop: 'lowerPercentile'\n      },\n      upperPercentile: {\n        prop: 'upperPercentile'\n      },\n      scaleType: {\n        prop: 'colorScaleType'\n      }\n    }\n  },\n  getScaleFunc: {\n    triggers: {\n      domain: {\n        prop: 'colorDomain'\n      },\n      range: {\n        prop: 'colorRange'\n      }\n    },\n    onSet: {\n      props: 'onSetColorDomain'\n    }\n  },\n  nullValue: [0, 0, 0, 0]\n}, {\n  key: 'elevation',\n  accessor: 'getElevation',\n  pickingInfo: 'elevationValue',\n  getBins: {\n    triggers: {\n      value: {\n        prop: 'getElevationValue',\n        updateTrigger: 'getElevationValue'\n      },\n      weight: {\n        prop: 'getElevationWeight',\n        updateTrigger: 'getElevationWeight'\n      },\n      aggregation: {\n        prop: 'elevationAggregation'\n      },\n      filterData: {\n        prop: '_filterData',\n        updateTrigger: '_filterData'\n      }\n    }\n  },\n  getDomain: {\n    triggers: {\n      lowerPercentile: {\n        prop: 'elevationLowerPercentile'\n      },\n      upperPercentile: {\n        prop: 'elevationUpperPercentile'\n      },\n      scaleType: {\n        prop: 'elevationScaleType'\n      }\n    }\n  },\n  getScaleFunc: {\n    triggers: {\n      domain: {\n        prop: 'elevationDomain'\n      },\n      range: {\n        prop: 'elevationRange'\n      }\n    },\n    onSet: {\n      props: 'onSetElevationDomain'\n    }\n  },\n  nullValue: -1\n}];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {}\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n  updateState(opts, aggregationParams) {\n    const {\n      oldProps,\n      props,\n      changeFlags\n    } = opts;\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n    let aggregationDirty = false;\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      this.getAggregatedData(props, aggregationParams);\n      aggregationDirty = true;\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n      aggregationDirty = true;\n    }\n    this.setState({\n      aggregationDirty\n    });\n    return this.state;\n  }\n  setState(updateObject) {\n    this.state = {\n      ...this.state,\n      ...updateObject\n    };\n  }\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: {\n        ...this.state.dimensions,\n        [key]: {\n          ...this.state.dimensions[key],\n          ...updateObject\n        }\n      }\n    });\n  }\n  normalizeResult() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (result.hexagons) {\n      return {\n        data: result.hexagons,\n        ...result\n      };\n    } else if (result.layerData) {\n      return {\n        data: result.layerData,\n        ...result\n      };\n    }\n    return result;\n  }\n  getAggregatedData(props, aggregationParams) {\n    const aggregator = this._getAggregator(props);\n    const result = aggregator(props, aggregationParams);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {\n        value,\n        weight,\n        aggregation\n      } = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(this.dimensionUpdaters[key].getBins, oldProps, props, changeFlags);\n      if (getValueChanged) {\n        if (getValue) {\n          getValue = wrapGetValueFunc(getValue, {\n            data: props.data\n          });\n        } else {\n          getValue = getValueFunc(props[aggregation.prop], props[weight.prop], {\n            data: props.data\n          });\n        }\n      }\n      if (getValue) {\n        this.setDimensionState(key, {\n          getValue\n        });\n      }\n    }\n  }\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return this._getCellSize(oldProps) !== this._getCellSize(props) || this._getAggregator(oldProps) !== this._getAggregator(props) || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition);\n  }\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n  _addDimension() {\n    let dimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    dimensions.forEach(dimension => {\n      const {\n        key\n      } = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n  getDimensionUpdaters(_ref) {\n    let {\n      key,\n      accessor,\n      pickingInfo,\n      getBins,\n      getDomain,\n      getScaleFunc,\n      nullValue\n    } = _ref;\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: {\n        updater: this.getDimensionSortedBins,\n        ...getBins\n      },\n      getDomain: {\n        updater: this.getDimensionValueDomain,\n        ...getDomain\n      },\n      getScaleFunc: {\n        updater: this.getDimensionScale,\n        ...getScaleFunc\n      },\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        return changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged[item.updateTrigger]);\n      }\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n  getDimensionChanges(oldProps, props, changeFlags) {\n    const updaters = [];\n    for (const key in this.dimensionUpdaters) {\n      const needUpdate = dimensionSteps.find(step => this.needUpdateDimensionStep(this.dimensionUpdaters[key][step], oldProps, props, changeFlags));\n      if (needUpdate) {\n        updaters.push(this.dimensionUpdaters[key][needUpdate].updater.bind(this, props, this.dimensionUpdaters[key]));\n      }\n    }\n    return updaters.length ? updaters : null;\n  }\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n    const updateTriggers = {};\n    for (const key in this.dimensionUpdaters) {\n      const {\n        accessor\n      } = this.dimensionUpdaters[key];\n      updateTriggers[accessor] = {};\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(_ref2 => {\n          let {\n            prop,\n            updateTrigger\n          } = _ref2;\n          if (updateTrigger) {\n            const fromProp = _updateTriggers[updateTrigger];\n            if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n              Object.assign(updateTriggers[accessor], fromProp);\n            } else if (fromProp !== undefined) {\n              updateTriggers[accessor][prop] = fromProp;\n            }\n          } else {\n            updateTriggers[accessor][prop] = props[prop];\n          }\n        });\n      });\n    }\n    return updateTriggers;\n  }\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n  getDimensionSortedBins(props, dimensionUpdater) {\n    const {\n      key\n    } = dimensionUpdater;\n    const {\n      getValue\n    } = this.state.dimensions[key];\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {\n      getValue,\n      filterData: props._filterData\n    });\n    this.setDimensionState(key, {\n      sortedBins\n    });\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {\n      getDomain,\n      key\n    } = dimensionUpdater;\n    const {\n      triggers: {\n        lowerPercentile,\n        upperPercentile,\n        scaleType\n      }\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(props[scaleType.prop], [props[lowerPercentile.prop], props[upperPercentile.prop]]);\n    this.setDimensionState(key, {\n      valueDomain\n    });\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n  getDimensionScale(props, dimensionUpdater) {\n    const {\n      key,\n      getScaleFunc,\n      getDomain\n    } = dimensionUpdater;\n    const {\n      domain,\n      range\n    } = getScaleFunc.triggers;\n    const {\n      scaleType\n    } = getDomain.triggers;\n    const {\n      onSet\n    } = getScaleFunc;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](scaleFunc.domain());\n    }\n    this.setDimensionState(key, {\n      scaleFunc\n    });\n  }\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {\n        sortedBins,\n        scaleFunc\n      } = this.state.dimensions[key];\n      const bin = sortedBins.binMap[cell.index];\n      if (bin && bin.counts === 0) {\n        return nullValue;\n      }\n      const cv = bin && bin.value;\n      const domain = scaleFunc.domain();\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n  getSubLayerAccessors(props) {\n    const accessors = {};\n    for (const key in this.dimensionUpdaters) {\n      const {\n        accessor\n      } = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n    return accessors;\n  }\n  getPickingInfo(_ref3) {\n    let {\n      info\n    } = _ref3;\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n    if (isPicked) {\n      const cell = this.state.layerData.data[info.index];\n      const binInfo = {};\n      for (const key in this.dimensionUpdaters) {\n        const {\n          pickingInfo\n        } = this.dimensionUpdaters[key];\n        const {\n          sortedBins\n        } = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n      object = Object.assign(binInfo, cell, {\n        points: cell.filteredPoints || cell.points\n      });\n    }\n    info.picked = Boolean(object);\n    info.object = object;\n    return info;\n  }\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n}","map":{"version":3,"names":["BinSorter","getScaleFunctionByScaleType","getValueFunc","wrapGetValueFunc","nop","dimensionSteps","defaultDimensions","key","accessor","pickingInfo","getBins","triggers","value","prop","updateTrigger","weight","aggregation","filterData","getDomain","lowerPercentile","upperPercentile","scaleType","getScaleFunc","domain","range","onSet","props","nullValue","defaultGetCellSize","cellSize","CPUAggregator","constructor","opts","state","layerData","dimensions","changeFlags","dimensionUpdaters","_getCellSize","getCellSize","_getAggregator","getAggregator","_addDimension","updateState","aggregationParams","oldProps","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","aggregationDirty","dataChanged","getAggregatedData","dimensionChanges","getDimensionChanges","forEach","f","setState","updateObject","setDimensionState","normalizeResult","result","arguments","length","undefined","hexagons","data","aggregator","getSortedBins","getValue","getValueChanged","needUpdateDimensionStep","updateTriggersChanged","all","getPosition","addDimension","dimension","getDimensionUpdaters","sortedBins","scaleFunc","_ref","updater","getDimensionSortedBins","getDimensionValueDomain","getDimensionScale","attributeAccessor","getSubLayerDimensionAttribute","dimensionStep","Object","values","some","item","updaters","needUpdate","find","step","push","bind","getUpdateTriggers","_updateTriggers","updateTriggers","_ref2","fromProp","Array","isArray","assign","dimensionUpdater","_filterData","valueDomain","getValueDomainByScale","dimensionRange","dimensionDomain","getScaleFunction","cell","bin","binMap","index","counts","cv","isValueInDomain","getSubLayerAccessors","accessors","getPickingInfo","_ref3","info","isPicked","picked","object","binInfo","points","filteredPoints","Boolean","getAccessor","dimensionKey","hasOwnProperty"],"sources":["../../../src/utils/cpu-aggregator.js"],"sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport BinSorter from './bin-sorter';\nimport {getScaleFunctionByScaleType} from './scale-utils';\nimport {getValueFunc, wrapGetValueFunc} from './aggregation-operation-utils';\n\nfunction nop() {}\n\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [\n  {\n    key: 'fillColor',\n    accessor: 'getFillColor',\n    pickingInfo: 'colorValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getColorValue',\n          updateTrigger: 'getColorValue'\n        },\n        weight: {\n          prop: 'getColorWeight',\n          updateTrigger: 'getColorWeight'\n        },\n        aggregation: {\n          prop: 'colorAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'lowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'upperPercentile'\n        },\n        scaleType: {\n          prop: 'colorScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'colorDomain'},\n        range: {prop: 'colorRange'}\n      },\n      onSet: {\n        props: 'onSetColorDomain'\n      }\n    },\n    nullValue: [0, 0, 0, 0]\n  },\n  {\n    key: 'elevation',\n    accessor: 'getElevation',\n    pickingInfo: 'elevationValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getElevationValue',\n          updateTrigger: 'getElevationValue'\n        },\n        weight: {\n          prop: 'getElevationWeight',\n          updateTrigger: 'getElevationWeight'\n        },\n        aggregation: {\n          prop: 'elevationAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'elevationLowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'elevationUpperPercentile'\n        },\n        scaleType: {\n          prop: 'elevationScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'elevationDomain'},\n        range: {prop: 'elevationRange'}\n      },\n      onSet: {\n        props: 'onSetElevationDomain'\n      }\n    },\n    nullValue: -1\n  }\n];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {\n        // color: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // },\n        // elevation: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // }\n      }\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n\n  updateState(opts, aggregationParams) {\n    const {oldProps, props, changeFlags} = opts;\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n    let aggregationDirty = false;\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into bin and aggregate wegiths per bin\n      this.getAggregatedData(props, aggregationParams);\n      aggregationDirty = true;\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      // this here is layer\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n      aggregationDirty = true;\n    }\n    this.setState({aggregationDirty});\n\n    return this.state;\n  }\n\n  // Update private state\n  setState(updateObject) {\n    this.state = {...this.state, ...updateObject};\n  }\n\n  // Update private state.dimensions\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: {\n        ...this.state.dimensions,\n        [key]: {...this.state.dimensions[key], ...updateObject}\n      }\n    });\n  }\n\n  normalizeResult(result = {}) {\n    // support previous hexagonAggregator API\n    if (result.hexagons) {\n      return {data: result.hexagons, ...result};\n    } else if (result.layerData) {\n      return {data: result.layerData, ...result};\n    }\n\n    return result;\n  }\n\n  getAggregatedData(props, aggregationParams) {\n    const aggregator = this._getAggregator(props);\n\n    const result = aggregator(props, aggregationParams);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {value, weight, aggregation} = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(\n        this.dimensionUpdaters[key].getBins,\n        oldProps,\n        props,\n        changeFlags\n      );\n\n      if (getValueChanged) {\n        if (getValue) {\n          getValue = wrapGetValueFunc(getValue, {data: props.data});\n        } else {\n          // If `getValue` is not provided from props, build it with aggregation and weight.\n          getValue = getValueFunc(props[aggregation.prop], props[weight.prop], {data: props.data});\n        }\n      }\n\n      if (getValue) {\n        this.setDimensionState(key, {getValue});\n      }\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      this._getCellSize(oldProps) !== this._getCellSize(props) ||\n      this._getAggregator(oldProps) !== this._getAggregator(props) ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  // Adds dimensions\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n\n  _addDimension(dimensions = []) {\n    dimensions.forEach(dimension => {\n      const {key} = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n\n  getDimensionUpdaters({key, accessor, pickingInfo, getBins, getDomain, getScaleFunc, nullValue}) {\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: {updater: this.getDimensionSortedBins, ...getBins},\n      getDomain: {updater: this.getDimensionValueDomain, ...getDomain},\n      getScaleFunc: {updater: this.getDimensionScale, ...getScaleFunc},\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    // whether need to update current dimension step\n    // dimension step is the value, domain, scaleFunction of each dimension\n    // each step is an object with properties links to layer prop and whether the prop is\n    // controlled by updateTriggers\n    // getBins: {\n    //   value: {\n    //     prop: 'getElevationValue',\n    //     updateTrigger: 'getElevationValue'\n    //   },\n    //   weight: {\n    //     prop: 'getElevationWeight',\n    //     updateTrigger: 'getElevationWeight'\n    //   },\n    //   aggregation: {\n    //     prop: 'elevationAggregation'\n    //   }\n    // }\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        // check based on updateTriggers change first\n        // if data has changed, always update value\n        return (\n          changeFlags.dataChanged ||\n          (changeFlags.updateTriggersChanged &&\n            (changeFlags.updateTriggersChanged.all ||\n              changeFlags.updateTriggersChanged[item.updateTrigger]))\n        );\n      }\n      // fallback to direct comparison\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n\n  getDimensionChanges(oldProps, props, changeFlags) {\n    // const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const key in this.dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionSteps.find(step =>\n        this.needUpdateDimensionStep(\n          this.dimensionUpdaters[key][step],\n          oldProps,\n          props,\n          changeFlags\n        )\n      );\n\n      if (needUpdate) {\n        updaters.push(\n          this.dimensionUpdaters[key][needUpdate].updater.bind(\n            this,\n            props,\n            this.dimensionUpdaters[key]\n          )\n        );\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n    const updateTriggers = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      // fold dimension triggers into each accessor\n      updateTriggers[accessor] = {};\n\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(\n          ({prop, updateTrigger}) => {\n            if (updateTrigger) {\n              // if prop is based on updateTrigger e.g. getColorValue, getColorWeight\n              // and updateTriggers is passed in from layer prop\n              // fold the updateTriggers into accessor\n              const fromProp = _updateTriggers[updateTrigger];\n              if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n                // if updateTrigger is an object spread it\n                Object.assign(updateTriggers[accessor], fromProp);\n              } else if (fromProp !== undefined) {\n                updateTriggers[accessor][prop] = fromProp;\n              }\n            } else {\n              // if prop is not based on updateTrigger\n              updateTriggers[accessor][prop] = props[prop];\n            }\n          }\n        );\n      });\n    }\n\n    return updateTriggers;\n  }\n\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n\n  getDimensionSortedBins(props, dimensionUpdater) {\n    const {key} = dimensionUpdater;\n    const {getValue} = this.state.dimensions[key];\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {\n      getValue,\n      filterData: props._filterData\n    });\n    this.setDimensionState(key, {sortedBins});\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {getDomain, key} = dimensionUpdater;\n    const {\n      triggers: {lowerPercentile, upperPercentile, scaleType}\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(\n      props[scaleType.prop],\n      [props[lowerPercentile.prop], props[upperPercentile.prop]]\n    );\n\n    this.setDimensionState(key, {valueDomain});\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n\n  getDimensionScale(props, dimensionUpdater) {\n    const {key, getScaleFunc, getDomain} = dimensionUpdater;\n    const {domain, range} = getScaleFunc.triggers;\n    const {scaleType} = getDomain.triggers;\n    const {onSet} = getScaleFunc;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](scaleFunc.domain());\n    }\n\n    this.setDimensionState(key, {scaleFunc});\n  }\n\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {sortedBins, scaleFunc} = this.state.dimensions[key];\n      const bin = sortedBins.binMap[cell.index];\n\n      if (bin && bin.counts === 0) {\n        // no points left in bin after filtering\n        return nullValue;\n      }\n      const cv = bin && bin.value;\n      const domain = scaleFunc.domain();\n\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n\n      // if cell value is outside domain, set alpha to 0\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n\n  getSubLayerAccessors(props) {\n    const accessors = {};\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n\n    return accessors;\n  }\n\n  getPickingInfo({info}) {\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      // const {sortedColorBins, sortedElevationBins} = this.state;\n\n      const cell = this.state.layerData.data[info.index];\n\n      const binInfo = {};\n      for (const key in this.dimensionUpdaters) {\n        const {pickingInfo} = this.dimensionUpdaters[key];\n        const {sortedBins} = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n\n      object = Object.assign(binInfo, cell, {\n        points: cell.filteredPoints || cell.points\n      });\n    }\n\n    // override object with picked cell\n    info.picked = Boolean(object);\n    info.object = object;\n\n    return info;\n  }\n\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}