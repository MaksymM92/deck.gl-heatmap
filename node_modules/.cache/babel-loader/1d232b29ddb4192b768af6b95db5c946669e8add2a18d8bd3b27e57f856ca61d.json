{"ast":null,"code":"import Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { vec2_transformMat4AsVector } from '../lib/gl-matrix-extras';\nexport default class Vector2 extends Vector {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super(2);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n      this[0] = x;\n      this[1] = y;\n    }\n  }\n  set(x, y) {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n  fromObject(object) {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n  toObject(object) {\n    object.x = this[0];\n    object.y = this[1];\n    return object;\n  }\n  get ELEMENTS() {\n    return 2;\n  }\n  horizontalAngle() {\n    return Math.atan2(this.y, this.x);\n  }\n  verticalAngle() {\n    return Math.atan2(this.x, this.y);\n  }\n  transform(matrix4) {\n    return this.transformAsPoint(matrix4);\n  }\n  transformAsPoint(matrix4) {\n    vec2.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n  transformAsVector(matrix4) {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n  transformByMatrix3(matrix3) {\n    vec2.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n  transformByMatrix2x3(matrix2x3) {\n    vec2.transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n  transformByMatrix2(matrix2) {\n    vec2.transformMat2(this, this, matrix2);\n    return this.check();\n  }\n}","map":{"version":3,"names":["Vector","config","isArray","checkNumber","vec2","vec2_transformMat4AsVector","Vector2","constructor","x","arguments","length","undefined","y","copy","debug","set","check","array","fromObject","object","toObject","ELEMENTS","horizontalAngle","Math","atan2","verticalAngle","transform","matrix4","transformAsPoint","transformMat4","transformAsVector","transformByMatrix3","matrix3","transformMat3","transformByMatrix2x3","matrix2x3","transformMat2d","transformByMatrix2","matrix2","transformMat2"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/core/src/classes/vector2.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Vector from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport * as vec2 from 'gl-matrix/vec2';\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector} from '../lib/gl-matrix-extras';\nimport {NumericArray} from '@math.gl/types';\n\n/**\n * Two-element vector class.\n * Subclass of Array<number>\n */\nexport default class Vector2 extends Vector {\n  // Creates a new, empty vec2\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(2); // -0, -0);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x as Readonly<NumericArray>);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n      this[0] = x as number;\n      this[1] = y;\n    }\n  }\n\n  set(x: number, y: number): this {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n\n  toObject(object: {x?: number; y?: number}): {x: number; y: number} {\n    object.x = this[0];\n    object.y = this[1];\n    return object as {x: number; y: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 2;\n  }\n\n  /**\n   * Returns angle from x axis\n   * @returns\n   */\n  horizontalAngle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Returns angle from y axis\n   * @returns\n   */\n  verticalAngle(): number {\n    return Math.atan2(this.x, this.y);\n  }\n\n  // Transforms\n\n  /**\n   * Transforms as point\n   * @param matrix4\n   * @returns\n   */\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  /**\n   * transforms as point (4th component is implicitly 1)\n   * @param matrix4\n   * @returns\n   */\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec2.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  /**\n   * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)\n   * @param matrix4\n   * @returns\n   */\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec2.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2x3(matrix2x3: Readonly<NumericArray>): this {\n    vec2.transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec2.transformMat2(this, this, matrix2);\n    return this.check();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}