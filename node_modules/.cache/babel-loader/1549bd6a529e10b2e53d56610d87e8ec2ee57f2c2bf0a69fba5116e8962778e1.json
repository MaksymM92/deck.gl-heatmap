{"ast":null,"code":"import { assertWebGL2Context, withParameters } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\nconst ERR_ARGUMENTS = 'clear: bad arguments';\nexport function clear(gl) {\n  let {\n    framebuffer = null,\n    color = null,\n    depth = null,\n    stencil = null\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const parameters = {};\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n  let clearFlags = 0;\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\nexport function clearBuffer(gl) {\n  let {\n    framebuffer = null,\n    buffer = GL_COLOR,\n    drawBuffer = 0,\n    value = [0, 0, 0, 0]\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  assertWebGL2Context(gl);\n  withParameters(gl, {\n    framebuffer\n  }, () => {\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}","map":{"version":3,"names":["assertWebGL2Context","withParameters","assert","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","clear","gl","framebuffer","color","depth","stencil","arguments","length","undefined","parameters","clearFlags","clearColor","clearDepth","clearStencil","clearBuffer","buffer","drawBuffer","value","constructor","Int32Array","clearBufferiv","Uint32Array","clearBufferuiv","Float32Array","clearBufferfv","clearBufferfi"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/clear.js"],"sourcesContent":["import {assertWebGL2Context, withParameters} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\n/** @type {import('./clear').clear} */\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\n/** @type {import('./clear').clearBuffer} */\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}