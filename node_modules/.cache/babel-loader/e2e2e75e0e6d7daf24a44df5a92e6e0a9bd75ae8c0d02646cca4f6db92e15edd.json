{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Buffer } from '@luma.gl/core';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION } from '../utils/aggregation-operation-utils';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport { pointToDensityGridDataCPU } from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport { getBoundingBox, getGridParams } from '../utils/grid-aggregation-utils';\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  extruded: false,\n  material: true\n};\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nexport default class GPUGridLayer extends GridAggregationLayer {\n  initializeState(_ref) {\n    let {\n      gl\n    } = _ref;\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      gpuAggregation: true,\n      projectPoints: false,\n      isSupported,\n      weights: {\n        color: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {\n              size: 4,\n              type: 5126,\n              divisor: 1\n            }\n          })\n        },\n        elevation: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {\n              size: 4,\n              type: 5126,\n              divisor: 1\n            }\n          })\n        }\n      },\n      positionAttributeName: 'positions'\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      },\n      color: {\n        size: 3,\n        accessor: 'getColorWeight'\n      },\n      elevation: {\n        size: 3,\n        accessor: 'getElevationWeight'\n      }\n    });\n  }\n  updateState(opts) {\n    if (this.state.isSupported === false) {\n      return;\n    }\n    super.updateState(opts);\n    const {\n      aggregationDirty\n    } = this.state;\n    if (aggregationDirty) {\n      this.setState({\n        gridHash: null\n      });\n    }\n  }\n  getHashKeyForIndex(index) {\n    const {\n      numRow,\n      numCol,\n      boundingBox,\n      gridOffset\n    } = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const latIdx = Math.floor((yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]);\n    const lonIdx = Math.floor((xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]);\n    return \"\".concat(latIdx, \"-\").concat(lonIdx);\n  }\n  getPositionForIndex(index) {\n    const {\n      numRow,\n      numCol,\n      boundingBox,\n      gridOffset\n    } = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n  getPickingInfo(_ref2) {\n    let {\n      info,\n      mode\n    } = _ref2;\n    const {\n      index\n    } = info;\n    let object = null;\n    if (index >= 0) {\n      const {\n        gpuGridAggregator\n      } = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('color')\n      });\n      const elevationInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('elevation')\n      });\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        const {\n          props\n        } = this;\n        let {\n          gridHash\n        } = this.state;\n        if (!gridHash) {\n          const {\n            gridOffset,\n            translation,\n            boundingBox\n          } = this.state;\n          const {\n            viewport\n          } = this.context;\n          const attributes = this.getAttributes();\n          const cpuAggregation = pointToDensityGridDataCPU(props, {\n            gridOffset,\n            attributes,\n            viewport,\n            translation,\n            boundingBox\n          });\n          gridHash = cpuAggregation.gridHash;\n          this.setState({\n            gridHash\n          });\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n    info.picked = Boolean(object);\n    info.object = object;\n    return info;\n  }\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n    const {\n      weights,\n      numRow,\n      numCol,\n      gridOrigin,\n      gridOffset\n    } = this.state;\n    const {\n      color,\n      elevation\n    } = weights;\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n    return new SubLayerClass({\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n      colorRange,\n      elevationRange,\n      colorDomain,\n      elevationDomain,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationScale,\n      extruded\n    }, this.getSubLayerProps({\n      id: 'gpu-grid-cell'\n    }), {\n      data: {\n        attributes: {\n          colors: color.aggregationBuffer,\n          elevations: elevation.aggregationBuffer\n        }\n      },\n      colorMaxMinBuffer: color.maxMinBuffer,\n      elevationMaxMinBuffer: elevation.maxMinBuffer,\n      numInstances: numCol * numRow\n    });\n  }\n  finalizeState(context) {\n    const {\n      color,\n      elevation\n    } = this.state.weights;\n    [color, elevation].forEach(weight => {\n      const {\n        aggregationBuffer,\n        maxMinBuffer\n      } = weight;\n      maxMinBuffer.delete();\n      aggregationBuffer === null || aggregationBuffer === void 0 ? void 0 : aggregationBuffer.delete();\n    });\n    super.finalizeState(context);\n  }\n  updateAggregationState(opts) {\n    const {\n      props,\n      oldProps\n    } = opts;\n    const {\n      cellSize,\n      coordinateSystem\n    } = props;\n    const {\n      viewport\n    } = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    const {\n      dimensions\n    } = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const attributesChanged = positionsChanged || this.isAttributeChanged();\n    let {\n      boundingBox\n    } = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({\n        boundingBox\n      });\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {\n        gridOffset,\n        translation,\n        width,\n        height,\n        numCol,\n        numRow\n      } = getGridParams(boundingBox, cellSize, viewport, coordinateSystem);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        translation,\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n    const aggregationDataDirty = attributesChanged || this.isAggregationDirty(opts, {\n      dimension: dimensions.data,\n      compareAll: true\n    });\n    if (aggregationDataDirty) {\n      this._updateAccessors(opts);\n    }\n    this.setState({\n      aggregationDataDirty\n    });\n  }\n  _updateAccessors(opts) {\n    const {\n      colorAggregation,\n      elevationAggregation\n    } = opts.props;\n    const {\n      color,\n      elevation\n    } = this.state.weights;\n    color.operation = AGGREGATION_OPERATION[colorAggregation];\n    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n  }\n}\n_defineProperty(GPUGridLayer, \"layerName\", 'GPUGridLayer');\n_defineProperty(GPUGridLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["Buffer","log","GPUGridAggregator","AGGREGATION_OPERATION","defaultColorRange","colorRangeToFlatArray","GPUGridCellLayer","pointToDensityGridDataCPU","GridAggregationLayer","getBoundingBox","getGridParams","defaultProps","colorDomain","colorRange","getColorWeight","type","value","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","x","position","extruded","material","DIMENSIONS","data","props","POSITION_ATTRIBUTE_NAME","GPUGridLayer","initializeState","_ref","gl","isSupported","error","initializeAggregationLayer","dimensions","setState","gpuAggregation","projectPoints","weights","color","needMin","needMax","combineMaxMin","maxMinBuffer","byteLength","accessor","size","divisor","elevation","positionAttributeName","attributeManager","getAttributeManager","add","fp64","use64bitPositions","updateState","opts","state","aggregationDirty","gridHash","getHashKeyForIndex","index","numRow","numCol","boundingBox","gridOffset","gridSize","gridOrigin","xMin","yMin","xOffset","yOffset","yIndex","Math","floor","xIndex","latIdx","lonIdx","concat","getPositionForIndex","yPos","xPos","getPickingInfo","_ref2","info","mode","object","gpuGridAggregator","colorInfo","getAggregationData","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","translation","viewport","context","attributes","getAttributes","cpuAggregation","key","cpuAggregationData","Object","assign","picked","Boolean","renderLayers","cellSizeMeters","SubLayerClass","getSubLayerClass","getSubLayerProps","id","colors","aggregationBuffer","elevations","colorMaxMinBuffer","elevationMaxMinBuffer","numInstances","finalizeState","forEach","weight","delete","updateAggregationState","oldProps","coordinateSystem","cellSizeChanged","positionsChanged","isAttributeChanged","attributesChanged","getNumInstances","width","height","allocateResources","aggregationDataDirty","isAggregationDirty","dimension","compareAll","_updateAccessors","operation"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/gpu-grid-layer/gpu-grid-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Buffer} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  Material,\n  GetPickingInfoParams,\n  LayerContext,\n  log,\n  PickingInfo,\n  Position,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\n\nconst defaultProps: DefaultProps<GPUGridLayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n// This layer only perform GPU aggregation, no need to seperate data and weight props\n// aggregation will be dirty when any of the props are changed.\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n  // rest of the changes are detected by `state.attributesChanged`\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\n/** All properties supported by GPUGridLayer. */\nexport type GPUGridLayerProps<DataT = any> = _GPUGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by GPUGridLayer. */\nexport type _GPUGridLayerProps<DataT> = {\n  /**\n   * Size of each cell in meters.\n   * @default 1000\n   */\n  cellSize?: number;\n\n  /**\n   * Color scale domain, default is set to the extent of aggregated weights in each cell.\n   * @default [min(colorWeight), max(colorWeight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Default: [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6) `6-class YlOrRd`\n   */\n  colorRange?: Color[];\n\n  /**\n   * Cell size multiplier, clamped between 0 - 1.\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Elevation scale input domain, default is set to between 0 and the max of aggregated weights in each cell.\n   * @default [0, max(elevationWeight)]\n   */\n  elevationDomain?: [number, number] | null;\n\n  /**\n   * Elevation scale output range.\n   * @default [0, 1000]\n   */\n  elevationRange?: [number, number];\n\n  /**\n   * Cell elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to enable cell elevation. If set to false, all cell will be flat.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's color value.\n   * @default 'SUM'\n   */\n  colorAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's elevation value.\n   * @default 'SUM'\n   */\n  elevationAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of a data object used to calculate the color value for a cell.\n   * @default 1\n   */\n  getColorWeight?: Accessor<DataT, number>;\n\n  /**\n   * The weight of a data object used to calculate the elevation value for a cell.\n   * @default 1\n   */\n  getElevationWeight?: Accessor<DataT, number>;\n};\n\n/** Aggregate data into a grid-based heatmap. Aggregation is performed on GPU (WebGL2 only). */\nexport default class GPUGridLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends GridAggregationLayer<DataT, ExtraPropsT & Required<_GPUGridLayerProps<DataT>>> {\n  static layerName = 'GPUGridLayer';\n  static defaultProps = defaultProps;\n\n  initializeState({gl}: LayerContext): void {\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      gpuAggregation: true,\n      projectPoints: false, // aggregation in world space\n      isSupported,\n      weights: {\n        color: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        },\n        elevation: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        }\n      },\n      positionAttributeName: 'positions'\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      color: {size: 3, accessor: 'getColorWeight'},\n      elevation: {size: 3, accessor: 'getElevationWeight'}\n    });\n  }\n\n  updateState(opts) {\n    if (this.state.isSupported === false) {\n      // Skip update, layer not supported\n      return;\n    }\n    super.updateState(opts);\n    const {aggregationDirty} = this.state;\n    if (aggregationDirty) {\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({\n        gridHash: null\n      });\n    }\n  }\n\n  getHashKeyForIndex(index: number): string {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index: number): Position {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    let object: any = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('color')\n      });\n      const elevationInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('elevation')\n      });\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {props} = this;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const {gridOffset, translation, boundingBox} = this.state;\n          const {viewport} = this.context;\n          const attributes = this.getAttributes();\n          const cpuAggregation = pointToDensityGridDataCPU(props as any, {\n            gridOffset,\n            attributes,\n            viewport,\n            translation,\n            boundingBox\n          });\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    // override object with picked cell\n    info.picked = Boolean(object);\n    info.object = object;\n\n    return info;\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, numRow, numCol, gridOrigin, gridOffset} = this.state;\n    const {color, elevation} = weights;\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize: [numCol, numRow],\n        gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    const {color, elevation} = this.state.weights;\n    [color, elevation].forEach(weight => {\n      const {aggregationBuffer, maxMinBuffer} = weight;\n      maxMinBuffer.delete();\n      aggregationBuffer?.delete();\n    });\n    super.finalizeState(context);\n  }\n\n  // Aggregation Overrides\n\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    const {dimensions} = this.state;\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    // any attribute changed\n    const attributesChanged = positionsChanged || this.isAttributeChanged();\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        translation,\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      attributesChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n    if (aggregationDataDirty) {\n      this._updateAccessors(opts);\n    }\n    this.setState({\n      aggregationDataDirty\n    });\n  }\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {colorAggregation, elevationAggregation} = opts.props;\n    const {color, elevation} = this.state.weights;\n    color.operation = AGGREGATION_OPERATION[colorAggregation];\n    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}