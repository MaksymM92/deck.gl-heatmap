{"ast":null,"code":"const HALF = 0.5;\nconst ONE6TH = 1 / 6;\nconst OFFSET = {\n  N: [0, HALF],\n  E: [HALF, 0],\n  S: [0, -HALF],\n  W: [-HALF, 0],\n  NE: [HALF, HALF],\n  NW: [-HALF, HALF],\n  SE: [HALF, -HALF],\n  SW: [-HALF, -HALF]\n};\nconst SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];\nconst SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];\nconst NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];\nconst SW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF]];\nconst SE_TRAPEZOID = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH]];\nconst NE_TRAPEZOID = [[HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst NW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];\nconst E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];\nconst W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];\nconst EW_RECTANGEL = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [HALF, -ONE6TH], [HALF, ONE6TH]];\nconst SN_RECTANGEL = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];\nconst SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];\nconst SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];\nconst NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];\nconst NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];\nconst SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];\nconst NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];\nconst S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];\nconst W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];\nconst NE_HEPTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SW_HEPTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst NW_HEPTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst SE_HEPTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst OCTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];\nexport const ISOLINES_CODE_OFFSET_MAP = {\n  0: [],\n  1: [[OFFSET.W, OFFSET.S]],\n  2: [[OFFSET.S, OFFSET.E]],\n  3: [[OFFSET.W, OFFSET.E]],\n  4: [[OFFSET.N, OFFSET.E]],\n  5: {\n    0: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]]\n  },\n  6: [[OFFSET.N, OFFSET.S]],\n  7: [[OFFSET.W, OFFSET.N]],\n  8: [[OFFSET.W, OFFSET.N]],\n  9: [[OFFSET.N, OFFSET.S]],\n  10: {\n    0: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]],\n    1: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]]\n  },\n  11: [[OFFSET.N, OFFSET.E]],\n  12: [[OFFSET.W, OFFSET.E]],\n  13: [[OFFSET.S, OFFSET.E]],\n  14: [[OFFSET.W, OFFSET.S]],\n  15: []\n};\nfunction ternaryToIndex(ternary) {\n  return parseInt(ternary, 4);\n}\nexport const ISOBANDS_CODE_OFFSET_MAP = {\n  [ternaryToIndex('0000')]: [],\n  [ternaryToIndex('2222')]: [],\n  [ternaryToIndex('2221')]: [SW_TRIANGLE],\n  [ternaryToIndex('2212')]: [SE_TRIANGLE],\n  [ternaryToIndex('2122')]: [NE_TRIANGLE],\n  [ternaryToIndex('1222')]: [NW_TRIANGLE],\n  [ternaryToIndex('0001')]: [SW_TRIANGLE],\n  [ternaryToIndex('0010')]: [SE_TRIANGLE],\n  [ternaryToIndex('0100')]: [NE_TRIANGLE],\n  [ternaryToIndex('1000')]: [NW_TRIANGLE],\n  [ternaryToIndex('2220')]: [SW_TRAPEZOID],\n  [ternaryToIndex('2202')]: [SE_TRAPEZOID],\n  [ternaryToIndex('2022')]: [NE_TRAPEZOID],\n  [ternaryToIndex('0222')]: [NW_TRAPEZOID],\n  [ternaryToIndex('0002')]: [SW_TRAPEZOID],\n  [ternaryToIndex('0020')]: [SE_TRAPEZOID],\n  [ternaryToIndex('0200')]: [NE_TRAPEZOID],\n  [ternaryToIndex('2000')]: [NW_TRAPEZOID],\n  [ternaryToIndex('0011')]: [S_RECTANGLE],\n  [ternaryToIndex('0110')]: [E_RECTANGLE],\n  [ternaryToIndex('1100')]: [N_RECTANGLE],\n  [ternaryToIndex('1001')]: [W_RECTANGLE],\n  [ternaryToIndex('2211')]: [S_RECTANGLE],\n  [ternaryToIndex('2112')]: [E_RECTANGLE],\n  [ternaryToIndex('1122')]: [N_RECTANGLE],\n  [ternaryToIndex('1221')]: [W_RECTANGLE],\n  [ternaryToIndex('2200')]: [EW_RECTANGEL],\n  [ternaryToIndex('2002')]: [SN_RECTANGEL],\n  [ternaryToIndex('0022')]: [EW_RECTANGEL],\n  [ternaryToIndex('0220')]: [SN_RECTANGEL],\n  [ternaryToIndex('1111')]: [SQUARE],\n  [ternaryToIndex('1211')]: [SW_PENTAGON],\n  [ternaryToIndex('2111')]: [SE_PENTAGON],\n  [ternaryToIndex('1112')]: [NE_PENTAGON],\n  [ternaryToIndex('1121')]: [NW_PENTAGON],\n  [ternaryToIndex('1011')]: [SW_PENTAGON],\n  [ternaryToIndex('0111')]: [SE_PENTAGON],\n  [ternaryToIndex('1110')]: [NE_PENTAGON],\n  [ternaryToIndex('1101')]: [NW_PENTAGON],\n  [ternaryToIndex('1200')]: [NW_N_PENTAGON],\n  [ternaryToIndex('0120')]: [NE_E_PENTAGON],\n  [ternaryToIndex('0012')]: [SE_S_PENTAGON],\n  [ternaryToIndex('2001')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1022')]: [NW_N_PENTAGON],\n  [ternaryToIndex('2102')]: [NE_E_PENTAGON],\n  [ternaryToIndex('2210')]: [SE_S_PENTAGON],\n  [ternaryToIndex('0221')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1002')]: [NW_W_PENTAGON],\n  [ternaryToIndex('2100')]: [NE_N_PENTAGON],\n  [ternaryToIndex('0210')]: [SE_E_PENTAGON],\n  [ternaryToIndex('0021')]: [SW_S_PENTAGON],\n  [ternaryToIndex('1220')]: [NW_W_PENTAGON],\n  [ternaryToIndex('0122')]: [NE_N_PENTAGON],\n  [ternaryToIndex('2012')]: [SE_E_PENTAGON],\n  [ternaryToIndex('2201')]: [SW_S_PENTAGON],\n  [ternaryToIndex('0211')]: [S_HEXAGON],\n  [ternaryToIndex('2110')]: [E_HEXAGON],\n  [ternaryToIndex('1102')]: [N_HEXAGON],\n  [ternaryToIndex('1021')]: [W_HEXAGON],\n  [ternaryToIndex('2011')]: [S_HEXAGON],\n  [ternaryToIndex('0112')]: [E_HEXAGON],\n  [ternaryToIndex('1120')]: [N_HEXAGON],\n  [ternaryToIndex('1201')]: [W_HEXAGON],\n  [ternaryToIndex('2101')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('0121')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('1012')]: [NW_SE_HEXAGON],\n  [ternaryToIndex('1210')]: [NW_SE_HEXAGON],\n  [ternaryToIndex('0101')]: {\n    0: [SW_TRIANGLE, NE_TRIANGLE],\n    1: [SW_NE_HEXAGON],\n    2: [SW_NE_HEXAGON]\n  },\n  [ternaryToIndex('1010')]: {\n    0: [NW_TRIANGLE, SE_TRIANGLE],\n    1: [NW_SE_HEXAGON],\n    2: [NW_SE_HEXAGON]\n  },\n  [ternaryToIndex('2121')]: {\n    0: [SW_NE_HEXAGON],\n    1: [SW_NE_HEXAGON],\n    2: [SW_TRIANGLE, NE_TRIANGLE]\n  },\n  [ternaryToIndex('1212')]: {\n    0: [NW_SE_HEXAGON],\n    1: [NW_SE_HEXAGON],\n    2: [NW_TRIANGLE, SE_TRIANGLE]\n  },\n  [ternaryToIndex('2120')]: {\n    0: [NE_HEPTAGON],\n    1: [NE_HEPTAGON],\n    2: [SW_TRAPEZOID, NE_TRIANGLE]\n  },\n  [ternaryToIndex('2021')]: {\n    0: [SW_HEPTAGON],\n    1: [SW_HEPTAGON],\n    2: [SW_TRIANGLE, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('1202')]: {\n    0: [NW_HEPTAGON],\n    1: [NW_HEPTAGON],\n    2: [NW_TRIANGLE, SE_TRAPEZOID]\n  },\n  [ternaryToIndex('0212')]: {\n    0: [SE_HEPTAGON],\n    1: [SE_HEPTAGON],\n    2: [SE_TRIANGLE, NW_TRAPEZOID]\n  },\n  [ternaryToIndex('0102')]: {\n    0: [SW_TRAPEZOID, NE_TRIANGLE],\n    1: [NE_HEPTAGON],\n    2: [NE_HEPTAGON]\n  },\n  [ternaryToIndex('0201')]: {\n    0: [SW_TRIANGLE, NE_TRAPEZOID],\n    1: [SW_HEPTAGON],\n    2: [SW_HEPTAGON]\n  },\n  [ternaryToIndex('1020')]: {\n    0: [NW_TRIANGLE, SE_TRAPEZOID],\n    1: [NW_HEPTAGON],\n    2: [NW_HEPTAGON]\n  },\n  [ternaryToIndex('2010')]: {\n    0: [SE_TRIANGLE, NW_TRAPEZOID],\n    1: [SE_HEPTAGON],\n    2: [SE_HEPTAGON]\n  },\n  [ternaryToIndex('2020')]: {\n    0: [NW_TRAPEZOID, SE_TRAPEZOID],\n    1: [OCTAGON],\n    2: [SW_TRAPEZOID, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('0202')]: {\n    0: [NE_TRAPEZOID, SW_TRAPEZOID],\n    1: [OCTAGON],\n    2: [NW_TRAPEZOID, SE_TRAPEZOID]\n  }\n};","map":{"version":3,"names":["HALF","ONE6TH","OFFSET","N","E","S","W","NE","NW","SE","SW","SW_TRIANGLE","SE_TRIANGLE","NE_TRIANGLE","NW_TRIANGLE","SW_TRAPEZOID","SE_TRAPEZOID","NE_TRAPEZOID","NW_TRAPEZOID","S_RECTANGLE","E_RECTANGLE","N_RECTANGLE","W_RECTANGLE","EW_RECTANGEL","SN_RECTANGEL","SQUARE","SW_PENTAGON","SE_PENTAGON","NE_PENTAGON","NW_PENTAGON","NW_N_PENTAGON","NE_E_PENTAGON","SE_S_PENTAGON","SW_W_PENTAGON","NW_W_PENTAGON","NE_N_PENTAGON","SE_E_PENTAGON","SW_S_PENTAGON","S_HEXAGON","E_HEXAGON","N_HEXAGON","W_HEXAGON","SW_NE_HEXAGON","NW_SE_HEXAGON","NE_HEPTAGON","SW_HEPTAGON","NW_HEPTAGON","SE_HEPTAGON","OCTAGON","ISOLINES_CODE_OFFSET_MAP","ternaryToIndex","ternary","parseInt","ISOBANDS_CODE_OFFSET_MAP"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/contour-layer/marching-squares-codes.ts"],"sourcesContent":["// Code to Offsets Map needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n\n// Table to map code to the intersection offsets\n// All offsets are relative to the center of marching cell (which is top right corner of grid-cell, and center of marching-square)\nconst HALF = 0.5;\nconst ONE6TH = 1 / 6;\nconst OFFSET = {\n  N: [0, HALF], // NORTH\n  E: [HALF, 0], // EAST\n  S: [0, -HALF], // SOUTH\n  W: [-HALF, 0], // WEST\n\n  // CORNERS\n  NE: [HALF, HALF],\n  NW: [-HALF, HALF],\n  SE: [HALF, -HALF],\n  SW: [-HALF, -HALF]\n};\n\n// NOTE: vertices are ordered in CCW direction, starting from NW corner\n\n// Triangles\nconst SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];\nconst SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];\nconst NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];\n\n// Trapezoids\nconst SW_TRAPEZOID = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF]\n];\nconst SE_TRAPEZOID = [\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH]\n];\nconst NE_TRAPEZOID = [\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\nconst NW_TRAPEZOID = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Rectangles\nconst S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];\nconst E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];\nconst W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];\nconst EW_RECTANGEL = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH]\n];\nconst SN_RECTANGEL = [\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Square\nconst SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];\n\n// Pentagons\nconst SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];\nconst SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];\nconst NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];\n\nconst NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];\nconst SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];\n\nconst NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];\nconst NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];\n\n// Hexagon\nconst S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];\nconst W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];\n\n// Heptagon (7-sided)\nconst NE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  OFFSET.E,\n  OFFSET.NE,\n  OFFSET.N\n];\nconst SW_HEPTAGON = [\n  OFFSET.W,\n  OFFSET.SW,\n  OFFSET.S,\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\nconst NW_HEPTAGON = [\n  OFFSET.NW,\n  OFFSET.W,\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  OFFSET.N\n];\nconst SE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  OFFSET.S,\n  OFFSET.SE,\n  OFFSET.E,\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Octagon\nconst OCTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Note: above wiki page invertes white/black dots for generating the code, we don't\nexport const ISOLINES_CODE_OFFSET_MAP = {\n  // key is equal to the code of 4 vertices (invert the code specified in wiki)\n  // value can be an array or an Object\n  // Array : [line] or [line, line], where each line is [start-point, end-point], and each point is [x, y]\n  // Object : to handle saddle cases, whos output depends on mean value of all 4 corners\n  //  key: code of mean value (0 or 1)\n  //  value: Array , as above defines one or two line segments\n  0: [],\n  1: [[OFFSET.W, OFFSET.S]],\n  2: [[OFFSET.S, OFFSET.E]],\n  3: [[OFFSET.W, OFFSET.E]],\n  4: [[OFFSET.N, OFFSET.E]],\n  5: {\n    0: [\n      [OFFSET.W, OFFSET.S],\n      [OFFSET.N, OFFSET.E]\n    ],\n    1: [\n      [OFFSET.W, OFFSET.N],\n      [OFFSET.S, OFFSET.E]\n    ]\n  },\n  6: [[OFFSET.N, OFFSET.S]],\n  7: [[OFFSET.W, OFFSET.N]],\n  8: [[OFFSET.W, OFFSET.N]],\n  9: [[OFFSET.N, OFFSET.S]],\n  10: {\n    0: [\n      [OFFSET.W, OFFSET.N],\n      [OFFSET.S, OFFSET.E]\n    ],\n    1: [\n      [OFFSET.W, OFFSET.S],\n      [OFFSET.N, OFFSET.E]\n    ]\n  },\n  11: [[OFFSET.N, OFFSET.E]],\n  12: [[OFFSET.W, OFFSET.E]],\n  13: [[OFFSET.S, OFFSET.E]],\n  14: [[OFFSET.W, OFFSET.S]],\n  15: []\n};\n\nfunction ternaryToIndex(ternary) {\n  return parseInt(ternary, 4);\n}\n\nexport const ISOBANDS_CODE_OFFSET_MAP = {\n  // Below list of cases, follow the same order as in above mentioned wiki page.\n  // Each case has its code on first commented line // T,TR,R,C\n  // where T: Top, TR: Top-right, R: Right and C: current, each will be either 0, 1 or 2\n  // final code is binary representation of above code , where takes 2 digits\n  // for example:  code 2-2-2-1 => 10-10-10-01 => 10101001 => 169\n\n  // no contours\n  [ternaryToIndex('0000')]: [],\n  [ternaryToIndex('2222')]: [],\n\n  // single triangle\n  [ternaryToIndex('2221')]: [SW_TRIANGLE],\n  [ternaryToIndex('2212')]: [SE_TRIANGLE],\n  [ternaryToIndex('2122')]: [NE_TRIANGLE],\n  [ternaryToIndex('1222')]: [NW_TRIANGLE],\n  [ternaryToIndex('0001')]: [SW_TRIANGLE],\n  [ternaryToIndex('0010')]: [SE_TRIANGLE],\n  [ternaryToIndex('0100')]: [NE_TRIANGLE],\n  [ternaryToIndex('1000')]: [NW_TRIANGLE],\n\n  // single trapezoid\n  [ternaryToIndex('2220')]: [SW_TRAPEZOID],\n  [ternaryToIndex('2202')]: [SE_TRAPEZOID],\n  [ternaryToIndex('2022')]: [NE_TRAPEZOID],\n  [ternaryToIndex('0222')]: [NW_TRAPEZOID],\n  [ternaryToIndex('0002')]: [SW_TRAPEZOID],\n  [ternaryToIndex('0020')]: [SE_TRAPEZOID],\n  [ternaryToIndex('0200')]: [NE_TRAPEZOID],\n  [ternaryToIndex('2000')]: [NW_TRAPEZOID],\n\n  // single rectangle\n  [ternaryToIndex('0011')]: [S_RECTANGLE],\n  [ternaryToIndex('0110')]: [E_RECTANGLE],\n  [ternaryToIndex('1100')]: [N_RECTANGLE],\n  [ternaryToIndex('1001')]: [W_RECTANGLE],\n  [ternaryToIndex('2211')]: [S_RECTANGLE],\n  [ternaryToIndex('2112')]: [E_RECTANGLE],\n  [ternaryToIndex('1122')]: [N_RECTANGLE],\n  [ternaryToIndex('1221')]: [W_RECTANGLE],\n  [ternaryToIndex('2200')]: [EW_RECTANGEL],\n  [ternaryToIndex('2002')]: [SN_RECTANGEL],\n  [ternaryToIndex('0022')]: [EW_RECTANGEL],\n  [ternaryToIndex('0220')]: [SN_RECTANGEL],\n\n  // single square\n  // 1111\n  [ternaryToIndex('1111')]: [SQUARE],\n\n  // single pentagon\n  [ternaryToIndex('1211')]: [SW_PENTAGON],\n  [ternaryToIndex('2111')]: [SE_PENTAGON],\n  [ternaryToIndex('1112')]: [NE_PENTAGON],\n  [ternaryToIndex('1121')]: [NW_PENTAGON],\n  [ternaryToIndex('1011')]: [SW_PENTAGON],\n  [ternaryToIndex('0111')]: [SE_PENTAGON],\n  [ternaryToIndex('1110')]: [NE_PENTAGON],\n  [ternaryToIndex('1101')]: [NW_PENTAGON],\n  [ternaryToIndex('1200')]: [NW_N_PENTAGON],\n  [ternaryToIndex('0120')]: [NE_E_PENTAGON],\n  [ternaryToIndex('0012')]: [SE_S_PENTAGON],\n  [ternaryToIndex('2001')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1022')]: [NW_N_PENTAGON],\n  [ternaryToIndex('2102')]: [NE_E_PENTAGON],\n  [ternaryToIndex('2210')]: [SE_S_PENTAGON],\n  [ternaryToIndex('0221')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1002')]: [NW_W_PENTAGON],\n  [ternaryToIndex('2100')]: [NE_N_PENTAGON],\n  [ternaryToIndex('0210')]: [SE_E_PENTAGON],\n  [ternaryToIndex('0021')]: [SW_S_PENTAGON],\n  [ternaryToIndex('1220')]: [NW_W_PENTAGON],\n  [ternaryToIndex('0122')]: [NE_N_PENTAGON],\n  [ternaryToIndex('2012')]: [SE_E_PENTAGON],\n  [ternaryToIndex('2201')]: [SW_S_PENTAGON],\n\n  // single hexagon\n  [ternaryToIndex('0211')]: [S_HEXAGON],\n  [ternaryToIndex('2110')]: [E_HEXAGON],\n  [ternaryToIndex('1102')]: [N_HEXAGON],\n  [ternaryToIndex('1021')]: [W_HEXAGON],\n  [ternaryToIndex('2011')]: [S_HEXAGON],\n  [ternaryToIndex('0112')]: [E_HEXAGON],\n  [ternaryToIndex('1120')]: [N_HEXAGON],\n  [ternaryToIndex('1201')]: [W_HEXAGON],\n  [ternaryToIndex('2101')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('0121')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('1012')]: [NW_SE_HEXAGON],\n  [ternaryToIndex('1210')]: [NW_SE_HEXAGON],\n\n  // 6-sided polygons based on mean weight\n  // NOTE: merges mean value codes for extreme changes (as per above Wiki doc)\n  [ternaryToIndex('0101')]: {\n    0: [SW_TRIANGLE, NE_TRIANGLE],\n    1: [SW_NE_HEXAGON],\n    2: [SW_NE_HEXAGON]\n  },\n  [ternaryToIndex('1010')]: {\n    0: [NW_TRIANGLE, SE_TRIANGLE],\n    1: [NW_SE_HEXAGON],\n    2: [NW_SE_HEXAGON]\n  },\n  [ternaryToIndex('2121')]: {\n    0: [SW_NE_HEXAGON],\n    1: [SW_NE_HEXAGON],\n    2: [SW_TRIANGLE, NE_TRIANGLE]\n  },\n  [ternaryToIndex('1212')]: {\n    0: [NW_SE_HEXAGON],\n    1: [NW_SE_HEXAGON],\n    2: [NW_TRIANGLE, SE_TRIANGLE]\n  },\n\n  // 7-sided polygons based on mean weight\n  [ternaryToIndex('2120')]: {\n    0: [NE_HEPTAGON],\n    1: [NE_HEPTAGON],\n    2: [SW_TRAPEZOID, NE_TRIANGLE]\n  },\n  [ternaryToIndex('2021')]: {\n    0: [SW_HEPTAGON],\n    1: [SW_HEPTAGON],\n    2: [SW_TRIANGLE, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('1202')]: {\n    0: [NW_HEPTAGON],\n    1: [NW_HEPTAGON],\n    2: [NW_TRIANGLE, SE_TRAPEZOID]\n  },\n  [ternaryToIndex('0212')]: {\n    0: [SE_HEPTAGON],\n    1: [SE_HEPTAGON],\n    2: [SE_TRIANGLE, NW_TRAPEZOID]\n  },\n  [ternaryToIndex('0102')]: {\n    0: [SW_TRAPEZOID, NE_TRIANGLE],\n    1: [NE_HEPTAGON],\n    2: [NE_HEPTAGON]\n  },\n  [ternaryToIndex('0201')]: {\n    0: [SW_TRIANGLE, NE_TRAPEZOID],\n    1: [SW_HEPTAGON],\n    2: [SW_HEPTAGON]\n  },\n  [ternaryToIndex('1020')]: {\n    0: [NW_TRIANGLE, SE_TRAPEZOID],\n    1: [NW_HEPTAGON],\n    2: [NW_HEPTAGON]\n  },\n  [ternaryToIndex('2010')]: {\n    0: [SE_TRIANGLE, NW_TRAPEZOID],\n    1: [SE_HEPTAGON],\n    2: [SE_HEPTAGON]\n  },\n\n  // 8-sided polygons based on mean weight\n  [ternaryToIndex('2020')]: {\n    0: [NW_TRAPEZOID, SE_TRAPEZOID],\n    1: [OCTAGON],\n    2: [SW_TRAPEZOID, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('0202')]: {\n    0: [NE_TRAPEZOID, SW_TRAPEZOID],\n    1: [OCTAGON],\n    2: [NW_TRAPEZOID, SE_TRAPEZOID]\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}