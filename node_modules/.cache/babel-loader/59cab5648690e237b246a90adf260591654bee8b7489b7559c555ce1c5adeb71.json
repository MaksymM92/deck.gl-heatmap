{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { stubRemovedMethods } from '../utils/stub-methods';\nconst ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\nconst DEPRECATIONS_V6 = ['setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues', 'setDivisor', 'enable', 'disable'];\nexport default class VertexArray {\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = opts.id || opts.program && opts.program.id;\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null;\n    this.attributes = {};\n    this.vertexArrayObject = new VertexArrayObject(gl);\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    this.vertexArrayObject.delete();\n  }\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n  reset() {\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {\n      MAX_ATTRIBUTES\n    } = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n    this.drawParams = null;\n    return this;\n  }\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n  getDrawParams() {\n    this.drawParams = this.drawParams || this._updateDrawParams();\n    return this.drawParams;\n  }\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      this.gl.bindBuffer(34962, null);\n    });\n    return this;\n  }\n  setElementBuffer() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.elements = elementBuffer;\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    return this;\n  }\n  setBuffer(locationOrName, buffer) {\n    let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (buffer.target === 34963) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n    const {\n      location,\n      accessor\n    } = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor);\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n    return this;\n  }\n  setConstant(locationOrName, arrayValue) {\n    let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      location,\n      accessor\n    } = this._resolveLocationAndAccessor(locationOrName, arrayValue, Object.assign({\n      size: arrayValue.length\n    }, appAccessor));\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.enable(location, false);\n    }\n    return this;\n  }\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n      this.buffer = this.buffer || new Buffer(this.gl, {\n        accessor: {\n          size: 4\n        }\n      });\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(34962, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n    this.vertexArrayObject.bind(() => {\n      this._setConstantAttributes(vertexCount, instanceCount);\n      value = func();\n    });\n    return value;\n  }\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n    const {\n      location,\n      name\n    } = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => \"unused value \".concat(locationOrName, \" in \").concat(this.id))();\n      return INVALID_RESULT;\n    }\n    const accessInfo = this._getAttributeInfo(name || location);\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(accessInfo.accessor, currentAccessor, valueAccessor, appAccessor);\n    const {\n      size,\n      type\n    } = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n    return {\n      location,\n      accessor\n    };\n  }\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {\n        location\n      };\n    }\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n    return {\n      location: -1\n    };\n  }\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n  _setConstantAttributes(vertexCount, instanceCount) {\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {\n      constantAttributeZero: true\n    })) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n    if (this.elements) {\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n    return drawParams;\n  }\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n    if (!value) {\n      return;\n    }\n    const {\n      divisor\n    } = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n    if (value instanceof Buffer) {\n      const buffer = value;\n      if (isInstanced) {\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n  setElements() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}","map":{"version":3,"names":["log","Accessor","Buffer","VertexArrayObject","assert","stubRemovedMethods","ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","constructor","gl","opts","arguments","length","undefined","id","program","configuration","elements","elementsAccessor","values","accessors","unused","drawParams","buffer","attributes","vertexArrayObject","initialize","Object","seal","delete","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","setElementBuffer","clearDrawParams","getDrawParams","_updateDrawParams","assign","bind","locationOrName","value","_setAttribute","bindBuffer","elementBuffer","accessor","setBuffer","appAccessor","target","location","_resolveLocationAndAccessor","setConstant","arrayValue","size","_normalizeConstantArrayValue","enable","unbindBuffers","disableVertexAttribArray","handle","vertexAttribPointer","bindBuffers","bindForDraw","vertexCount","instanceCount","func","_setConstantAttributes","valueAccessor","INVALID_RESULT","name","_getAttributeIndex","Number","isFinite","once","concat","accessInfo","_getAttributeInfo","currentAccessor","resolve","type","attributeName","getAttributeInfo","multiLocation","exec","locationOffset","getAttributeLocation","isArray","ArrayBuffer","isView","constant","Error","elementCount","Math","max","_setConstantAttributeZero","_setConstantAttribute","isSupported","constantAttributeZero","getConstantBuffer","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","indexOffset","offset","divisor","getVertexCount","min","setElements","deprecated"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/vertex-array.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {assert} from '../utils/assert';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = new VertexArrayObject(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    return this.drawParams;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(\n      accessInfo.accessor,\n      currentAccessor,\n      valueAccessor,\n      appAccessor\n    );\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"mappings":"AACA,SAAQA,GAAR,QAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,SAAQC,MAAR,QAAqB,iBAArB;AACA,SAAQC,kBAAR,QAAiC,uBAAjC;AAEA,MAAMC,kBAAkB,GACtB,yEADF;AAMA,MAAMC,+BAA+B,GAAG,2BAAxC;AAEA,MAAMC,eAAe,GAAG,CACtB,YADsB,EAEtB,YAFsB,EAGtB,eAHsB,EAItB,cAJsB,EAKtB,kBALsB,EAMtB,YANsB,EAOtB,QAPsB,EAQtB,SARsB,CAAxB;AAWA,eAAe,MAAMC,WAAN,CAAkB;EAC/BC,WAAWA,CAACC,EAAD,EAAgB;IAAA,IAAXC,IAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAEzB,MAAMG,EAAE,GAAGJ,IAAI,CAACI,EAAL,IAAYJ,IAAI,CAACK,OAAL,IAAgBL,IAAI,CAACK,OAAL,CAAaD,EAApD;IAGA,KAAKA,EAAL,GAAUA,EAAV;IACA,KAAKL,EAAL,GAAUA,EAAV;IACA,KAAKO,aAAL,GAAqB,IAArB;IAGA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,gBAAL,GAAwB,IAAxB;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,UAAL,GAAkB,IAAlB;IACA,KAAKC,MAAL,GAAc,IAAd;IAEA,KAAKC,UAAL,GAAkB,EAAlB;IAEA,KAAKC,iBAAL,GAAyB,IAAIxB,iBAAJ,CAAsBQ,EAAtB,CAAzB;IAGAN,kBAAkB,CAAC,IAAD,EAAO,aAAP,EAAsB,MAAtB,EAA8BG,eAA9B,CAAlB;IAEA,KAAKoB,UAAL,CAAgBhB,IAAhB;IACAiB,MAAM,CAACC,IAAP,CAAY,IAAZ;EACD;EAEDC,MAAMA,CAAA,EAAG;IACP,IAAI,KAAKN,MAAT,EAAiB;MACf,KAAKA,MAAL,CAAYM,MAAZ;IACD;IAED,KAAKJ,iBAAL,CAAuBI,MAAvB;EACD;EAEDH,UAAUA,CAAA,EAAa;IAAA,IAAZI,KAAY,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACrB,KAAKoB,KAAL;IACA,KAAKf,aAAL,GAAqB,IAArB;IACA,KAAKgB,SAAL,GAAiB,KAAjB;IACA,OAAO,KAAKC,QAAL,CAAcH,KAAd,CAAP;EACD;EAGDC,KAAKA,CAAA,EAAG;IAGN,KAAKd,QAAL,GAAgB,IAAhB;IACA,KAAKC,gBAAL,GAAwB,IAAxB;IACA,MAAM;MAACgB;IAAD,IAAmB,KAAKT,iBAA9B;IACA,KAAKN,MAAL,GAAc,IAAIgB,KAAJ,CAAUD,cAAV,EAA0BE,IAA1B,CAA+B,IAA/B,CAAd;IACA,KAAKhB,SAAL,GAAiB,IAAIe,KAAJ,CAAUD,cAAV,EAA0BE,IAA1B,CAA+B,IAA/B,CAAjB;IACA,KAAKf,MAAL,GAAc,EAAd;IAGA,KAAKC,UAAL,GAAkB,IAAlB;IAEA,OAAO,IAAP;EACD;EAEDW,QAAQA,CAACH,KAAD,EAAQ;IACd,IAAI,aAAaA,KAAjB,EAAwB;MACtB,KAAKd,aAAL,GAAqBc,KAAK,CAACf,OAAN,IAAiBe,KAAK,CAACf,OAAN,CAAcC,aAApD;IACD;IACD,IAAI,mBAAmBc,KAAvB,EAA8B;MAC5B,KAAKd,aAAL,GAAqBc,KAAK,CAACd,aAA3B;IACD;IACD,IAAI,gBAAgBc,KAApB,EAA2B;MACzB,KAAKO,aAAL,CAAmBP,KAAK,CAACN,UAAzB;IACD;IACD,IAAI,cAAcM,KAAlB,EAAyB;MACvB,KAAKQ,gBAAL,CAAsBR,KAAK,CAACb,QAA5B;IACD;IACD,IAAI,eAAea,KAAnB,EAA0B;MACxBA,KAAK,GAAGA,KAAK,CAACE,SAAd;IACD;IACD,OAAO,IAAP;EACD;EAGDO,eAAeA,CAAA,EAAG;IAChB,KAAKjB,UAAL,GAAkB,IAAlB;EACD;EAEDkB,aAAaA,CAAA,EAAG;IAEd,KAAKlB,UAAL,GAAkB,KAAKA,UAAL,IAAmB,KAAKmB,iBAAL,EAArC;IAEA,OAAO,KAAKnB,UAAZ;EACD;EASDe,aAAaA,CAACb,UAAD,EAAa;IACxBG,MAAM,CAACe,MAAP,CAAc,KAAKlB,UAAnB,EAA+BA,UAA/B;IACA,KAAKC,iBAAL,CAAuBkB,IAAvB,CAA4B,MAAM;MAChC,KAAK,MAAMC,cAAX,IAA6BpB,UAA7B,EAAyC;QACvC,MAAMqB,KAAK,GAAGrB,UAAU,CAACoB,cAAD,CAAxB;QACA,KAAKE,aAAL,CAAmBF,cAAnB,EAAmCC,KAAnC;MACD;MAED,KAAKpC,EAAL,CAAQsC,UAAR,QAAoC,IAApC;IACD,CAPD;IASA,OAAO,IAAP;EACD;EAIDT,gBAAgBA,CAAA,EAAsC;IAAA,IAArCU,aAAqC,GAAArC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAArB,IAAqB;IAAA,IAAfsC,QAAe,GAAAtC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACpD,KAAKM,QAAL,GAAgB+B,aAAhB;IACA,KAAK9B,gBAAL,GAAwB+B,QAAxB;IACA,KAAKV,eAAL;IACA,KAAKd,iBAAL,CAAuBa,gBAAvB,CAAwCU,aAAxC,EAAuDC,QAAvD;IAEA,OAAO,IAAP;EACD;EAGDC,SAASA,CAACN,cAAD,EAAiBrB,MAAjB,EAA2C;IAAA,IAAlB4B,WAAkB,GAAAxC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAElD,IAAIY,MAAM,CAAC6B,MAAP,UAAJ,EAA+C;MAC7C,OAAO,KAAKd,gBAAL,CAAsBf,MAAtB,EAA8B4B,WAA9B,CAAP;IACD;IAED,MAAM;MAACE,QAAD;MAAWJ;IAAX,IAAuB,KAAKK,2BAAL,CAC3BV,cAD2B,EAE3BrB,MAF2B,EAG3BA,MAAM,CAAC0B,QAHoB,EAI3BE,WAJ2B,CAA7B;IAOA,IAAIE,QAAQ,IAAI,CAAhB,EAAmB;MACjB,KAAKlC,MAAL,CAAYkC,QAAZ,IAAwB9B,MAAxB;MACA,KAAKH,SAAL,CAAeiC,QAAf,IAA2BJ,QAA3B;MACA,KAAKV,eAAL;MACA,KAAKd,iBAAL,CAAuByB,SAAvB,CAAiCG,QAAjC,EAA2C9B,MAA3C,EAAmD0B,QAAnD;IACD;IAED,OAAO,IAAP;EACD;EAGDM,WAAWA,CAACX,cAAD,EAAiBY,UAAjB,EAA+C;IAAA,IAAlBL,WAAkB,GAAAxC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACxD,MAAM;MAAC0C,QAAD;MAAWJ;IAAX,IAAuB,KAAKK,2BAAL,CAC3BV,cAD2B,EAE3BY,UAF2B,EAK3B7B,MAAM,CAACe,MAAP,CAAc;MAACe,IAAI,EAAED,UAAU,CAAC5C;IAAlB,CAAd,EAAyCuC,WAAzC,CAL2B,CAA7B;IAQA,IAAIE,QAAQ,IAAI,CAAhB,EAAmB;MACjBG,UAAU,GAAG,KAAK/B,iBAAL,CAAuBiC,4BAAvB,CAAoDF,UAApD,CAAb;MAEA,KAAKrC,MAAL,CAAYkC,QAAZ,IAAwBG,UAAxB;MACA,KAAKpC,SAAL,CAAeiC,QAAf,IAA2BJ,QAA3B;MACA,KAAKV,eAAL;MAMA,KAAKd,iBAAL,CAAuBkC,MAAvB,CAA8BN,QAA9B,EAAwC,KAAxC;IACD;IAED,OAAO,IAAP;EACD;EAIDO,aAAaA,CAAA,EAAG;IACd,KAAKnC,iBAAL,CAAuBkB,IAAvB,CAA4B,MAAM;MAChC,IAAI,KAAK1B,QAAT,EAAmB;QACjB,KAAKQ,iBAAL,CAAuBa,gBAAvB,CAAwC,IAAxC;MACD;MAMD,KAAKf,MAAL,GAAc,KAAKA,MAAL,IAAe,IAAIvB,MAAJ,CAAW,KAAKS,EAAhB,EAAoB;QAACwC,QAAQ,EAAE;UAACQ,IAAI,EAAE;QAAP;MAAX,CAApB,CAA7B;MAEA,KAAK,IAAIJ,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,KAAK5B,iBAAL,CAAuBS,cAAzD,EAAyEmB,QAAQ,EAAjF,EAAqF;QACnF,IAAI,KAAKlC,MAAL,CAAYkC,QAAZ,aAAiCrD,MAArC,EAA6C;UAC3C,KAAKS,EAAL,CAAQoD,wBAAR,CAAiCR,QAAjC;UACA,KAAK5C,EAAL,CAAQsC,UAAR,QAAoC,KAAKxB,MAAL,CAAYuC,MAAhD;UACA,KAAKrD,EAAL,CAAQsD,mBAAR,CAA4BV,QAA5B,EAAsC,CAAtC,QAAmD,KAAnD,EAA0D,CAA1D,EAA6D,CAA7D;QACD;MACF;IACF,CAlBD;IAmBA,OAAO,IAAP;EACD;EAIDW,WAAWA,CAAA,EAAG;IACZ,KAAKvC,iBAAL,CAAuBkB,IAAvB,CAA4B,MAAM;MAChC,IAAI,KAAK1B,QAAT,EAAmB;QACjB,KAAKqB,gBAAL,CAAsB,KAAKrB,QAA3B;MACD;MAED,KAAK,IAAIoC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,KAAK5B,iBAAL,CAAuBS,cAAzD,EAAyEmB,QAAQ,EAAjF,EAAqF;QACnF,MAAM9B,MAAM,GAAG,KAAKJ,MAAL,CAAYkC,QAAZ,CAAf;QACA,IAAI9B,MAAM,YAAYvB,MAAtB,EAA8B;UAC5B,KAAKkD,SAAL,CAAeG,QAAf,EAAyB9B,MAAzB;QACD;MACF;IACF,CAXD;IAYA,OAAO,IAAP;EACD;EAMD0C,WAAWA,CAACC,WAAD,EAAcC,aAAd,EAA6BC,IAA7B,EAAmC;IAC5C,IAAIvB,KAAJ;IAEA,KAAKpB,iBAAL,CAAuBkB,IAAvB,CAA4B,MAAM;MAGhC,KAAK0B,sBAAL,CAA4BH,WAA5B,EAAyCC,aAAzC;MAEAtB,KAAK,GAAGuB,IAAI,EAAZ;IACD,CAND;IAQA,OAAOvB,KAAP;EACD;EAKDS,2BAA2BA,CAACV,cAAD,EAAiBC,KAAjB,EAAwByB,aAAxB,EAAuCnB,WAAvC,EAAoD;IAC7E,MAAMoB,cAAc,GAAG;MACrBlB,QAAQ,EAAE,CAAC,CADU;MAErBJ,QAAQ,EAAE;IAFW,CAAvB;IAKA,MAAM;MAACI,QAAD;MAAWmB;IAAX,IAAmB,KAAKC,kBAAL,CAAwB7B,cAAxB,CAAzB;IACA,IAAI,CAAC8B,MAAM,CAACC,QAAP,CAAgBtB,QAAhB,CAAD,IAA8BA,QAAQ,GAAG,CAA7C,EAAgD;MAC9C,KAAKhC,MAAL,CAAYuB,cAAZ,IAA8BC,KAA9B;MACA/C,GAAG,CAAC8E,IAAJ,CAAS,CAAT,EAAY,sBAAAC,MAAA,CAAsBjC,cAAtB,UAAAiC,MAAA,CAA2C,KAAK/D,EAAhD,CAAZ;MACA,OAAOyD,cAAP;IACD;IAED,MAAMO,UAAU,GAAG,KAAKC,iBAAL,CAAuBP,IAAI,IAAInB,QAA/B,CAAnB;IAIA,IAAI,CAACyB,UAAL,EAAiB;MACf,OAAOP,cAAP;IACD;IAGD,MAAMS,eAAe,GAAG,KAAK5D,SAAL,CAAeiC,QAAf,KAA4B,EAApD;IACA,MAAMJ,QAAQ,GAAGlD,QAAQ,CAACkF,OAAT,CACfH,UAAU,CAAC7B,QADI,EAEf+B,eAFe,EAGfV,aAHe,EAIfnB,WAJe,CAAjB;IAOA,MAAM;MAACM,IAAD;MAAOyB;IAAP,IAAejC,QAArB;IACA/C,MAAM,CAACwE,MAAM,CAACC,QAAP,CAAgBlB,IAAhB,KAAyBiB,MAAM,CAACC,QAAP,CAAgBO,IAAhB,CAA1B,CAAN;IAEA,OAAO;MAAC7B,QAAD;MAAWJ;IAAX,CAAP;EACD;EAED8B,iBAAiBA,CAACI,aAAD,EAAgB;IAC/B,OAAO,KAAKnE,aAAL,IAAsB,KAAKA,aAAL,CAAmBoE,gBAAnB,CAAoCD,aAApC,CAA7B;EACD;EAEDV,kBAAkBA,CAAC7B,cAAD,EAAiB;IACjC,MAAMS,QAAQ,GAAGqB,MAAM,CAAC9B,cAAD,CAAvB;IACA,IAAI8B,MAAM,CAACC,QAAP,CAAgBtB,QAAhB,CAAJ,EAA+B;MAC7B,OAAO;QAACA;MAAD,CAAP;IACD;IAED,MAAMgC,aAAa,GAAGhF,+BAA+B,CAACiF,IAAhC,CAAqC1C,cAArC,CAAtB;IACA,MAAM4B,IAAI,GAAGa,aAAa,GAAGA,aAAa,CAAC,CAAD,CAAhB,GAAsBzC,cAAhD;IACA,MAAM2C,cAAc,GAAGF,aAAa,GAAGX,MAAM,CAACW,aAAa,CAAC,CAAD,CAAd,CAAT,GAA8B,CAAlE;IAEA,IAAI,KAAKrE,aAAT,EAAwB;MACtB,OAAO;QACLqC,QAAQ,EAAE,KAAKrC,aAAL,CAAmBwE,oBAAnB,CAAwChB,IAAxC,IAAgDe,cADrD;QAELf;MAFK,CAAP;IAID;IAED,OAAO;MAACnB,QAAQ,EAAE,CAAC;IAAZ,CAAP;EACD;EAEDP,aAAaA,CAACF,cAAD,EAAiBC,KAAjB,EAAwB;IACnC,IAAIA,KAAK,YAAY7C,MAArB,EAA6B;MAE3B,KAAKkD,SAAL,CAAeN,cAAf,EAA+BC,KAA/B;IACD,CAHD,MAGO,IAAIV,KAAK,CAACsD,OAAN,CAAc5C,KAAd,KAAwBA,KAAK,CAACjC,MAA9B,IAAwCiC,KAAK,CAAC,CAAD,CAAL,YAAoB7C,MAAhE,EAAwE;MAE7E,MAAMuB,MAAM,GAAGsB,KAAK,CAAC,CAAD,CAApB;MACA,MAAMI,QAAQ,GAAGJ,KAAK,CAAC,CAAD,CAAtB;MACA,KAAKK,SAAL,CAAeN,cAAf,EAA+BrB,MAA/B,EAAuC0B,QAAvC;IACD,CALM,MAKA,IAAIyC,WAAW,CAACC,MAAZ,CAAmB9C,KAAnB,KAA6BV,KAAK,CAACsD,OAAN,CAAc5C,KAAd,CAAjC,EAAuD;MAE5D,MAAM+C,QAAQ,GAAG/C,KAAjB;MACA,KAAKU,WAAL,CAAiBX,cAAjB,EAAiCgD,QAAjC;IACD,CAJM,MAIA,IAAI/C,KAAK,CAACtB,MAAN,YAAwBvB,MAA5B,EAAoC;MAIzC,MAAMiD,QAAQ,GAAGJ,KAAjB;MACA,KAAKK,SAAL,CAAeN,cAAf,EAA+BK,QAAQ,CAAC1B,MAAxC,EAAgD0B,QAAhD;IACD,CANM,MAMA;MACL,MAAM,IAAI4C,KAAJ,CAAUzF,kBAAV,CAAN;IACD;EACF;EAKDiE,sBAAsBA,CAACH,WAAD,EAAcC,aAAd,EAA6B;IAEjD,MAAM2B,YAAY,GAAGC,IAAI,CAACC,GAAL,CAAS9B,WAAW,GAAG,CAAvB,EAA0BC,aAAa,GAAG,CAA1C,CAArB;IACA,IAAIyB,QAAQ,GAAG,KAAKzE,MAAL,CAAY,CAAZ,CAAf;IACA,IAAIuE,WAAW,CAACC,MAAZ,CAAmBC,QAAnB,CAAJ,EAAkC;MAChC,KAAKK,yBAAL,CAA+BL,QAA/B,EAAyCE,YAAzC;IACD;IAED,KAAK,IAAIzC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,KAAK5B,iBAAL,CAAuBS,cAAzD,EAAyEmB,QAAQ,EAAjF,EAAqF;MACnFuC,QAAQ,GAAG,KAAKzE,MAAL,CAAYkC,QAAZ,CAAX;MACA,IAAIqC,WAAW,CAACC,MAAZ,CAAmBC,QAAnB,CAAJ,EAAkC;QAChC,KAAKM,qBAAL,CAA2B7C,QAA3B,EAAqCuC,QAArC;MACD;IACF;EACF;EAEDK,yBAAyBA,CAACL,QAAD,EAAWE,YAAX,EAAyB;IAChD,IAAI7F,iBAAiB,CAACkG,WAAlB,CAA8B,KAAK1F,EAAnC,EAAuC;MAAC2F,qBAAqB,EAAE;IAAxB,CAAvC,CAAJ,EAA2E;MACzE,KAAKF,qBAAL,CAA2B,CAA3B,EAA8BN,QAA9B;MACA;IACD;IAGD,MAAMrE,MAAM,GAAG,KAAKE,iBAAL,CAAuB4E,iBAAvB,CAAyCP,YAAzC,EAAuDF,QAAvD,CAAf;IAGA,KAAKnE,iBAAL,CAAuByB,SAAvB,CAAiC,CAAjC,EAAoC3B,MAApC,EAA4C,KAAKH,SAAL,CAAe,CAAf,CAA5C;EACD;EAED8E,qBAAqBA,CAAC7C,QAAD,EAAWuC,QAAX,EAAqB;IACxC3F,iBAAiB,CAACsD,WAAlB,CAA8B,KAAK9C,EAAnC,EAAuC4C,QAAvC,EAAiDuC,QAAjD;EACD;EAGDnD,iBAAiBA,CAAA,EAAG;IAClB,MAAMnB,UAAU,GAAG;MACjBgF,SAAS,EAAE,KADM;MAEjBC,WAAW,EAAE,KAFI;MAGjBC,UAAU,EAAEC,QAHK;MAIjBvC,WAAW,EAAEuC,QAJI;MAKjBtC,aAAa,EAAEsC;IALE,CAAnB;IAQA,KAAK,IAAIpD,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,KAAK5B,iBAAL,CAAuBS,cAAzD,EAAyEmB,QAAQ,EAAjF,EAAqF;MACnF,KAAKqD,4BAAL,CAAkCpF,UAAlC,EAA8C+B,QAA9C;IACD;IAED,IAAI,KAAKpC,QAAT,EAAmB;MAGjBK,UAAU,CAACwE,YAAX,GAA0B,KAAK7E,QAAL,CAAc0F,eAAd,CAA8B,KAAK1F,QAAL,CAAcgC,QAA5C,CAA1B;MACA3B,UAAU,CAACgF,SAAX,GAAuB,IAAvB;MACAhF,UAAU,CAACsF,SAAX,GAAuB,KAAK1F,gBAAL,CAAsBgE,IAAtB,IAA8B,KAAKjE,QAAL,CAAcgC,QAAd,CAAuBiC,IAA5E;MACA5D,UAAU,CAACuF,WAAX,GAAyB,KAAK3F,gBAAL,CAAsB4F,MAAtB,IAAgC,CAAzD;IACD;IAGD,IAAIxF,UAAU,CAACkF,UAAX,KAA0BC,QAA9B,EAAwC;MACtCnF,UAAU,CAACkF,UAAX,GAAwB,CAAxB;IACD;IACD,IAAIlF,UAAU,CAAC4C,WAAX,KAA2BuC,QAA/B,EAAyC;MACvCnF,UAAU,CAAC4C,WAAX,GAAyB,CAAzB;IACD;IACD,IAAI5C,UAAU,CAAC6C,aAAX,KAA6BsC,QAAjC,EAA2C;MACzCnF,UAAU,CAAC6C,aAAX,GAA2B,CAA3B;IACD;IAED,OAAO7C,UAAP;EACD;EAEDoF,4BAA4BA,CAACpF,UAAD,EAAa+B,QAAb,EAAuB;IACjD,MAAMR,KAAK,GAAG,KAAK1B,MAAL,CAAYkC,QAAZ,CAAd;IACA,MAAMJ,QAAQ,GAAG,KAAK7B,SAAL,CAAeiC,QAAf,CAAjB;IAEA,IAAI,CAACR,KAAL,EAAY;MACV;IACD;IAGD,MAAM;MAACkE;IAAD,IAAY9D,QAAlB;IACA,MAAMsD,WAAW,GAAGQ,OAAO,GAAG,CAA9B;IACAzF,UAAU,CAACiF,WAAX,GAAyBjF,UAAU,CAACiF,WAAX,IAA0BA,WAAnD;IAEA,IAAI1D,KAAK,YAAY7C,MAArB,EAA6B;MAC3B,MAAMuB,MAAM,GAAGsB,KAAf;MAEA,IAAI0D,WAAJ,EAAiB;QAEf,MAAMpC,aAAa,GAAG5C,MAAM,CAACyF,cAAP,CAAsB/D,QAAtB,CAAtB;QACA3B,UAAU,CAAC6C,aAAX,GAA2B4B,IAAI,CAACkB,GAAL,CAAS3F,UAAU,CAAC6C,aAApB,EAAmCA,aAAnC,CAA3B;MACD,CAJD,MAIO;QAEL,MAAMD,WAAW,GAAG3C,MAAM,CAACyF,cAAP,CAAsB/D,QAAtB,CAApB;QACA3B,UAAU,CAAC4C,WAAX,GAAyB6B,IAAI,CAACkB,GAAL,CAAS3F,UAAU,CAAC4C,WAApB,EAAiCA,WAAjC,CAAzB;MACD;IACF;EACF;EAIDgD,WAAWA,CAAA,EAAsC;IAAA,IAArClE,aAAqC,GAAArC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAArB,IAAqB;IAAA,IAAfsC,QAAe,GAAAtC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAC/Cb,GAAG,CAACqH,UAAJ,CAAe,aAAf,EAA8B,kBAA9B;IACA,OAAO,KAAK7E,gBAAL,CAAsBU,aAAtB,EAAqCC,QAArC,CAAP;EACD;AA9a8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}