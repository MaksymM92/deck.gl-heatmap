{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isAsyncIterable } from '../utils/iterable-utils';\nimport { COMPONENT_SYMBOL, PROP_TYPES_SYMBOL, ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from './constants';\nconst EMPTY_PROPS = Object.freeze({});\nexport default class ComponentState {\n  constructor(component) {\n    _defineProperty(this, \"component\", void 0);\n    _defineProperty(this, \"onAsyncPropUpdated\", void 0);\n    _defineProperty(this, \"asyncProps\", void 0);\n    _defineProperty(this, \"oldProps\", void 0);\n    _defineProperty(this, \"oldAsyncProps\", void 0);\n    this.component = component;\n    this.asyncProps = {};\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = null;\n    this.oldAsyncProps = null;\n  }\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp && asyncProp.type && asyncProp.type.release) {\n        asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n      }\n    }\n    this.asyncProps = {};\n    this.component = null;\n    this.resetOldProps();\n  }\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n  }\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component ? this.component.props : null;\n  }\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n  isAsyncPropLoading(propName) {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  reloadAsyncProp(propName, value) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n  setAsyncProps(props) {\n    this.component = props[COMPONENT_SYMBOL] || this.component;\n    const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n    const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n  _fetch(propName, url) {\n    return null;\n  }\n  _onResolve(propName, value) {}\n  _onError(propName, error) {}\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n    if (typeof value === 'string') {\n      value = this._fetch(propName, value);\n    }\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value);\n      return;\n    }\n    this._setPropValue(propName, value);\n  }\n  _freezeAsyncOldProps() {\n    if (!this.oldAsyncProps && this.oldProps) {\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n  _setPropValue(propName, value) {\n    this._freezeAsyncOldProps();\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      value = this._postProcessValue(asyncProp, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.pendingLoadCount++;\n      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n    }\n  }\n  _setAsyncPropValue(propName, value, loadCount) {\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      this._freezeAsyncOldProps();\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      asyncProp.pendingLoadCount++;\n      const loadCount = asyncProp.pendingLoadCount;\n      promise.then(data => {\n        if (!this.component) {\n          return;\n        }\n        data = this._postProcessValue(asyncProp, data);\n        this._setAsyncPropValue(propName, data, loadCount);\n        this._onResolve(propName, data);\n      }).catch(error => {\n        this._onError(propName, error);\n      });\n    }\n  }\n  async _resolveAsyncIterable(propName, iterable) {\n    if (propName !== 'data') {\n      this._setPropValue(propName, iterable);\n      return;\n    }\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      return;\n    }\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n    for await (const chunk of iterable) {\n      if (!this.component) {\n        return;\n      }\n      const {\n        dataTransform\n      } = this.component.props;\n      if (dataTransform) {\n        data = dataTransform(chunk, data);\n      } else {\n        data = data.concat(chunk);\n      }\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{\n          startRow: count,\n          endRow: data.length\n        }]\n      });\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n    this._onResolve(propName, data);\n  }\n  _postProcessValue(asyncProp, value) {\n    const propType = asyncProp.type;\n    if (propType && this.component) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n  _createAsyncPropData(propName, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      const propTypes = this.component && this.component.props[PROP_TYPES_SYMBOL];\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null,\n        resolvedValue: defaultValue,\n        pendingLoadCount: 0,\n        resolvedLoadCount: 0\n      };\n    }\n  }\n}","map":{"version":3,"names":["isAsyncIterable","COMPONENT_SYMBOL","PROP_TYPES_SYMBOL","ASYNC_ORIGINAL_SYMBOL","ASYNC_RESOLVED_SYMBOL","ASYNC_DEFAULTS_SYMBOL","EMPTY_PROPS","Object","freeze","ComponentState","constructor","component","_defineProperty","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","finalize","propName","asyncProp","type","release","resolvedValue","resetOldProps","getOldProps","props","hasAsyncProp","getAsyncProp","isAsyncPropLoading","Boolean","pendingLoadCount","resolvedLoadCount","key","reloadAsyncProp","value","_watchPromise","Promise","resolve","setAsyncProps","resolvedValues","originalValues","defaultValues","_createAsyncPropData","_updateAsyncProp","_fetch","url","_onResolve","_onError","error","_didAsyncInputValueChange","_resolveAsyncIterable","_setPropValue","_freezeAsyncOldProps","create","defineProperty","enumerable","lastValue","_postProcessValue","_setAsyncPropValue","loadCount","undefined","promise","then","data","catch","iterable","count","chunk","dataTransform","concat","startRow","endRow","length","propType","transform","defaultValue","propTypes"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/lifecycle/component-state.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {\n  COMPONENT_SYMBOL,\n  PROP_TYPES_SYMBOL,\n  ASYNC_ORIGINAL_SYMBOL,\n  ASYNC_RESOLVED_SYMBOL,\n  ASYNC_DEFAULTS_SYMBOL\n} from './constants';\nimport type Component from './component';\nimport {PropType} from './prop-types';\n\nconst EMPTY_PROPS = Object.freeze({});\n\n/** Internal state of an async prop */\ntype AsyncPropState = {\n  /** The prop type definition from component.defaultProps, if exists */\n  type: PropType | null;\n  /** Supplied prop value (can be url/promise, not visible to the component) */\n  lastValue: any;\n  /** Resolved prop value (valid data, can be \"shown\" to the component) */\n  resolvedValue: any;\n  /** How many loads have been issued */\n  pendingLoadCount: number;\n  /** Latest resolved load, (earlier loads will be ignored) */\n  resolvedLoadCount: number;\n};\n\nexport default class ComponentState<ComponentT extends Component> {\n  /** The component that this state instance belongs to. `null` if this state has been finalized. */\n  component: ComponentT | null;\n  onAsyncPropUpdated: (propName: string, value: any) => void;\n\n  private asyncProps: Partial<Record<string, AsyncPropState>>;\n  private oldProps: ComponentT['props'] | null;\n  private oldAsyncProps: ComponentT['props'] | null;\n\n  constructor(component: ComponentT) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = null; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp && asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(\n          asyncProp.resolvedValue,\n          asyncProp.type,\n          this.component as Component\n        );\n      }\n    }\n    this.asyncProps = {};\n    this.component = null;\n    this.resetOldProps();\n  }\n\n  /* Layer-facing props API */\n\n  getOldProps(): ComponentT['props'] | typeof EMPTY_PROPS {\n    return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component ? this.component.props : null;\n  }\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName: string): boolean {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName: string): any {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName?: string): boolean {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName: string, value: any) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props: ComponentT['props']) {\n    this.component = (props[COMPONENT_SYMBOL] as ComponentT) || this.component;\n\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n    const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  /* Placeholder methods for subclassing */\n\n  protected _fetch(propName: string, url: string): any {\n    return null;\n  }\n\n  protected _onResolve(propName: string, value: any) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  protected _onError(propName: string, error: Error) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  private _updateAsyncProp(propName: string, value: any) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      value = this._fetch(propName, value);\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  private _freezeAsyncOldProps() {\n    if (!this.oldAsyncProps && this.oldProps) {\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  private _didAsyncInputValueChange(propName: string, value: any): boolean {\n    // @ts-ignore\n    const asyncProp: AsyncPropState = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  private _setPropValue(propName: string, value: any) {\n    // Save the current value before overwriting so that diffProps can access both\n    this._freezeAsyncOldProps();\n\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      value = this._postProcessValue(asyncProp, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.pendingLoadCount++;\n      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n    }\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  private _setAsyncPropValue(propName: string, value: any, loadCount: number) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // Save the current value before overwriting so that diffProps can access both\n      this._freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  private _watchPromise(propName: string, promise: Promise<any>) {\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      asyncProp.pendingLoadCount++;\n      const loadCount = asyncProp.pendingLoadCount;\n      promise\n        .then(data => {\n          if (!this.component) {\n            // This component state has been finalized\n            return;\n          }\n          data = this._postProcessValue(asyncProp, data);\n          this._setAsyncPropValue(propName, data, loadCount);\n          this._onResolve(propName, data);\n        })\n        .catch(error => {\n          this._onError(propName, error);\n        });\n    }\n  }\n\n  private async _resolveAsyncIterable(\n    propName: string,\n    iterable: AsyncIterable<any>\n  ): Promise<void> {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n      return;\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      return;\n    }\n\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data: any[] = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      if (!this.component) {\n        // This component state has been finalized\n        return;\n      }\n\n      // @ts-expect-error (2339) dataTransform is not decared in base component props\n      const {dataTransform} = this.component.props;\n      if (dataTransform) {\n        data = dataTransform(chunk, data) as any[];\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    this._onResolve(propName, data);\n  }\n\n  // Give the app a chance to post process the loaded data\n  private _postProcessValue(asyncProp: AsyncPropState, value: any) {\n    const propType = asyncProp.type;\n    if (propType && this.component) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  private _createAsyncPropData(propName: string, defaultValue: any) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      const propTypes = this.component && this.component.props[PROP_TYPES_SYMBOL];\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null,\n        resolvedValue: defaultValue,\n        pendingLoadCount: 0,\n        resolvedLoadCount: 0\n      };\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}