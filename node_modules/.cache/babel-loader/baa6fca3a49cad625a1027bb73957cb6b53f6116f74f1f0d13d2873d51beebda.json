{"ast":null,"code":"import { isWebGL2, assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport { TEXTURE_FORMATS, DATA_FORMAT_CHANNELS, TYPE_SIZES, isFormatSupported, isLinearFilteringSupported } from './texture-formats';\nimport { assert } from '../utils/assert';\nimport { uid, isPowerOfTwo } from '../utils/utils';\nconst NPOT_MIN_FILTERS = [9729, 9728];\nconst WebGLBuffer = globalThis.WebGLBuffer || function WebGLBuffer() {};\nexport default class Texture extends Resource {\n  get [Symbol.toStringTag]() {\n    return 'Texture';\n  }\n  static isSupported(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      format,\n      linearFiltering\n    } = opts;\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n    } = props;\n    super(gl, {\n      id,\n      handle\n    });\n    this.target = target;\n    this.textureUnit = undefined;\n    this.loaded = false;\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n  toString() {\n    return \"Texture(\".concat(this.id, \",\").concat(this.width, \"x\").concat(this.height, \")\");\n  }\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let data = props.data;\n    if (data instanceof Promise) {\n      data.then(resolvedImageData => this.initialize(Object.assign({}, props, {\n        pixels: resolvedImageData,\n        data: resolvedImageData\n      })));\n      return this;\n    }\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null;\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n    const {\n      pixels = null,\n      format = 6408,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n    if (!data) {\n      data = pixels;\n    }\n    let {\n      width,\n      height,\n      dataFormat,\n      type,\n      compressed = false,\n      mipmaps = true\n    } = props;\n    const {\n      depth = 0\n    } = props;\n    ({\n      width,\n      height,\n      compressed,\n      dataFormat,\n      type\n    } = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(33984 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n    if (mipmaps && this._isNPOT()) {\n      log.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n      mipmaps = false;\n      this._updateForNPOT(parameters);\n    }\n    this.mipmaps = mipmaps;\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n    this.setParameters(parameters);\n    if (recreate) {\n      this.data = data;\n    }\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n    return this;\n  }\n  update() {\n    if (this._video) {\n      const {\n        video,\n        parameters,\n        lastTime\n      } = this._video;\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n  resize(_ref) {\n    let {\n      height,\n      width,\n      mipmaps = false\n    } = _ref;\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n  generateMipmap() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this._isNPOT()) {\n      log.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n      return this;\n    }\n    this.mipmaps = true;\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n    if (!data) {\n      data = pixels;\n    }\n    ({\n      type,\n      dataFormat,\n      compressed,\n      width,\n      height\n    } = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n    const {\n      gl\n    } = this;\n    gl.bindTexture(this.target, this.handle);\n    let dataType = null;\n    ({\n      data,\n      dataType\n    } = this._getDataType({\n      data,\n      compressed\n    }));\n    let gl2;\n    let compressedTextureSize = 0;\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n          break;\n        case 'buffer':\n          gl2 = assertWebGL2Context(gl);\n          gl2.bindBuffer(35052, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(35052, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(target, levelIndex, levelData.format, levelData.width, levelData.height, border, levelData.data);\n            compressedTextureSize += levelData.levelSize;\n          }\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n    if (dataType === 'compressed') {\n      this._trackAllocatedMemory(compressedTextureSize, 'Texture');\n    } else if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n    this.loaded = true;\n    return this;\n  }\n  setSubImageData(_ref2) {\n    let {\n      target = this.target,\n      pixels = null,\n      data = null,\n      x = 0,\n      y = 0,\n      width = this.width,\n      height = this.height,\n      level = 0,\n      format = this.format,\n      type = this.type,\n      dataFormat = this.dataFormat,\n      compressed = false,\n      offset = 0,\n      border = this.border,\n      parameters = {}\n    } = _ref2;\n    ({\n      type,\n      dataFormat,\n      compressed,\n      width,\n      height\n    } = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n    if (!data) {\n      data = pixels;\n    }\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, parameters, () => {\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.bindBuffer(35052, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(35052, null);\n      } else if (isWebGL2(this.gl)) {\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n    this.gl.bindTexture(this.target, null);\n  }\n  copyFramebuffer() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    log.error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n    return null;\n  }\n  getActiveUnit() {\n    return this.gl.getParameter(34016) - 33984;\n  }\n  bind() {\n    let textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n    const {\n      gl\n    } = this;\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(33984 + textureUnit);\n    }\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n  unbind() {\n    let textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n    const {\n      gl\n    } = this;\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(33984 + textureUnit);\n    }\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n  _getDataType(_ref3) {\n    let {\n      data,\n      compressed = false\n    } = _ref3;\n    if (compressed) {\n      return {\n        data,\n        dataType: 'compressed'\n      };\n    }\n    if (data === null) {\n      return {\n        data,\n        dataType: 'null'\n      };\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {\n        data,\n        dataType: 'typed-array'\n      };\n    }\n    if (data instanceof Buffer) {\n      return {\n        data: data.handle,\n        dataType: 'buffer'\n      };\n    }\n    if (data instanceof WebGLBuffer) {\n      return {\n        data,\n        dataType: 'buffer'\n      };\n    }\n    return {\n      data,\n      dataType: 'browser-object'\n    };\n  }\n  _deduceParameters(opts) {\n    const {\n      format,\n      data\n    } = opts;\n    let {\n      width,\n      height,\n      dataFormat,\n      type,\n      compressed\n    } = opts;\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;\n    type = type || textureFormat && textureFormat.types[0];\n    compressed = compressed || textureFormat && textureFormat.compressed;\n    ({\n      width,\n      height\n    } = this._deduceImageSize(data, width, height));\n    return {\n      dataFormat,\n      type,\n      compressed,\n      width,\n      height,\n      format,\n      data\n    };\n  }\n  _deduceImageSize(data, width, height) {\n    let size;\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {\n        width: data.width,\n        height: data.height\n      };\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {\n        width: data.naturalWidth,\n        height: data.naturalHeight\n      };\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {\n        width: data.width,\n        height: data.height\n      };\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {\n        width: data.width,\n        height: data.height\n      };\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {\n        width: data.videoWidth,\n        height: data.videoHeight\n      };\n    } else if (!data) {\n      size = {\n        width: width >= 0 ? width : 1,\n        height: height >= 0 ? height : 1\n      };\n    } else {\n      size = {\n        width,\n        height\n      };\n    }\n    assert(size, 'Could not deduced texture size');\n    assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n    assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n    return size;\n  }\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n  _getParameter(pname) {\n    switch (pname) {\n      case 4096:\n        return this.width;\n      case 4097:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n    param = this._getNPOTParam(pname, param);\n    switch (pname) {\n      case 33082:\n      case 33083:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n      case 4096:\n      case 4097:\n        assert(false);\n        break;\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      return false;\n    }\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case 10241:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            param = 9729;\n          }\n          break;\n        case 10242:\n        case 10243:\n          if (param !== 33071) {\n            param = 33071;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}","map":{"version":3,"names":["isWebGL2","assertWebGL2Context","withParameters","log","Resource","Buffer","TEXTURE_FORMATS","DATA_FORMAT_CHANNELS","TYPE_SIZES","isFormatSupported","isLinearFilteringSupported","assert","uid","isPowerOfTwo","NPOT_MIN_FILTERS","WebGLBuffer","globalThis","Texture","Symbol","toStringTag","isSupported","gl","opts","arguments","length","undefined","format","linearFiltering","supported","constructor","props","id","handle","target","textureUnit","loaded","width","height","depth","type","dataFormat","border","mipmaps","toString","concat","initialize","data","Promise","then","resolvedImageData","Object","assign","pixels","isVideo","HTMLVideoElement","readyState","HAVE_METADATA","_video","addEventListener","recreate","parameters","pixelStore","compressed","_deduceParameters","Number","isFinite","activeTexture","bindTexture","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","video","lastTime","HAVE_CURRENT_DATA","currentTime","update","setSubImageData","resize","_ref","params","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","gl2","compressedTextureSize","texImage2D","bindBuffer","levelIndex","levelData","entries","compressedTexImage2D","levelSize","_trackAllocatedMemory","byteLength","channels","channelSize","_ref2","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","copyFramebuffer","error","getActiveUnit","getParameter","bind","unbind","_ref3","textureFormat","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","videoWidth","videoHeight","_createHandle","createTexture","_deleteHandle","deleteTexture","_getParameter","pname","value","getTexParameter","_setParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/texture.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\nimport {assert} from '../utils/assert';\nimport {uid, isPowerOfTwo} from '../utils/utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = globalThis.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Texture';\n  }\n  static isSupported(gl, opts = {}) {\n    const {format, linearFiltering} = opts;\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    // @ts-ignore\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null; // Declare member before the object is sealed\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type, compressed = false, mipmaps = true} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, compressed, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        // @ts-ignore\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  update() {\n    if (this._video) {\n      const {video, parameters, lastTime} = this._video;\n      // @ts-ignore\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    let gl2;\n\n    let compressedTextureSize = 0;\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          // @ts-ignore\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            // @ts-ignore\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          gl2 = assertWebGL2Context(gl);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(\n              target,\n              levelIndex,\n              levelData.format,\n              levelData.width,\n              levelData.height,\n              border,\n              levelData.data\n            );\n            compressedTextureSize += levelData.levelSize;\n          }\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (dataType === 'compressed') {\n      this._trackAllocatedMemory(compressedTextureSize, 'Texture');\n    } else if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        // const gl2 = assertWebGL2Context(this.gl);\n        // @ts-ignore last offset parameter is ignored under WebGL1\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        const gl2 = assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}