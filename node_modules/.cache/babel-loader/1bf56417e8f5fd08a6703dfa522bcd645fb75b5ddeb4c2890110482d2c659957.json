{"ast":null,"code":"import { COORDINATE_SYSTEM, PROJECTION_MODE } from '../../lib/constants';\nimport project from '../project/project';\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport memoize from '../../utils/memoize';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nconst vs = \"\\nconst int max_lights = 2;\\nuniform mat4 shadow_uViewProjectionMatrices[max_lights];\\nuniform vec4 shadow_uProjectCenters[max_lights];\\nuniform bool shadow_uDrawShadowMap;\\nuniform bool shadow_uUseShadowMap;\\nuniform int shadow_uLightId;\\nuniform float shadow_uLightCount;\\n\\nvarying vec3 shadow_vPosition[max_lights];\\n\\nvec4 shadow_setVertexPosition(vec4 position_commonspace) {\\n  if (shadow_uDrawShadowMap) {\\n    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);\\n  }\\n  if (shadow_uUseShadowMap) {\\n    for (int i = 0; i < max_lights; i++) {\\n      if(i < int(shadow_uLightCount)) {\\n        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);\\n        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;\\n      }\\n    }\\n  }\\n  return gl_Position;\\n}\\n\";\nconst fs = \"\\nconst int max_lights = 2;\\nuniform bool shadow_uDrawShadowMap;\\nuniform bool shadow_uUseShadowMap;\\nuniform sampler2D shadow_uShadowMap0;\\nuniform sampler2D shadow_uShadowMap1;\\nuniform vec4 shadow_uColor;\\nuniform float shadow_uLightCount;\\n\\nvarying vec3 shadow_vPosition[max_lights];\\n\\nconst vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);\\nconst vec4 bitUnpackShift = 1.0 / bitPackShift;\\nconst vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);\\n\\nfloat shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {\\n  vec4 rgbaDepth = texture2D(shadowMap, position.xy);\\n\\n  float z = dot(rgbaDepth, bitUnpackShift);\\n  return smoothstep(0.001, 0.01, position.z - z);\\n}\\n\\nvec4 shadow_filterShadowColor(vec4 color) {\\n  if (shadow_uDrawShadowMap) {\\n    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);\\n    rgbaDepth -= rgbaDepth.gbaa * bitMask;\\n    return rgbaDepth;\\n  }\\n  if (shadow_uUseShadowMap) {\\n    float shadowAlpha = 0.0;\\n    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);\\n    if(shadow_uLightCount > 1.0) {\\n      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);\\n    }\\n    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;\\n    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);\\n\\n    return vec4(\\n      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),\\n      blendedAlpha\\n    );\\n  }\\n  return color;\\n}\\n\";\nconst getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);\nconst getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 1.0];\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nfunction screenToCommonSpace(xyz, pixelUnprojectionMatrix) {\n  const [x, y, z] = xyz;\n  const coord = pixelsToWorld([x, y, z], pixelUnprojectionMatrix);\n  if (Number.isFinite(z)) {\n    return coord;\n  }\n  return [coord[0], coord[1], 0];\n}\nfunction getViewportCenterPosition(_ref) {\n  let {\n    viewport,\n    center\n  } = _ref;\n  return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center);\n}\nfunction getViewProjectionMatrices(_ref2) {\n  let {\n    viewport,\n    shadowMatrices\n  } = _ref2;\n  const projectionMatrices = [];\n  const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;\n  const farZ = viewport.isGeospatial ? undefined : 1;\n  const corners = [[0, 0, farZ], [viewport.width, 0, farZ], [0, viewport.height, farZ], [viewport.width, viewport.height, farZ], [0, 0, -1], [viewport.width, 0, -1], [0, viewport.height, -1], [viewport.width, viewport.height, -1]].map(pixel => screenToCommonSpace(pixel, pixelUnprojectionMatrix));\n  for (const shadowMatrix of shadowMatrices) {\n    const viewMatrix = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());\n    const positions = corners.map(corner => viewMatrix.transform(corner));\n    const projectionMatrix = new Matrix4().ortho({\n      left: Math.min(...positions.map(position => position[0])),\n      right: Math.max(...positions.map(position => position[0])),\n      bottom: Math.min(...positions.map(position => position[1])),\n      top: Math.max(...positions.map(position => position[1])),\n      near: Math.min(...positions.map(position => -position[2])),\n      far: Math.max(...positions.map(position => -position[2]))\n    });\n    projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));\n  }\n  return projectionMatrices;\n}\nfunction createShadowUniforms(opts, context) {\n  const {\n    shadowEnabled = true\n  } = opts;\n  if (!shadowEnabled || !opts.shadowMatrices || !opts.shadowMatrices.length) {\n    return {\n      shadow_uDrawShadowMap: false,\n      shadow_uUseShadowMap: false\n    };\n  }\n  const uniforms = {\n    shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),\n    shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,\n    shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,\n    shadow_uLightId: opts.shadowLightId || 0,\n    shadow_uLightCount: opts.shadowMatrices.length\n  };\n  const center = getMemoizedViewportCenterPosition({\n    viewport: opts.viewport,\n    center: context.project_uCenter\n  });\n  const projectCenters = [];\n  const viewProjectionMatrices = getMemoizedViewProjectionMatrices({\n    shadowMatrices: opts.shadowMatrices,\n    viewport: opts.viewport\n  }).slice();\n  for (let i = 0; i < opts.shadowMatrices.length; i++) {\n    const viewProjectionMatrix = viewProjectionMatrices[i];\n    const viewProjectionMatrixCentered = viewProjectionMatrix.clone().translate(new Vector3(opts.viewport.center).negate());\n    if (context.project_uCoordinateSystem === COORDINATE_SYSTEM.LNGLAT && context.project_uProjectionMode === PROJECTION_MODE.WEB_MERCATOR) {\n      viewProjectionMatrices[i] = viewProjectionMatrixCentered;\n      projectCenters[i] = center;\n    } else {\n      viewProjectionMatrices[i] = viewProjectionMatrix.clone().multiplyRight(VECTOR_TO_POINT_MATRIX);\n      projectCenters[i] = viewProjectionMatrixCentered.transform(center);\n    }\n  }\n  for (let i = 0; i < viewProjectionMatrices.length; i++) {\n    uniforms[\"shadow_uViewProjectionMatrices[\".concat(i, \"]\")] = viewProjectionMatrices[i];\n    uniforms[\"shadow_uProjectCenters[\".concat(i, \"]\")] = projectCenters[i];\n    if (opts.shadowMaps && opts.shadowMaps.length > 0) {\n      uniforms[\"shadow_uShadowMap\".concat(i)] = opts.shadowMaps[i];\n    } else {\n      uniforms[\"shadow_uShadowMap\".concat(i)] = opts.dummyShadowMap;\n    }\n  }\n  return uniforms;\n}\nexport default {\n  name: 'shadow',\n  dependencies: [project],\n  vs,\n  fs,\n  inject: {\n    'vs:DECKGL_FILTER_GL_POSITION': \"\\n    position = shadow_setVertexPosition(geometry.position);\\n    \",\n    'fs:DECKGL_FILTER_COLOR': \"\\n    color = shadow_filterShadowColor(color);\\n    \"\n  },\n  getUniforms: function () {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if ('viewport' in opts && (opts.drawToShadowMap || opts.shadowMaps && opts.shadowMaps.length > 0)) {\n      return createShadowUniforms(opts, context);\n    }\n    return {};\n  }\n};","map":{"version":3,"names":["COORDINATE_SYSTEM","PROJECTION_MODE","project","Vector3","Matrix4","memoize","pixelsToWorld","vs","fs","getMemoizedViewportCenterPosition","getViewportCenterPosition","getMemoizedViewProjectionMatrices","getViewProjectionMatrices","DEFAULT_SHADOW_COLOR","VECTOR_TO_POINT_MATRIX","screenToCommonSpace","xyz","pixelUnprojectionMatrix","x","y","z","coord","Number","isFinite","_ref","viewport","center","viewProjectionMatrix","invert","transform","_ref2","shadowMatrices","projectionMatrices","farZ","isGeospatial","undefined","corners","width","height","map","pixel","shadowMatrix","viewMatrix","clone","translate","negate","positions","corner","projectionMatrix","ortho","left","Math","min","position","right","max","bottom","top","near","far","push","multiplyRight","createShadowUniforms","opts","context","shadowEnabled","length","shadow_uDrawShadowMap","shadow_uUseShadowMap","uniforms","Boolean","drawToShadowMap","shadowMaps","shadow_uColor","shadowColor","shadow_uLightId","shadowLightId","shadow_uLightCount","project_uCenter","projectCenters","viewProjectionMatrices","slice","i","viewProjectionMatrixCentered","project_uCoordinateSystem","LNGLAT","project_uProjectionMode","WEB_MERCATOR","concat","dummyShadowMap","name","dependencies","inject","getUniforms","arguments"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/shaderlib/shadow/shadow.ts"],"sourcesContent":["// Copyright (c) 2015-2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {COORDINATE_SYSTEM, PROJECTION_MODE} from '../../lib/constants';\nimport project from '../project/project';\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport memoize from '../../utils/memoize';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\n\nimport type {Texture2D} from '@luma.gl/webgl';\nimport type {ShaderModule, NumericArray} from '../../types/types';\nimport type Viewport from '../../viewports/viewport';\nimport type {ProjectUniforms} from '../project/viewport-uniforms';\n\nconst vs = `\nconst int max_lights = 2;\nuniform mat4 shadow_uViewProjectionMatrices[max_lights];\nuniform vec4 shadow_uProjectCenters[max_lights];\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform int shadow_uLightId;\nuniform float shadow_uLightCount;\n\nvarying vec3 shadow_vPosition[max_lights];\n\nvec4 shadow_setVertexPosition(vec4 position_commonspace) {\n  if (shadow_uDrawShadowMap) {\n    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);\n  }\n  if (shadow_uUseShadowMap) {\n    for (int i = 0; i < max_lights; i++) {\n      if(i < int(shadow_uLightCount)) {\n        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);\n        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;\n      }\n    }\n  }\n  return gl_Position;\n}\n`;\n\nconst fs = `\nconst int max_lights = 2;\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform sampler2D shadow_uShadowMap0;\nuniform sampler2D shadow_uShadowMap1;\nuniform vec4 shadow_uColor;\nuniform float shadow_uLightCount;\n\nvarying vec3 shadow_vPosition[max_lights];\n\nconst vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);\nconst vec4 bitUnpackShift = 1.0 / bitPackShift;\nconst vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);\n\nfloat shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {\n  vec4 rgbaDepth = texture2D(shadowMap, position.xy);\n\n  float z = dot(rgbaDepth, bitUnpackShift);\n  return smoothstep(0.001, 0.01, position.z - z);\n}\n\nvec4 shadow_filterShadowColor(vec4 color) {\n  if (shadow_uDrawShadowMap) {\n    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);\n    rgbaDepth -= rgbaDepth.gbaa * bitMask;\n    return rgbaDepth;\n  }\n  if (shadow_uUseShadowMap) {\n    float shadowAlpha = 0.0;\n    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);\n    if(shadow_uLightCount > 1.0) {\n      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);\n    }\n    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;\n    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);\n\n    return vec4(\n      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),\n      blendedAlpha\n    );\n  }\n  return color;\n}\n`;\n\nconst getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);\nconst getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);\n\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 1.0];\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\n\ntype ShadowModuleSettings = {\n  viewport: Viewport;\n  shadowEnabled?: boolean;\n  drawToShadowMap?: boolean;\n  shadowMaps?: Texture2D[];\n  dummyShadowMap?: Texture2D;\n  shadowColor?: number[];\n  shadowMatrices?: Matrix4[];\n  shadowLightId?: number;\n};\n\nfunction screenToCommonSpace(xyz: number[], pixelUnprojectionMatrix: number[]): number[] {\n  const [x, y, z] = xyz;\n  const coord = pixelsToWorld([x, y, z], pixelUnprojectionMatrix);\n\n  if (Number.isFinite(z)) {\n    return coord;\n  }\n  return [coord[0], coord[1], 0];\n}\n\nfunction getViewportCenterPosition({\n  viewport,\n  center\n}: {\n  viewport: Viewport;\n  center: NumericArray;\n}): NumericArray {\n  return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center);\n}\n\nfunction getViewProjectionMatrices({\n  viewport,\n  shadowMatrices\n}: {\n  viewport: Viewport;\n  shadowMatrices: Matrix4[];\n}): Matrix4[] {\n  const projectionMatrices: Matrix4[] = [];\n  const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;\n  const farZ = viewport.isGeospatial ? undefined : 1;\n  const corners = [\n    [0, 0, farZ], // top left ground\n    [viewport.width, 0, farZ], // top right ground\n    [0, viewport.height, farZ], // bottom left ground\n    [viewport.width, viewport.height, farZ], // bottom right ground\n    [0, 0, -1], // top left near\n    [viewport.width, 0, -1], // top right near\n    [0, viewport.height, -1], // bottom left near\n    [viewport.width, viewport.height, -1] // bottom right near\n  ].map(pixel =>\n    // @ts-expect-error z may be undefined\n    screenToCommonSpace(pixel, pixelUnprojectionMatrix)\n  );\n\n  for (const shadowMatrix of shadowMatrices) {\n    const viewMatrix = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());\n    const positions = corners.map(corner => viewMatrix.transform(corner));\n    const projectionMatrix = new Matrix4().ortho({\n      left: Math.min(...positions.map(position => position[0])),\n      right: Math.max(...positions.map(position => position[0])),\n      bottom: Math.min(...positions.map(position => position[1])),\n      top: Math.max(...positions.map(position => position[1])),\n      near: Math.min(...positions.map(position => -position[2])),\n      far: Math.max(...positions.map(position => -position[2]))\n    });\n    projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));\n  }\n  return projectionMatrices;\n}\n\n/* eslint-disable camelcase */\n\n// eslint-disable-next-line complexity\nfunction createShadowUniforms(\n  opts: ShadowModuleSettings,\n  context: ProjectUniforms\n): Record<string, any> {\n  const {shadowEnabled = true} = opts;\n  if (!shadowEnabled || !opts.shadowMatrices || !opts.shadowMatrices.length) {\n    return {\n      shadow_uDrawShadowMap: false,\n      shadow_uUseShadowMap: false\n    };\n  }\n  const uniforms = {\n    shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),\n    shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,\n    shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,\n    shadow_uLightId: opts.shadowLightId || 0,\n    shadow_uLightCount: opts.shadowMatrices.length\n  };\n\n  const center = getMemoizedViewportCenterPosition({\n    viewport: opts.viewport,\n    center: context.project_uCenter\n  });\n\n  const projectCenters: NumericArray[] = [];\n  const viewProjectionMatrices = getMemoizedViewProjectionMatrices({\n    shadowMatrices: opts.shadowMatrices,\n    viewport: opts.viewport\n  }).slice();\n\n  for (let i = 0; i < opts.shadowMatrices.length; i++) {\n    const viewProjectionMatrix = viewProjectionMatrices[i];\n    const viewProjectionMatrixCentered = viewProjectionMatrix\n      .clone()\n      .translate(new Vector3(opts.viewport.center).negate());\n\n    if (\n      context.project_uCoordinateSystem === COORDINATE_SYSTEM.LNGLAT &&\n      context.project_uProjectionMode === PROJECTION_MODE.WEB_MERCATOR\n    ) {\n      viewProjectionMatrices[i] = viewProjectionMatrixCentered;\n      projectCenters[i] = center;\n    } else {\n      viewProjectionMatrices[i] = viewProjectionMatrix\n        .clone()\n        .multiplyRight(VECTOR_TO_POINT_MATRIX);\n      projectCenters[i] = viewProjectionMatrixCentered.transform(center);\n    }\n  }\n\n  for (let i = 0; i < viewProjectionMatrices.length; i++) {\n    uniforms[`shadow_uViewProjectionMatrices[${i}]`] = viewProjectionMatrices[i];\n    uniforms[`shadow_uProjectCenters[${i}]`] = projectCenters[i];\n\n    if (opts.shadowMaps && opts.shadowMaps.length > 0) {\n      uniforms[`shadow_uShadowMap${i}`] = opts.shadowMaps[i];\n    } else {\n      uniforms[`shadow_uShadowMap${i}`] = opts.dummyShadowMap;\n    }\n  }\n  return uniforms;\n}\n\nexport default {\n  name: 'shadow',\n  dependencies: [project],\n  vs,\n  fs,\n  inject: {\n    'vs:DECKGL_FILTER_GL_POSITION': `\n    position = shadow_setVertexPosition(geometry.position);\n    `,\n    'fs:DECKGL_FILTER_COLOR': `\n    color = shadow_filterShadowColor(color);\n    `\n  },\n  getUniforms: (opts = {}, context = {}) => {\n    if (\n      'viewport' in opts &&\n      (opts.drawToShadowMap || (opts.shadowMaps && opts.shadowMaps.length > 0))\n    ) {\n      // @ts-expect-error if opts.viewport is defined, context should contain the project module's uniforms\n      return createShadowUniforms(opts, context);\n    }\n    return {};\n  }\n} as ShaderModule<ShadowModuleSettings>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}