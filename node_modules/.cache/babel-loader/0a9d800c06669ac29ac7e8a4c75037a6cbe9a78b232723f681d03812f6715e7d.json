{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Buffer, Transform } from '@luma.gl/core';\nimport Attribute from '../lib/attribute/attribute';\nimport { padBuffer, getAttributeTypeFromSize, getSourceBufferAttribute, getAttributeBufferLength, cycleBuffers } from '../lib/attribute/attribute-transition-utils';\nimport Transition from './transition';\nexport default class GPUInterpolationTransition {\n  constructor(_ref) {\n    let {\n      gl,\n      attribute,\n      timeline\n    } = _ref;\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"type\", 'interpolation');\n    _defineProperty(this, \"attributeInTransition\", void 0);\n    _defineProperty(this, \"settings\", void 0);\n    _defineProperty(this, \"attribute\", void 0);\n    _defineProperty(this, \"transition\", void 0);\n    _defineProperty(this, \"currentStartIndices\", void 0);\n    _defineProperty(this, \"currentLength\", void 0);\n    _defineProperty(this, \"transform\", void 0);\n    _defineProperty(this, \"buffers\", void 0);\n    this.gl = gl;\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = new Attribute(gl, attribute.settings);\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = 0;\n    this.transform = getTransform(gl, attribute);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: 35050\n    };\n    this.buffers = [new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts)];\n  }\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n  start(transitionSettings, numInstances) {\n    if (transitionSettings.duration <= 0) {\n      this.transition.cancel();\n      return;\n    }\n    this.settings = transitionSettings;\n    const {\n      gl,\n      buffers,\n      attribute\n    } = this;\n    cycleBuffers(buffers);\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n    for (const buffer of buffers) {\n      padBuffer({\n        buffer,\n        ...padBufferOpts\n      });\n    }\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      value: attribute.value\n    });\n    this.transition.start(transitionSettings);\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aFrom: buffers[0],\n        aTo: getSourceBufferAttribute(gl, attribute)\n      },\n      feedbackBuffers: {\n        vCurrent: buffers[1]\n      }\n    });\n  }\n  update() {\n    const updated = this.transition.update();\n    if (updated) {\n      const {\n        duration,\n        easing\n      } = this.settings;\n      const {\n        time\n      } = this.transition;\n      let t = time / duration;\n      if (easing) {\n        t = easing(t);\n      }\n      this.transform.run({\n        uniforms: {\n          time: t\n        }\n      });\n    }\n    return updated;\n  }\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    for (const buffer of this.buffers) {\n      buffer.delete();\n    }\n    this.buffers.length = 0;\n  }\n}\nconst vs = \"\\n#define SHADER_NAME interpolation-transition-vertex-shader\\n\\nuniform float time;\\nattribute ATTRIBUTE_TYPE aFrom;\\nattribute ATTRIBUTE_TYPE aTo;\\nvarying ATTRIBUTE_TYPE vCurrent;\\n\\nvoid main(void) {\\n  vCurrent = mix(aFrom, aTo, time);\\n  gl_Position = vec4(0.0);\\n}\\n\";\nfunction getTransform(gl, attribute) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    vs,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vCurrent']\n  });\n}","map":{"version":3,"names":["Buffer","Transform","Attribute","padBuffer","getAttributeTypeFromSize","getSourceBufferAttribute","getAttributeBufferLength","cycleBuffers","Transition","GPUInterpolationTransition","constructor","_ref","gl","attribute","timeline","_defineProperty","transition","attributeInTransition","settings","currentStartIndices","startIndices","currentLength","transform","getTransform","bufferOpts","byteLength","usage","buffers","inProgress","start","transitionSettings","numInstances","duration","cancel","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","setData","value","update","elementCount","Math","floor","size","sourceBuffers","aFrom","aTo","feedbackBuffers","vCurrent","updated","easing","time","t","run","uniforms","delete","length","vs","attributeType","defines","ATTRIBUTE_TYPE","varyings"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/transitions/gpu-interpolation-transition.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer, Transform} from '@luma.gl/core';\nimport Attribute from '../lib/attribute/attribute';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers,\n  InterpolationTransitionSettings\n} from '../lib/attribute/attribute-transition-utils';\nimport Transition from './transition';\n\nimport type {Timeline, Transform as LumaTransform} from '@luma.gl/engine';\nimport type {Buffer as LumaBuffer} from '@luma.gl/webgl';\nimport type {NumericArray} from '../types/types';\nimport type GPUTransition from './gpu-transition';\n\nexport default class GPUInterpolationTransition implements GPUTransition {\n  gl: WebGLRenderingContext;\n  type = 'interpolation';\n  attributeInTransition: Attribute;\n\n  private settings?: InterpolationTransitionSettings;\n  private attribute: Attribute;\n  private transition: Transition;\n  private currentStartIndices: NumericArray | null;\n  private currentLength: number;\n  private transform: LumaTransform;\n  private buffers: LumaBuffer[];\n\n  constructor({\n    gl,\n    attribute,\n    timeline\n  }: {\n    gl: WebGLRenderingContext;\n    attribute: Attribute;\n    timeline: Timeline;\n  }) {\n    this.gl = gl;\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(gl, attribute.settings);\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.transform = getTransform(gl, attribute);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // from\n      new Buffer(gl, bufferOpts) // current\n    ];\n  }\n\n  get inProgress(): boolean {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings: InterpolationTransitionSettings, numInstances: number): void {\n    if (transitionSettings.duration <= 0) {\n      this.transition.cancel();\n      return;\n    }\n    this.settings = transitionSettings;\n\n    const {gl, buffers, attribute} = this;\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the current buffer.\n    cycleBuffers(buffers);\n\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value as NumericArray\n    });\n\n    this.transition.start(transitionSettings);\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aFrom: buffers[0],\n        aTo: getSourceBufferAttribute(gl, attribute)\n      },\n      feedbackBuffers: {\n        vCurrent: buffers[1]\n      }\n    });\n  }\n\n  update(): boolean {\n    const updated = this.transition.update();\n    if (updated) {\n      const {duration, easing} = this.settings as InterpolationTransitionSettings;\n      const {time} = this.transition;\n      let t = time / duration;\n      if (easing) {\n        t = easing(t);\n      }\n      this.transform.run({\n        uniforms: {time: t}\n      });\n    }\n    return updated;\n  }\n\n  cancel(): void {\n    this.transition.cancel();\n    this.transform.delete();\n    for (const buffer of this.buffers) {\n      buffer.delete();\n    }\n    this.buffers.length = 0;\n  }\n}\n\nconst vs = `\n#define SHADER_NAME interpolation-transition-vertex-shader\n\nuniform float time;\nattribute ATTRIBUTE_TYPE aFrom;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vCurrent;\n\nvoid main(void) {\n  vCurrent = mix(aFrom, aTo, time);\n  gl_Position = vec4(0.0);\n}\n`;\n\nfunction getTransform(gl: WebGLRenderingContext, attribute: Attribute): LumaTransform {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    vs,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vCurrent']\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}