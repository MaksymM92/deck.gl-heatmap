{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Transform } from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\nconst TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\nexport default class AttributeTransitionManager {\n  constructor(gl, _ref) {\n    let {\n      id,\n      timeline\n    } = _ref;\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"isSupported\", void 0);\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"timeline\", void 0);\n    _defineProperty(this, \"transitions\", void 0);\n    _defineProperty(this, \"needsRedraw\", void 0);\n    _defineProperty(this, \"numInstances\", void 0);\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n    this.isSupported = Transform.isSupported(gl);\n  }\n  finalize() {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n  update(_ref2) {\n    let {\n      attributes,\n      transitions,\n      numInstances\n    } = _ref2;\n    this.numInstances = numInstances || 1;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n      if (!settings) continue;\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n  hasAttribute(attributeName) {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n  getAttributes() {\n    const animatedAttributes = {};\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n    return animatedAttributes;\n  }\n  run() {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  _removeTransition(attributeName) {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n  _updateAttribute(attributeName, attribute, settings) {\n    const transition = this.transitions[attributeName];\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\"WebGL2 not supported by this browser. Transition for \".concat(attributeName, \" is disabled.\"))();\n        return;\n      }\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n        isNew = false;\n      }\n    }\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}","map":{"version":3,"names":["Transform","GPUInterpolationTransition","GPUSpringTransition","log","TRANSITION_TYPES","interpolation","spring","AttributeTransitionManager","constructor","gl","_ref","id","timeline","_defineProperty","transitions","needsRedraw","numInstances","isSupported","finalize","attributeName","_removeTransition","update","_ref2","attributes","attribute","settings","getTransitionSetting","_updateAttribute","hasAttribute","transition","inProgress","getAttributes","animatedAttributes","attributeInTransition","run","updated","cancel","isNew","type","warn","concat","TransitionType","error","start"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/lib/attribute/attribute-transition-manager.ts"],"sourcesContent":["import {Transform} from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\n\nimport type {TransitionSettings} from './attribute-transition-utils';\nimport type Attribute from './attribute';\nimport type {Timeline} from '@luma.gl/engine';\nimport type GPUTransition from '../../transitions/gpu-transition';\nimport type {ConstructorOf} from '../../types/types';\n\nconst TRANSITION_TYPES: Record<string, ConstructorOf<GPUTransition>> = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nexport default class AttributeTransitionManager {\n  id: string;\n  isSupported: boolean;\n\n  private gl: WebGLRenderingContext;\n  private timeline?: Timeline;\n\n  private transitions: {[id: string]: GPUTransition};\n  private needsRedraw: boolean;\n  private numInstances: number;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      id,\n      timeline\n    }: {\n      id: string;\n      timeline?: Timeline;\n    }\n  ) {\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  finalize(): void {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({\n    attributes,\n    transitions,\n    numInstances\n  }: {\n    attributes: {[id: string]: Attribute};\n    transitions: any;\n    numInstances: number;\n  }): void {\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n\n      // this attribute might not support transitions?\n      if (!settings) continue; // eslint-disable-line no-continue\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName: string): boolean {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  // Get all the animated attributes\n  getAttributes(): {[id: string]: Attribute} {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  run(): boolean {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  private _removeTransition(attributeName: string): void {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  private _updateAttribute(\n    attributeName: string,\n    attribute: Attribute,\n    settings: TransitionSettings\n  ): void {\n    const transition = this.transitions[attributeName];\n    // an attribute can change transition type when it updates\n    // let's remove the transition when that happens so we can create the new transition type\n    // TODO: when switching transition types, make sure to carry over the attribute's\n    // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n    // for the next transition\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\n          `WebGL2 not supported by this browser. Transition for ${attributeName} is disabled.`\n        )();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(`unsupported transition type '${settings.type}'`)();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}