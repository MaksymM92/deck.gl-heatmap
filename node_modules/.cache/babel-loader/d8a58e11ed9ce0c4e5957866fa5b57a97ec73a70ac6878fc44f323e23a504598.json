{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nconst firefox = userAgent.indexOf('firefox') !== -1;\nconst {\n  WHEEL_EVENTS\n} = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel';\n// Constants for normalizing input delta\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\n// Slow down zoom if shift key is held for more precise zooming\nconst SHIFT_MULTIPLIER = 0.25;\nexport default class WheelInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n    /* eslint-disable complexity, max-statements */\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n      let value = event.deltaY;\n      if (window.WheelEvent) {\n        // Firefox doubles the values on retina screens...\n        if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n          value /= window.devicePixelRatio;\n        }\n        if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n          value *= WHEEL_DELTA_PER_LINE;\n        }\n      }\n      if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n        // This one is definitely a mouse wheel event.\n        // Normalize this value to match trackpad.\n        value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n      }\n      if (event.shiftKey && value) {\n        value = value * SHIFT_MULTIPLIER;\n      }\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        delta: -value,\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n    this.events = (this.options.events || []).concat(WHEEL_EVENTS);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent, passiveSupported ? {\n      passive: false\n    } : false));\n  }\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n}","map":{"version":3,"names":["Input","INPUT_EVENT_TYPES","window","userAgent","passiveSupported","firefox","indexOf","WHEEL_EVENTS","EVENT_TYPE","WHEEL_DELTA_MAGIC_SCALER","WHEEL_DELTA_PER_LINE","SHIFT_MULTIPLIER","WheelInput","constructor","element","callback","options","handleEvent","event","enable","value","deltaY","WheelEvent","deltaMode","DOM_DELTA_PIXEL","devicePixelRatio","DOM_DELTA_LINE","Math","floor","shiftKey","type","center","x","clientX","y","clientY","delta","srcEvent","pointerType","target","events","concat","forEach","addEventListener","passive","destroy","removeEventListener","enableEventType","eventType","enabled"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/mjolnir.js/src/inputs/wheel-input.ts"],"sourcesContent":["import type {MjolnirWheelEventRaw} from '../types';\nimport Input, {InputOptions} from './input';\n\nimport {INPUT_EVENT_TYPES} from '../constants';\nimport {window, userAgent, passiveSupported} from '../utils/globals';\n\nconst firefox = userAgent.indexOf('firefox') !== -1;\n\nconst {WHEEL_EVENTS} = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel';\n\n// Constants for normalizing input delta\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\n// Slow down zoom if shift key is held for more precise zooming\nconst SHIFT_MULTIPLIER = 0.25;\n\nexport default class WheelInput extends Input<MjolnirWheelEventRaw, InputOptions> {\n  events: string[];\n\n  constructor(\n    element: HTMLElement,\n    callback: (event: MjolnirWheelEventRaw) => void,\n    options: InputOptions\n  ) {\n    super(element, callback, options);\n\n    this.events = (this.options.events || []).concat(WHEEL_EVENTS);\n\n    this.events.forEach(event =>\n      element.addEventListener(event, this.handleEvent, passiveSupported ? {passive: false} : false)\n    );\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType: string, enabled: boolean) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n  /* eslint-disable complexity, max-statements */\n  handleEvent = (event: WheelEvent) => {\n    if (!this.options.enable) {\n      return;\n    }\n\n    let value = event.deltaY;\n    if (window.WheelEvent) {\n      // Firefox doubles the values on retina screens...\n      if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n        value /= window.devicePixelRatio;\n      }\n      if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n        value *= WHEEL_DELTA_PER_LINE;\n      }\n    }\n\n    if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n      // This one is definitely a mouse wheel event.\n      // Normalize this value to match trackpad.\n      value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n    }\n\n    if (event.shiftKey && value) {\n      value = value * SHIFT_MULTIPLIER;\n    }\n\n    this.callback({\n      type: EVENT_TYPE,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      delta: -value,\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target as HTMLElement\n    });\n  };\n}\n"],"mappings":"AACA,OAAOA,KAAqB,MAAM,SAAS;AAE3C,SAAQC,iBAAiB,QAAO,cAAc;AAC9C,SAAQC,MAAM,EAAEC,SAAS,EAAEC,gBAAgB,QAAO,kBAAkB;AAEpE,MAAMC,OAAO,GAAGF,SAAS,CAACG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAEnD,MAAM;EAACC;AAAY,CAAC,GAAGN,iBAAiB;AACxC,MAAMO,UAAU,GAAG,OAAO;AAE1B;AACA,MAAMC,wBAAwB,GAAG,cAAc;AAC/C,MAAMC,oBAAoB,GAAG,EAAE;AAC/B;AACA,MAAMC,gBAAgB,GAAG,IAAI;AAE7B,eAAc,MAAOC,UAAW,SAAQZ,KAAyC;EAG/Ea,YACEC,OAAoB,EACpBC,QAA+C,EAC/CC,OAAqB;IAErB,KAAK,CAACF,OAAO,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IAuBnC;IACA,KAAAC,WAAW,GAAIC,KAAiB,IAAI;MAClC,IAAI,CAAC,IAAI,CAACF,OAAO,CAACG,MAAM,EAAE;QACxB;;MAGF,IAAIC,KAAK,GAAGF,KAAK,CAACG,MAAM;MACxB,IAAInB,MAAM,CAACoB,UAAU,EAAE;QACrB;QACA,IAAIjB,OAAO,IAAIa,KAAK,CAACK,SAAS,KAAKrB,MAAM,CAACoB,UAAU,CAACE,eAAe,EAAE;UACpEJ,KAAK,IAAIlB,MAAM,CAACuB,gBAAgB;;QAElC,IAAIP,KAAK,CAACK,SAAS,KAAKrB,MAAM,CAACoB,UAAU,CAACI,cAAc,EAAE;UACxDN,KAAK,IAAIV,oBAAoB;;;MAIjC,IAAIU,KAAK,KAAK,CAAC,IAAIA,KAAK,GAAGX,wBAAwB,KAAK,CAAC,EAAE;QACzD;QACA;QACAW,KAAK,GAAGO,IAAI,CAACC,KAAK,CAACR,KAAK,GAAGX,wBAAwB,CAAC;;MAGtD,IAAIS,KAAK,CAACW,QAAQ,IAAIT,KAAK,EAAE;QAC3BA,KAAK,GAAGA,KAAK,GAAGT,gBAAgB;;MAGlC,IAAI,CAACI,QAAQ,CAAC;QACZe,IAAI,EAAEtB,UAAU;QAChBuB,MAAM,EAAE;UACNC,CAAC,EAAEd,KAAK,CAACe,OAAO;UAChBC,CAAC,EAAEhB,KAAK,CAACiB;SACV;QACDC,KAAK,EAAE,CAAChB,KAAK;QACbiB,QAAQ,EAAEnB,KAAK;QACfoB,WAAW,EAAE,OAAO;QACpBC,MAAM,EAAErB,KAAK,CAACqB;OACf,CAAC;IACJ,CAAC;IA3DC,IAAI,CAACC,MAAM,GAAG,CAAC,IAAI,CAACxB,OAAO,CAACwB,MAAM,IAAI,EAAE,EAAEC,MAAM,CAAClC,YAAY,CAAC;IAE9D,IAAI,CAACiC,MAAM,CAACE,OAAO,CAACxB,KAAK,IACvBJ,OAAO,CAAC6B,gBAAgB,CAACzB,KAAK,EAAE,IAAI,CAACD,WAAW,EAAEb,gBAAgB,GAAG;MAACwC,OAAO,EAAE;IAAK,CAAC,GAAG,KAAK,CAAC,CAC/F;EACH;EAEAC,OAAOA,CAAA;IACL,IAAI,CAACL,MAAM,CAACE,OAAO,CAACxB,KAAK,IAAI,IAAI,CAACJ,OAAO,CAACgC,mBAAmB,CAAC5B,KAAK,EAAE,IAAI,CAACD,WAAW,CAAC,CAAC;EACzF;EAEA;;;;EAIA8B,eAAeA,CAACC,SAAiB,EAAEC,OAAgB;IACjD,IAAID,SAAS,KAAKxC,UAAU,EAAE;MAC5B,IAAI,CAACQ,OAAO,CAACG,MAAM,GAAG8B,OAAO;;EAEjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}