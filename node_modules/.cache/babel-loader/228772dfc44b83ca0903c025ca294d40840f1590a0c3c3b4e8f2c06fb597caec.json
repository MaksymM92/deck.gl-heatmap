{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport { replaceInRange } from '../utils';\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n  updateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange => replaceInRange({\n        data: paths,\n        getIndex: p => p.__source.index,\n        dataRange,\n        replace: this._getPaths(dataRange)\n      }));\n      this.setState({\n        paths,\n        pathsDiff\n      });\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n  _getPaths() {\n    let dataRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      data,\n      getPolygon,\n      positionFormat,\n      _normalize\n    } = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {\n      startRow,\n      endRow\n    } = dataRange;\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {\n        holeIndices\n      } = polygon;\n      const positions = polygon.positions || polygon;\n      if (holeIndices) {\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({\n            path\n          }, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({\n          path: positions\n        }, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n  renderLayers() {\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n    const {\n      paths,\n      pathsDiff\n    } = this.state;\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n    const polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n      _dataDiff,\n      extruded,\n      elevationScale,\n      filled,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      getElevation,\n      getFillColor,\n      getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n      material,\n      transitions\n    }, this.getSubLayerProps({\n      id: 'fill',\n      updateTriggers: updateTriggers && {\n        getPolygon: updateTriggers.getPolygon,\n        getElevation: updateTriggers.getElevation,\n        getFillColor: updateTriggers.getFillColor,\n        lineColors: extruded && wireframe,\n        getLineColor: updateTriggers.getLineColor\n      }\n    }), {\n      data,\n      positionFormat,\n      getPolygon\n    });\n    const polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n      _dataDiff: pathsDiff && (() => pathsDiff),\n      widthUnits: lineWidthUnits,\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels,\n      jointRounded: lineJointRounded,\n      miterLimit: lineMiterLimit,\n      dashJustified: lineDashJustified,\n      _pathType: 'loop',\n      transitions: transitions && {\n        getWidth: transitions.getLineWidth,\n        getColor: transitions.getLineColor,\n        getPath: transitions.getPolygon\n      },\n      getColor: this.getSubLayerAccessor(getLineColor),\n      getWidth: this.getSubLayerAccessor(getLineWidth),\n      getDashArray: this.getSubLayerAccessor(getLineDashArray)\n    }, this.getSubLayerProps({\n      id: 'stroke',\n      updateTriggers: updateTriggers && {\n        getWidth: updateTriggers.getLineWidth,\n        getColor: updateTriggers.getLineColor,\n        getDashArray: updateTriggers.getLineDashArray\n      }\n    }), {\n      data: paths,\n      positionFormat,\n      getPath: x => x.path\n    });\n    return [!extruded && polygonLayer, polygonLineLayer, extruded && polygonLayer];\n  }\n}\n_defineProperty(PolygonLayer, \"layerName\", 'PolygonLayer');\n_defineProperty(PolygonLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","initializeState","state","paths","props","getLineDashArray","removed","updateState","_ref","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","arguments","length","undefined","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","normalize","holeIndices","positions","i","path","push","getSubLayerRow","renderLayers","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/polygon-layer/polygon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayerDataSource,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}