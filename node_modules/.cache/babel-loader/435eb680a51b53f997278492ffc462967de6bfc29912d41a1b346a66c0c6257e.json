{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, withParameters, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\nconst RESOLUTION = 2;\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [10240]: 9729,\n    [10241]: 9729,\n    [10242]: 33071,\n    [10243]: 33071\n  },\n  dataFormat: 6408\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\nconst defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  },\n  aggregation: 'SUM',\n  weightsTextureSize: {\n    type: 'number',\n    min: 128,\n    max: 2048,\n    value: 2048\n  },\n  debounceTimeout: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 500\n  }\n};\nconst REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nconst FLOAT_TARGET_FEATURES = [FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.FLOAT_BLEND];\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\nexport default class HeatmapLayer extends AggregationLayer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({\n        supported: false\n      });\n      log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n      return;\n    }\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({\n      supported: true,\n      colorDomain: DEFAULT_COLOR_DOMAIN\n    });\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return changeFlags.somethingChanged;\n  }\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n  _updateHeatmapState(opts) {\n    const {\n      props,\n      oldProps\n    } = opts;\n    const changeFlags = this._getChangeFlags(opts);\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      clearTimeout(this.state.updateTimer);\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n    this.setState({\n      zoom: opts.context.viewport.zoom\n    });\n  }\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {\n      updateTriggers,\n      intensity,\n      threshold,\n      aggregation\n    } = this.props;\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n    return new TriangleLayerClass(this.getSubLayerProps({\n      id: 'triangle-layer',\n      updateTriggers\n    }), {\n      coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n      data: {\n        attributes: {\n          positions: triPositionBuffer,\n          texCoords: triTexCoordBuffer\n        }\n      },\n      vertexCount: 4,\n      maxTexture: maxWeightsTexture,\n      colorTexture,\n      aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n      texture: weightsTexture,\n      intensity,\n      threshold,\n      colorDomain\n    });\n  }\n  finalizeState(context) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();\n    weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();\n    maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();\n    maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();\n    triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();\n    triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();\n    colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {\n      dimensions\n    } = this.state;\n    changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n      compareAll: true,\n      dimension: dimensions.data\n    });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n    const {\n      zoom\n    } = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n    return changeFlags;\n  }\n  _createTextures() {\n    const {\n      gl\n    } = this.context;\n    const {\n      textureSize,\n      format,\n      type\n    } = this.state;\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      })\n    });\n  }\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      },\n      weights: {\n        size: 1,\n        accessor: 'getWeight'\n      }\n    });\n    this.setState({\n      positionAttributeName: 'positions'\n    });\n  }\n  _setupTextureParams() {\n    const {\n      gl\n    } = this.context;\n    const {\n      weightsTextureSize\n    } = this.props;\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, 3379));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {\n      format,\n      type\n    } = getTextureParams({\n      gl,\n      floatTargetSupport\n    });\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({\n      textureSize,\n      format,\n      type,\n      weightsScale\n    });\n    if (!floatTargetSupport) {\n      log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n    }\n  }\n  getShaders(type) {\n    return super.getShaders(type === 'max-weights-transform' ? {\n      vs: vsMax,\n      _fs: fsMax\n    } : {\n      vs: weightsVs,\n      _fs: weightsFs\n    });\n  }\n  _createWeightsTransform() {\n    let shaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _weightsTransform;\n    const {\n      gl\n    } = this.context;\n    let {\n      weightsTransform\n    } = this.state;\n    const {\n      weightsTexture\n    } = this.state;\n    (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();\n    weightsTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-weights-transform\"),\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({\n      weightsTransform\n    });\n  }\n  _setupResources() {\n    const {\n      gl\n    } = this.context;\n    this._createTextures();\n    const {\n      textureSize,\n      weightsTexture,\n      maxWeightsTexture\n    } = this.state;\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-max-weights-transform\"),\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 3\n        }\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 2\n        }\n      })\n    });\n  }\n  updateShaders(shaderOptions) {\n    this._createWeightsTransform(shaderOptions);\n  }\n  _updateMaxWeightValue() {\n    const {\n      maxWeightTransform\n    } = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1],\n        blendEquation: 32776\n      }\n    });\n  }\n  _updateBounds() {\n    let forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      viewport\n    } = this.context;\n    const viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map(p => p.map(Math.fround));\n    const visibleWorldBounds = getBounds(viewportCorners);\n    const newState = {\n      visibleWorldBounds,\n      viewportCorners\n    };\n    let boundsChanged = false;\n    if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n  _updateTextureRenderingBounds() {\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n    const {\n      viewport\n    } = this.context;\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n    const textureBounds = viewportCorners.map(p => getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds));\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n  _updateColorTexture(opts) {\n    const {\n      colorRange\n    } = opts.props;\n    let {\n      colorTexture\n    } = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({\n      colorTexture\n    });\n  }\n  _updateWeightmap() {\n    const {\n      radiusPixels,\n      colorDomain,\n      aggregation\n    } = this.props;\n    const {\n      weightsTransform,\n      worldBounds,\n      textureSize,\n      weightsTexture,\n      weightsScale\n    } = this.state;\n    this.state.isWeightMapDirty = false;\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n    if (colorDomain && aggregation === 'SUM') {\n      const {\n        viewport\n      } = this.context;\n      const metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    withParameters(this.context.gl, {\n      clearColor: [0, 0, 0, 0]\n    }, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n    this._updateMaxWeightValue();\n    weightsTexture.setParameters({\n      [10240]: 9729,\n      [10241]: 9729\n    });\n  }\n  _debouncedUpdateWeightmap() {\n    let fromTimer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let {\n      updateTimer\n    } = this.state;\n    const {\n      debounceTimeout\n    } = this.props;\n    if (fromTimer) {\n      updateTimer = null;\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else {\n      this.setState({\n        isWeightMapDirty: false\n      });\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n    this.setState({\n      updateTimer\n    });\n  }\n  _worldToCommonBounds(worldBounds) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      useLayerCoordinateSystem = false\n    } = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {\n      viewport\n    } = this.context;\n    const {\n      textureSize\n    } = this.state;\n    const {\n      coordinateSystem\n    } = this.props;\n    const offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];\n    const size = textureSize * RESOLUTION / viewport.scale;\n    let bottomLeftCommon;\n    let topRightCommon;\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);\n  }\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {\n      viewport\n    } = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n_defineProperty(HeatmapLayer, \"layerName\", 'HeatmapLayer');\n_defineProperty(HeatmapLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["_defineProperty","getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","withParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weightsVs","weightsFs","vsMax","fsMax","RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","FLOAT_TARGET_FEATURES","COLOR_ATTACHMENT_RGBA32F","FLOAT_BLEND","DIMENSIONS","data","props","HeatmapLayer","constructor","arguments","initializeState","gl","context","setState","supported","error","concat","id","initializeAggregationLayer","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","_ref","changeFlags","somethingChanged","updateState","opts","state","_updateHeatmapState","oldProps","_getChangeFlags","dataChanged","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","weightsScale","warn","getShaders","vs","_fs","_createWeightsTransform","shaders","length","undefined","_weightsTransform","elementCount","_targetTexture","_targetTextureVarying","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","byteLength","updateShaders","shaderOptions","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearColor","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, withParameters, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\nconst RESOLUTION = 2;\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [10240]: 9729,\n    [10241]: 9729,\n    [10242]: 33071,\n    [10243]: 33071\n  },\n  dataFormat: 6408\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\nconst defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  },\n  aggregation: 'SUM',\n  weightsTextureSize: {\n    type: 'number',\n    min: 128,\n    max: 2048,\n    value: 2048\n  },\n  debounceTimeout: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 500\n  }\n};\nconst REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nconst FLOAT_TARGET_FEATURES = [FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.FLOAT_BLEND];\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\nexport default class HeatmapLayer extends AggregationLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({\n        supported: false\n      });\n      log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n      return;\n    }\n\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({\n      supported: true,\n      colorDomain: DEFAULT_COLOR_DOMAIN\n    });\n\n    this._setupTextureParams();\n\n    this._setupAttributes();\n\n    this._setupResources();\n  }\n\n  shouldUpdateState({\n    changeFlags\n  }) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n\n    super.updateState(opts);\n\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts) {\n    const {\n      props,\n      oldProps\n    } = opts;\n\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      clearTimeout(this.state.updateTimer);\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({\n      zoom: opts.context.viewport.zoom\n    });\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {\n      updateTriggers,\n      intensity,\n      threshold,\n      aggregation\n    } = this.props;\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n    return new TriangleLayerClass(this.getSubLayerProps({\n      id: 'triangle-layer',\n      updateTriggers\n    }), {\n      coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n      data: {\n        attributes: {\n          positions: triPositionBuffer,\n          texCoords: triTexCoordBuffer\n        }\n      },\n      vertexCount: 4,\n      maxTexture: maxWeightsTexture,\n      colorTexture,\n      aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n      texture: weightsTexture,\n      intensity,\n      threshold,\n      colorDomain\n    });\n  }\n\n  finalizeState(context) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();\n    weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();\n    maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();\n    maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();\n    triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();\n    triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();\n    colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();\n\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {\n      dimensions\n    } = this.state;\n    changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n      compareAll: true,\n      dimension: dimensions.data\n    });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n    const {\n      zoom\n    } = this.state;\n\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {\n      gl\n    } = this.context;\n    const {\n      textureSize,\n      format,\n      type\n    } = this.state;\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      })\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      },\n      weights: {\n        size: 1,\n        accessor: 'getWeight'\n      }\n    });\n    this.setState({\n      positionAttributeName: 'positions'\n    });\n  }\n\n  _setupTextureParams() {\n    const {\n      gl\n    } = this.context;\n    const {\n      weightsTextureSize\n    } = this.props;\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, 3379));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {\n      format,\n      type\n    } = getTextureParams({\n      gl,\n      floatTargetSupport\n    });\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({\n      textureSize,\n      format,\n      type,\n      weightsScale\n    });\n\n    if (!floatTargetSupport) {\n      log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(type === 'max-weights-transform' ? {\n      vs: vsMax,\n      _fs: fsMax\n    } : {\n      vs: weightsVs,\n      _fs: weightsFs\n    });\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    var _weightsTransform;\n\n    const {\n      gl\n    } = this.context;\n    let {\n      weightsTransform\n    } = this.state;\n    const {\n      weightsTexture\n    } = this.state;\n    (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();\n    weightsTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-weights-transform\"),\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({\n      weightsTransform\n    });\n  }\n\n  _setupResources() {\n    const {\n      gl\n    } = this.context;\n\n    this._createTextures();\n\n    const {\n      textureSize,\n      weightsTexture,\n      maxWeightsTexture\n    } = this.state;\n    const weightsTransformShaders = this.getShaders('weights-transform');\n\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-max-weights-transform\"),\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 3\n        }\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 2\n        }\n      })\n    });\n  }\n\n  updateShaders(shaderOptions) {\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {\n      maxWeightTransform\n    } = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1],\n        blendEquation: 32776\n      }\n    });\n  }\n\n  _updateBounds(forceUpdate = false) {\n    const {\n      viewport\n    } = this.context;\n    const viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map(p => p.map(Math.fround));\n    const visibleWorldBounds = getBounds(viewportCorners);\n    const newState = {\n      visibleWorldBounds,\n      viewportCorners\n    };\n    let boundsChanged = false;\n\n    if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n      boundsChanged = true;\n    }\n\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n    const {\n      viewport\n    } = this.context;\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n    const textureBounds = viewportCorners.map(p => getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds));\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {\n      colorRange\n    } = opts.props;\n    let {\n      colorTexture\n    } = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n\n    this.setState({\n      colorTexture\n    });\n  }\n\n  _updateWeightmap() {\n    const {\n      radiusPixels,\n      colorDomain,\n      aggregation\n    } = this.props;\n    const {\n      weightsTransform,\n      worldBounds,\n      textureSize,\n      weightsTexture,\n      weightsScale\n    } = this.state;\n    this.state.isWeightMapDirty = false;\n\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      const {\n        viewport\n      } = this.context;\n      const metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    withParameters(this.context.gl, {\n      clearColor: [0, 0, 0, 0]\n    }, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n\n    this._updateMaxWeightValue();\n\n    weightsTexture.setParameters({\n      [10240]: 9729,\n      [10241]: 9729\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {\n      updateTimer\n    } = this.state;\n    const {\n      debounceTimeout\n    } = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n\n      this._updateBounds(true);\n\n      this._updateTextureRenderingBounds();\n\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else {\n      this.setState({\n        isWeightMapDirty: false\n      });\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({\n      updateTimer\n    });\n  }\n\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {\n      useLayerCoordinateSystem = false\n    } = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {\n      viewport\n    } = this.context;\n    const {\n      textureSize\n    } = this.state;\n    const {\n      coordinateSystem\n    } = this.props;\n    const offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];\n    const size = textureSize * RESOLUTION / viewport.scale;\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n\n    return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);\n  }\n\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {\n      viewport\n    } = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n\n}\n\n_defineProperty(HeatmapLayer, \"layerName\", 'HeatmapLayer');\n\n_defineProperty(HeatmapLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=heatmap-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}