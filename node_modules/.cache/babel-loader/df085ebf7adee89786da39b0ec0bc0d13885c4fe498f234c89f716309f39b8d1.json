{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Model, Geometry, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { Layer, log, picking } from '@deck.gl/core';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\nconst defaultProps = {\n  cellSizePixels: {\n    value: 100,\n    min: 1\n  },\n  cellMarginPixels: {\n    value: 2,\n    min: 0,\n    max: 5\n  },\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\nexport default class ScreenGridCellLayer extends Layer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n  getShaders() {\n    return {\n      vs,\n      fs,\n      modules: [picking]\n    };\n  }\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        update: this.calculateInstancePositions\n      },\n      instanceCounts: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return changeFlags.somethingChanged;\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      oldProps,\n      props,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      parameters,\n      maxTexture\n    } = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {\n      model\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      minColor,\n      maxColor,\n      maxTexture,\n      colorDomain\n    }).draw({\n      parameters: {\n        depthTest: false,\n        depthMask: false,\n        ...parameters\n      }\n    });\n  }\n  calculateInstancePositions(attribute, _ref3) {\n    let {\n      numInstances\n    } = _ref3;\n    const {\n      width,\n      height\n    } = this.context.viewport;\n    const {\n      cellSizePixels\n    } = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n    const {\n      value,\n      size\n    } = attribute;\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n      value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n  _shouldUseMinMax() {\n    const {\n      minColor,\n      maxColor,\n      colorDomain,\n      colorRange\n    } = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    return true;\n  }\n  _updateUniforms(oldProps, props, changeFlags) {\n    const {\n      model\n    } = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({\n        shouldUseMinMax: this._shouldUseMinMax()\n      });\n    }\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({\n        colorRange: colorRangeToFlatArray(props.colorRange)\n      });\n    }\n    if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {\n      const {\n        width,\n        height\n      } = this.context.viewport;\n      const {\n        cellSizePixels,\n        cellMarginPixels\n      } = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n      const cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);\n      model.setUniforms({\n        cellScale\n      });\n    }\n  }\n}\n_defineProperty(ScreenGridCellLayer, \"layerName\", 'ScreenGridCellLayer');\n_defineProperty(ScreenGridCellLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["Model","Geometry","FEATURES","hasFeatures","Layer","log","picking","defaultColorRange","colorRangeToFlatArray","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","ScreenGridCellLayer","constructor","arguments","_defineProperty","isSupported","gl","TEXTURE_FLOAT","getShaders","modules","initializeState","context","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","noAlloc","setState","model","_getModel","shouldUpdateState","_ref","changeFlags","somethingChanged","updateState","params","oldProps","props","numInstances","invalidateAll","invalidate","_updateUniforms","draw","_ref2","uniforms","parameters","maxTexture","minColor","maxColor","state","setUniforms","depthTest","depthMask","attribute","_ref3","width","height","viewport","numCol","Math","ceil","i","x","y","floor","id","geometry","drawMode","attributes","positions","Float32Array","isInstanced","_shouldUseMinMax","deprecated","some","key","shouldUseMinMax","viewportChanged","margin","cellScale"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/screen-grid-layer/screen-grid-cell-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, FEATURES, hasFeatures, Texture2D, DefaultProps} from '@luma.gl/core';\nimport {Layer, LayerProps, log, picking, UpdateParameters} from '@deck.gl/core';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport type {_ScreenGridLayerProps} from './screen-grid-layer';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\n\nconst defaultProps: DefaultProps<ScreenGridCellLayerProps> = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\n\n/** All properties supported by ScreenGridCellLayer. */\nexport type ScreenGridCellLayerProps<DataT = any> = _ScreenGridCellLayerProps<DataT> & LayerProps;\n\n/** Proprties added by ScreenGridCellLayer. */\nexport type _ScreenGridCellLayerProps<DataT> = _ScreenGridLayerProps<DataT> & {\n  maxTexture: Texture2D;\n};\n\nexport default class ScreenGridCellLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScreenGridCellLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridCellLayer';\n  static defaultProps = defaultProps;\n\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  state!: Layer['state'] & {\n    model: Model;\n  };\n  getShaders() {\n    return {vs, fs, modules: [picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {size: 4, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // 'instanceCounts' buffer contetns change on viewport change.\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {oldProps, props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager()!;\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({uniforms}) {\n    const {parameters, maxTexture} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model} = this.state;\n    model\n      .setUniforms(uniforms)\n      .setUniforms({\n        minColor,\n        maxColor,\n        maxTexture,\n        colorDomain\n      })\n      .draw({\n        parameters: {\n          depthTest: false,\n          depthMask: false,\n          ...parameters\n        }\n      });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  // Private Methods\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _shouldUseMinMax(): boolean {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags): void {\n    const {model} = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({shouldUseMinMax: this._shouldUseMinMax()});\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({colorRange: colorRangeToFlatArray(props.colorRange)});\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      const cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n      model.setUniforms({cellScale});\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}