{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { equals } from '@math.gl/core';\nimport assert from '../utils/assert';\nexport default class TransitionInterpolator {\n  constructor(opts) {\n    _defineProperty(this, \"_propsToCompare\", void 0);\n    _defineProperty(this, \"_propsToExtract\", void 0);\n    _defineProperty(this, \"_requiredProps\", void 0);\n    const {\n      compare,\n      extract,\n      required\n    } = opts;\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n  arePropsEqual(currentProps, nextProps) {\n    for (const key of this._propsToCompare) {\n      if (!(key in currentProps) || !(key in nextProps) || !equals(currentProps[key], nextProps[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  initializeProps(startProps, endProps) {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n    this._checkRequiredProps(startViewStateProps);\n    this._checkRequiredProps(endViewStateProps);\n    return {\n      start: startViewStateProps,\n      end: endViewStateProps\n    };\n  }\n  getDuration(startProps, endProps) {\n    return endProps.transitionDuration;\n  }\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(Number.isFinite(value) || Array.isArray(value), \"\".concat(propName, \" is required for transition\"));\n    });\n  }\n}","map":{"version":3,"names":["equals","assert","TransitionInterpolator","constructor","opts","_defineProperty","compare","extract","required","_propsToCompare","_propsToExtract","_requiredProps","arePropsEqual","currentProps","nextProps","key","initializeProps","startProps","endProps","startViewStateProps","endViewStateProps","_checkRequiredProps","start","end","getDuration","transitionDuration","props","forEach","propName","value","Number","isFinite","Array","isArray","concat"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/transitions/transition-interpolator.ts"],"sourcesContent":["import {equals} from '@math.gl/core';\nimport assert from '../utils/assert';\n\nexport default abstract class TransitionInterpolator {\n  protected _propsToCompare: string[];\n  protected _propsToExtract: string[];\n  protected _requiredProps?: string[];\n\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts: {compare: string[]; extract?: string[]; required?: string[]}) {\n    const {compare, extract, required} = opts;\n\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps: Record<string, any>, nextProps: Record<string, any>): boolean {\n    for (const key of this._propsToCompare) {\n      if (\n        !(key in currentProps) ||\n        !(key in nextProps) ||\n        !equals(currentProps[key], nextProps[key])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>\n  ): {\n    start: Record<string, any>;\n    end: Record<string, any>;\n  } {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n\n    this._checkRequiredProps(startViewStateProps);\n    this._checkRequiredProps(endViewStateProps);\n\n    return {start: startViewStateProps, end: endViewStateProps};\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  abstract interpolateProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>,\n    t: number\n  ): Record<string, any>;\n\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps: Record<string, any>, endProps: Record<string, any>): number {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(\n        Number.isFinite(value) || Array.isArray(value),\n        `${propName} is required for transition`\n      );\n    });\n  }\n}\n"],"mappings":";AAAA,SAAQA,MAAR,QAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,eAAe,MAAeC,sBAAf,CAAsC;EAYnDC,WAAWA,CAACC,IAAD,EAAqE;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAC9E,MAAM;MAACC,OAAD;MAAUC,OAAV;MAAmBC;IAAnB,IAA+BJ,IAArC;IAEA,KAAKK,eAAL,GAAuBH,OAAvB;IACA,KAAKI,eAAL,GAAuBH,OAAO,IAAID,OAAlC;IACA,KAAKK,cAAL,GAAsBH,QAAtB;EACD;EAQDI,aAAaA,CAACC,YAAD,EAAoCC,SAApC,EAA6E;IACxF,KAAK,MAAMC,GAAX,IAAkB,KAAKN,eAAvB,EAAwC;MACtC,IACE,EAAEM,GAAG,IAAIF,YAAT,KACA,EAAEE,GAAG,IAAID,SAAT,CADA,IAEA,CAACd,MAAM,CAACa,YAAY,CAACE,GAAD,CAAb,EAAoBD,SAAS,CAACC,GAAD,CAA7B,CAHT,EAIE;QACA,OAAO,KAAP;MACD;IACF;IACD,OAAO,IAAP;EACD;EASDC,eAAeA,CACbC,UADa,EAEbC,QAFa,EAMb;IACA,MAAMC,mBAAmB,GAAG,EAA5B;IACA,MAAMC,iBAAiB,GAAG,EAA1B;IAEA,KAAK,MAAML,GAAX,IAAkB,KAAKL,eAAvB,EAAwC;MACtC,IAAIK,GAAG,IAAIE,UAAP,IAAqBF,GAAG,IAAIG,QAAhC,EAA0C;QACxCC,mBAAmB,CAACJ,GAAD,CAAnB,GAA2BE,UAAU,CAACF,GAAD,CAArC;QACAK,iBAAiB,CAACL,GAAD,CAAjB,GAAyBG,QAAQ,CAACH,GAAD,CAAjC;MACD;IACF;IAED,KAAKM,mBAAL,CAAyBF,mBAAzB;IACA,KAAKE,mBAAL,CAAyBD,iBAAzB;IAEA,OAAO;MAACE,KAAK,EAAEH,mBAAR;MAA6BI,GAAG,EAAEH;IAAlC,CAAP;EACD;EAqBDI,WAAWA,CAACP,UAAD,EAAkCC,QAAlC,EAAyE;IAClF,OAAOA,QAAQ,CAACO,kBAAhB;EACD;EAEDJ,mBAAmBA,CAACK,KAAD,EAAQ;IACzB,IAAI,CAAC,KAAKf,cAAV,EAA0B;MACxB;IACD;IAED,KAAKA,cAAL,CAAoBgB,OAApB,CAA4BC,QAAQ,IAAI;MACtC,MAAMC,KAAK,GAAGH,KAAK,CAACE,QAAD,CAAnB;MACA3B,MAAM,CACJ6B,MAAM,CAACC,QAAP,CAAgBF,KAAhB,KAA0BG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CADtB,KAAAK,MAAA,CAEDN,QAFC,iCAAN;IAID,CAND;EAOD;AAxGkD"},"metadata":{},"sourceType":"module","externalDependencies":[]}