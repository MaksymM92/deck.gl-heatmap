{"ast":null,"code":"import MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\nexport default class Vector extends MathArray {\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n  magnitude() {\n    return this.len();\n  }\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n  multiply() {\n    for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n      vectors[_key] = arguments[_key];\n    }\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n  divide() {\n    for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      vectors[_key2] = arguments[_key2];\n    }\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n  lengthSq() {\n    return this.lengthSquared();\n  }\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n  addScaledVector(a, b) {\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}","map":{"version":3,"names":["MathArray","checkNumber","assert","Vector","x","value","y","len","Math","sqrt","lengthSquared","magnitude","length","i","ELEMENTS","magnitudeSquared","distance","mathArray","distanceSquared","dist","dot","product","normalize","check","multiply","_len","arguments","vectors","Array","_key","vector","divide","_len2","_key2","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","a","b","copy","add","subVectors","subtract","multiplyVectors","addScaledVector","constructor","multiplyScalar"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/core/src/classes/base/vector.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\n/** Base class for vectors with at least 2 elements */\nexport default abstract class Vector extends MathArray {\n  // ACCESSORS\n\n  get x(): number {\n    return this[0];\n  }\n\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   *\n   * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements\n   * Instead we provide `len` and `magnitude`\n   */\n  len(): number {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   */\n  magnitude(): number {\n    return this.len();\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  lengthSquared(): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  magnitudeSquared(): number {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray: Readonly<NumericArray>): number {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray: Readonly<NumericArray>): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray: Readonly<NumericArray>): number {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize(): this {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  multiply(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n  distanceTo(vector: Readonly<NumericArray>): number {\n    return this.distance(vector);\n  }\n  distanceToSquared(vector: Readonly<NumericArray>): number {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i: number): number {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i: number, value: number): this {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a: Readonly<NumericArray>, b: number): this {\n    // @ts-expect-error error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}