{"ast":null,"code":"import { assertWebGLContext, log } from '@luma.gl/gltools';\nimport { parseGLSLCompilerError, getShaderName } from '../glsl-utils';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nimport Resource from './resource';\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\nexport class Shader extends Resource {\n  get [Symbol.toStringTag]() {\n    return 'Shader';\n  }\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case 35633:\n        return 'vertex-shader';\n      case 35632:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n    assert(typeof props.source === 'string', ERR_SOURCE);\n    const id = getShaderName(props.source, null) || props.id || uid(\"unnamed \".concat(Shader.getTypeName(props.shaderType)));\n    super(gl, {\n      id\n    });\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n    this.initialize(props);\n  }\n  initialize(_ref) {\n    let {\n      source\n    } = _ref;\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n  toString() {\n    return \"\".concat(Shader.getTypeName(this.shaderType), \":\").concat(this.id);\n  }\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n  _compile() {\n    let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.source;\n    if (!source.startsWith('#version ')) {\n      source = \"#version 100\\n\".concat(source);\n    }\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n    const compileStatus = this.getParameter(35713);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {\n        shaderName,\n        errors,\n        warnings\n      } = parseGLSLCompilerError(infoLog, this.source, this.shaderType, this.id);\n      log.error(\"GLSL compilation errors in \".concat(shaderName, \"\\n\").concat(errors))();\n      log.warn(\"GLSL compilation warnings in \".concat(shaderName, \"\\n\").concat(warnings))();\n      throw new Error(\"GLSL compilation errors in \".concat(shaderName));\n    }\n  }\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(35663),\n      source: this.getSource()\n    };\n  }\n}\nexport class VertexShader extends Shader {\n  get [Symbol.toStringTag]() {\n    return 'VertexShader';\n  }\n  constructor(gl, props) {\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n    super(gl, Object.assign({}, props, {\n      shaderType: 35633\n    }));\n  }\n  _createHandle() {\n    return this.gl.createShader(35633);\n  }\n}\nexport class FragmentShader extends Shader {\n  get [Symbol.toStringTag]() {\n    return 'FragmentShader';\n  }\n  constructor(gl, props) {\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n    super(gl, Object.assign({}, props, {\n      shaderType: 35632\n    }));\n  }\n  _createHandle() {\n    return this.gl.createShader(35632);\n  }\n}","map":{"version":3,"names":["assertWebGLContext","log","parseGLSLCompilerError","getShaderName","assert","uid","Resource","ERR_SOURCE","Shader","Symbol","toStringTag","getTypeName","shaderType","constructor","gl","props","source","id","concat","initialize","_ref","shaderName","_compile","getParameter","pname","getShaderParameter","handle","toString","getName","getSource","getShaderSource","getTranslatedSource","extension","getExtension","getTranslatedShaderSource","arguments","length","undefined","startsWith","shaderSource","compileShader","compileStatus","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","_deleteHandle","deleteShader","_getOptsFromHandle","type","VertexShader","Object","assign","_createHandle","createShader","FragmentShader"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/shader.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {assertWebGLContext, log} from '@luma.gl/gltools';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Shader';\n  }\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile(source = this.source) {\n    if (!source.startsWith('#version ')) {\n      source = `#version 100\\n${source}`;\n    }\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'VertexShader';\n  }\n\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'FragmentShader';\n  }\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}