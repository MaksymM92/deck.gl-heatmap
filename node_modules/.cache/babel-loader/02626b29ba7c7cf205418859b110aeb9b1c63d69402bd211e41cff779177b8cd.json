{"ast":null,"code":"import Buffer from '../classes/buffer';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { getCompositeGLType } from '../webgl-utils/attribute-utils';\nimport { formatValue } from '../utils/format-value';\nexport function getDebugTableForVertexArray(_ref) {\n  let {\n    vertexArray,\n    header = 'Attributes'\n  } = _ref;\n  if (!vertexArray.configuration) {\n    return {};\n  }\n  const table = {};\n  if (vertexArray.elements) {\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n  const attributes = vertexArray.values;\n  for (const attributeLocation in attributes) {\n    const info = vertexArray._getAttributeInfo(attributeLocation);\n    if (info) {\n      let rowHeader = \"\".concat(attributeLocation, \": \").concat(info.name);\n      const accessor = vertexArray.accessors[info.location];\n      if (accessor) {\n        rowHeader = \"\".concat(attributeLocation, \": \").concat(getGLSLDeclaration(info.name, accessor));\n      }\n      table[rowHeader] = getDebugTableRow(vertexArray, attributes[attributeLocation], accessor, header);\n    }\n  }\n  return table;\n}\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  const {\n    gl\n  } = vertexArray;\n  if (!attribute) {\n    return {\n      [header]: 'null',\n      'Format ': 'N/A'\n    };\n  }\n  let type = 'NOT PROVIDED';\n  let size = 1;\n  let verts = 0;\n  let bytes = 0;\n  let isInteger;\n  let marker;\n  let value;\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n    type = String(type).replace('Array', '');\n    isInteger = type.indexOf('nt') !== -1;\n  }\n  if (attribute instanceof Buffer) {\n    const buffer = attribute;\n    const {\n      data,\n      changed\n    } = buffer.getDebugData();\n    marker = changed ? '*' : '';\n    value = data;\n    bytes = buffer.byteLength;\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n    let format;\n    if (accessor) {\n      const instanced = accessor.divisor > 0;\n      format = \"\".concat(instanced ? 'I ' : 'P ', \" \").concat(verts, \" (x\").concat(size, \"=\").concat(bytes, \" bytes \").concat(getKey(gl, type), \")\");\n    } else {\n      isInteger = true;\n      format = \"\".concat(bytes, \" bytes\");\n    }\n    return {\n      [header]: \"\".concat(marker).concat(formatValue(value, {\n        size,\n        isInteger\n      })),\n      'Format ': format\n    };\n  }\n  value = attribute;\n  size = attribute.length;\n  type = String(attribute.constructor.name).replace('Array', '');\n  isInteger = type.indexOf('nt') !== -1;\n  return {\n    [header]: \"\".concat(formatValue(value, {\n      size,\n      isInteger\n    }), \" (constant)\"),\n    'Format ': \"\".concat(size, \"x\").concat(type, \" (constant)\")\n  };\n}\nfunction getGLSLDeclaration(name, accessor) {\n  const {\n    type,\n    size\n  } = accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  return typeAndName ? \"\".concat(name, \" (\").concat(typeAndName.name, \")\") : name;\n}","map":{"version":3,"names":["Buffer","getKey","getCompositeGLType","formatValue","getDebugTableForVertexArray","_ref","vertexArray","header","configuration","table","elements","ELEMENT_ARRAY_BUFFER","getDebugTableRow","attributes","values","attributeLocation","info","_getAttributeInfo","rowHeader","concat","name","accessor","accessors","location","getGLSLDeclaration","attribute","gl","type","size","verts","bytes","isInteger","marker","value","String","replace","indexOf","buffer","data","changed","getDebugData","byteLength","BYTES_PER_ELEMENT","format","instanced","divisor","length","constructor","typeAndName"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/debug/debug-vertex-array.js"],"sourcesContent":["import Buffer from '../classes/buffer';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {getCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {formatValue} from '../utils/format-value';\n\n// Creates object suitable as input for console.table\nexport function getDebugTableForVertexArray({vertexArray, header = 'Attributes'}) {\n  if (!vertexArray.configuration) {\n    return {};\n  }\n\n  const table = {}; // {[header]: {}};\n\n  // Add index (elements) if available\n  if (vertexArray.elements) {\n    // const elements = Object.assign({size: 1}, vertexArray.elements);\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n\n  // Add used attributes\n  const attributes = vertexArray.values;\n\n  for (const attributeLocation in attributes) {\n    const info = vertexArray._getAttributeInfo(attributeLocation);\n    if (info) {\n      let rowHeader = `${attributeLocation}: ${info.name}`;\n      const accessor = vertexArray.accessors[info.location];\n      if (accessor) {\n        rowHeader = `${attributeLocation}: ${getGLSLDeclaration(info.name, accessor)}`;\n      }\n      table[rowHeader] = getDebugTableRow(\n        vertexArray,\n        attributes[attributeLocation],\n        accessor,\n        header\n      );\n    }\n  }\n\n  return table;\n}\n\n/* eslint-disable max-statements */\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  const {gl} = vertexArray;\n\n  if (!attribute) {\n    return {\n      [header]: 'null',\n      'Format ': 'N/A'\n    };\n  }\n\n  let type = 'NOT PROVIDED';\n  let size = 1;\n  let verts = 0;\n  let bytes = 0;\n\n  let isInteger;\n  let marker;\n  let value;\n\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    isInteger = type.indexOf('nt') !== -1;\n  }\n\n  if (attribute instanceof Buffer) {\n    const buffer = attribute;\n\n    const {data, changed} = buffer.getDebugData();\n    marker = changed ? '*' : '';\n\n    value = data;\n    // @ts-ignore\n    bytes = buffer.byteLength;\n    // @ts-ignore\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n\n    let format;\n\n    if (accessor) {\n      const instanced = accessor.divisor > 0;\n      format = `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} bytes ${getKey(gl, type)})`;\n    } else {\n      // element buffer\n      isInteger = true;\n      format = `${bytes} bytes`;\n    }\n\n    return {\n      [header]: `${marker}${formatValue(value, {size, isInteger})}`,\n      'Format ': format\n    };\n  }\n\n  // CONSTANT VALUE\n  value = attribute;\n  size = attribute.length;\n  // Generate a type name by dropping Array from Float32Array etc.\n  type = String(attribute.constructor.name).replace('Array', '');\n  // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n  isInteger = type.indexOf('nt') !== -1;\n\n  return {\n    [header]: `${formatValue(value, {size, isInteger})} (constant)`,\n    'Format ': `${size}x${type} (constant)`\n  };\n}\n/* eslint-ensable max-statements */\n\nfunction getGLSLDeclaration(name, accessor) {\n  const {type, size} = accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  return typeAndName ? `${name} (${typeAndName.name})` : name;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}