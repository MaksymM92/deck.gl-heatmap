{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  iconAtlas: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  iconMapping: {\n    type: 'object',\n    value: {},\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  alphaCutoff: {\n    type: 'number',\n    value: 0.05,\n    min: 0,\n    max: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getIcon: {\n    type: 'accessor',\n    value: x => x.icon\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  onIconError: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  textureParameters: {\n    type: 'object',\n    ignore: true\n  }\n};\nexport default class IconLayer extends Layer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: 5121,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n    const {\n      iconAtlas,\n      iconMapping,\n      data,\n      getIcon,\n      textureParameters\n    } = props;\n    const {\n      iconManager\n    } = this.state;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? iconMapping : null,\n      textureParameters\n    });\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager.invalidate('getIcon');\n      }\n    } else if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) {\n      iconManager.packIcons(data, getIcon);\n    }\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n  finalizeState(context) {\n    super.finalizeState(context);\n    this.state.iconManager.finalize();\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      sizeUnits,\n      billboard,\n      alphaCutoff\n    } = this.props;\n    const {\n      iconManager\n    } = this.state;\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model.setUniforms(uniforms).setUniforms({\n        iconsTexture,\n        iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels,\n        billboard,\n        alphaCutoff\n      }).draw();\n    }\n  }\n  _getModel(gl) {\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        attributes: {\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n  _onError(evt) {\n    var _this$getCurrentLayer;\n    const onIconError = (_this$getCurrentLayer = this.getCurrentLayer()) === null || _this$getCurrentLayer === void 0 ? void 0 : _this$getCurrentLayer.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n  getInstanceOffset(icon) {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n  getInstanceIconFrame(icon) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n_defineProperty(IconLayer, \"defaultProps\", defaultProps);\n_defineProperty(IconLayer, \"layerName\", 'IconLayer');","map":{"version":3,"names":["_defineProperty","Layer","project32","picking","log","UNIT","Model","Geometry","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","optional","textureParameters","ignore","IconLayer","constructor","arguments","getShaders","modules","initializeState","state","iconManager","context","gl","onUpdate","_onUpdate","bind","onError","_onError","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","instancePixelOffset","updateState","params","oldProps","changeFlags","data","prePacked","internalState","isAsyncPropLoading","setProps","loadOptions","autoPacking","invalidate","dataChanged","updateTriggersChanged","all","packIcons","extensionsChanged","_this$state$model","model","delete","_getModel","invalidateAll","isLoaded","finalizeState","finalize","draw","_ref","uniforms","iconsTexture","getTexture","setUniforms","iconsTextureDim","width","height","positions","id","geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","evt","_this$getCurrentLayer","getCurrentLayer","error","message","anchorX","anchorY","getIconMapping","mapping","mask","y"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/dist/esm/icon-layer/icon-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  iconAtlas: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  iconMapping: {\n    type: 'object',\n    value: {},\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  alphaCutoff: {\n    type: 'number',\n    value: 0.05,\n    min: 0,\n    max: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getIcon: {\n    type: 'accessor',\n    value: x => x.icon\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  onIconError: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  textureParameters: {\n    type: 'object',\n    ignore: true\n  }\n};\nexport default class IconLayer extends Layer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: 5121,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n    const {\n      iconAtlas,\n      iconMapping,\n      data,\n      getIcon,\n      textureParameters\n    } = props;\n    const {\n      iconManager\n    } = this.state;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? iconMapping : null,\n      textureParameters\n    });\n\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager.invalidate('getIcon');\n      }\n    } else if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) {\n      iconManager.packIcons(data, getIcon);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context) {\n    super.finalizeState(context);\n    this.state.iconManager.finalize();\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      sizeUnits,\n      billboard,\n      alphaCutoff\n    } = this.props;\n    const {\n      iconManager\n    } = this.state;\n    const iconsTexture = iconManager.getTexture();\n\n    if (iconsTexture) {\n      this.state.model.setUniforms(uniforms).setUniforms({\n        iconsTexture,\n        iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels,\n        billboard,\n        alphaCutoff\n      }).draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        attributes: {\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  _onError(evt) {\n    var _this$getCurrentLayer;\n\n    const onIconError = (_this$getCurrentLayer = this.getCurrentLayer()) === null || _this$getCurrentLayer === void 0 ? void 0 : _this$getCurrentLayer.props.onIconError;\n\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  getInstanceOffset(icon) {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n\n}\n\n_defineProperty(IconLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(IconLayer, \"layerName\", 'IconLayer');\n//# sourceMappingURL=icon-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}