{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  _full3d: false,\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class SolidPolygonLayer extends Layer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n  get wrapLongitude() {\n    return false;\n  }\n  initializeState() {\n    const {\n      gl,\n      viewport\n    } = this.context;\n    let {\n      coordinateSystem\n    } = this.props;\n    const {\n      _full3d\n    } = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n    let preproject;\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n      if (_full3d) {\n        preproject = viewport.projectPosition.bind(viewport);\n      } else {\n        preproject = viewport.projectFlat.bind(viewport);\n      }\n    }\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        preproject,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    attributeManager.remove(['instancePickingColors']);\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: 5121,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n        },\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n  }\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      extruded,\n      filled,\n      wireframe,\n      elevationScale\n    } = this.props;\n    const {\n      topModel,\n      sideModel,\n      polygonTesselator\n    } = this.state;\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(3);\n        sideModel.setUniforms({\n          isWireframe: true\n        }).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(6);\n        sideModel.setUniforms({\n          isWireframe: false\n        }).draw();\n      }\n    }\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    this.updateGeometry(updateParams);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateParams;\n    const attributeManager = this.getAttributeManager();\n    const regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n    if (regenerateModels) {\n      var _this$state$models;\n      (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(model => model.delete());\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n  updateGeometry(_ref3) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref3;\n    const geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n    if (geometryConfigChanged) {\n      const {\n        polygonTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged,\n        full3d: props._full3d\n      });\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n  _getModels(gl) {\n    const {\n      id,\n      filled,\n      extruded\n    } = this.props;\n    let topModel;\n    let sideModel;\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n      topModel = new Model(gl, {\n        ...shaders,\n        id: \"\".concat(id, \"-top\"),\n        drawMode: 4,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: \"\".concat(id, \"-side\"),\n        geometry: new Geometry({\n          drawMode: 1,\n          vertexCount: 4,\n          attributes: {\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n      sideModel.userData.excludeAttributes = {\n        indices: true\n      };\n    }\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n  calculateIndices(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n  calculatePositions(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n_defineProperty(SolidPolygonLayer, \"defaultProps\", defaultProps);\n_defineProperty(SolidPolygonLayer, \"layerName\", 'SolidPolygonLayer');","map":{"version":3,"names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","_full3d","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","constructor","arguments","_defineProperty","getShaders","vs","defines","RING_WINDING_ORDER_CW","props","modules","wrapLongitude","initializeState","gl","viewport","context","coordinateSystem","isGeospatial","DEFAULT","LNGLAT","preproject","projectPosition","bind","projectFlat","setState","numInstances","polygonTesselator","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","_ref","index","target","encodePickingColor","__source","instancePickingColors","getPickingInfo","params","info","data","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","_ref2","uniforms","topModel","sideModel","state","renderUniforms","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","_this$state$models","models","forEach","model","delete","_getModels","invalidateAll","_ref3","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","resolution","full3d","startIndices","vertexStarts","id","shaders","NON_INSTANCED_MODEL","concat","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = any> = _SolidPolygonLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  _full3d: false,\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    const {_full3d} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    let preproject: ((xy: number[]) => number[]) | undefined;\n\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n      if (_full3d) {\n        preproject = viewport.projectPosition.bind(viewport);\n      } else {\n        preproject = viewport.projectFlat.bind(viewport);\n      }\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged,\n        full3d: props._full3d\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels(gl: WebGLRenderingContext): Model {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}