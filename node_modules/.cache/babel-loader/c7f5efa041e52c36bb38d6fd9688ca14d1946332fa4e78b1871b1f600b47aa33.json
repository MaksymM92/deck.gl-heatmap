{"ast":null,"code":"import { VERTEX_SHADER, FRAGMENT_SHADER } from './constants';\nimport { resolveModules } from './resolve-modules';\nimport { getPlatformShaderDefines, getVersionDefines } from './platform-defines';\nimport injectShader, { DECLARATION_INJECT_MARKER } from './inject-shader';\nimport transpileShader from './transpile-shader';\nimport { assert } from '../utils';\nconst INJECT_SHADER_DECLARATIONS = \"\\n\\n\".concat(DECLARATION_INJECT_MARKER, \"\\n\\n\");\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\nconst FRAGMENT_SHADER_PROLOGUE = \"precision highp float;\\n\\n\";\nexport function assembleShaders(gl, opts) {\n  const {\n    vs,\n    fs\n  } = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {\n      source: vs,\n      type: VERTEX_SHADER,\n      modules\n    })),\n    fs: assembleShader(gl, Object.assign({}, opts, {\n      source: fs,\n      type: FRAGMENT_SHADER,\n      modules\n    })),\n    getUniforms: assembleGetUniforms(modules)\n  };\n}\nfunction assembleShader(gl, _ref) {\n  let {\n    id,\n    source,\n    type,\n    modules,\n    defines = {},\n    hookFunctions = [],\n    inject = {},\n    transpileToGLSL100 = false,\n    prologue = true,\n    log\n  } = _ref;\n  assert(typeof source === 'string', 'shader source must be a string');\n  const isVertex = type === VERTEX_SHADER;\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300;\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  } else {\n    versionLine = \"#version \".concat(glslVersion);\n  }\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n  let assembledSource = prologue ? \"\".concat(versionLine, \"\\n\").concat(getShaderName({\n    id,\n    source,\n    type\n  }), \"\\n\").concat(getShaderType({\n    type\n  }), \"\\n\").concat(getPlatformShaderDefines(gl), \"\\n\").concat(getVersionDefines(gl, glslVersion, !isVertex), \"\\n\").concat(getApplicationDefines(allDefines), \"\\n\").concat(isVertex ? '' : FRAGMENT_SHADER_PROLOGUE, \"\\n\") : \"\".concat(versionLine, \"\\n\");\n  const hookFunctionMap = normalizeHookFunctions(hookFunctions);\n  const hookInjections = {};\n  const declInjections = {};\n  const mainInjections = {};\n  for (const key in inject) {\n    const injection = typeof inject[key] === 'string' ? {\n      injection: inject[key],\n      order: 0\n    } : inject[key];\n    const match = key.match(/^(v|f)s:(#)?([\\w-]+)$/);\n    if (match) {\n      const hash = match[2];\n      const name = match[3];\n      if (hash) {\n        if (name === 'decl') {\n          declInjections[key] = [injection];\n        } else {\n          mainInjections[key] = [injection];\n        }\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      mainInjections[key] = [injection];\n    }\n  }\n  for (const module of modules) {\n    if (log) {\n      module.checkDeprecations(coreSource, log);\n    }\n    const moduleSource = module.getModuleSource(type, glslVersion);\n    assembledSource += moduleSource;\n    const injections = module.injections[type];\n    for (const key in injections) {\n      const match = key.match(/^(v|f)s:#([\\w-]+)$/);\n      if (match) {\n        const name = match[2];\n        const injectionType = name === 'decl' ? declInjections : mainInjections;\n        injectionType[key] = injectionType[key] || [];\n        injectionType[key].push(injections[key]);\n      } else {\n        hookInjections[key] = hookInjections[key] || [];\n        hookInjections[key].push(injections[key]);\n      }\n    }\n  }\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n  assembledSource = injectShader(assembledSource, type, declInjections);\n  assembledSource += getHookFunctions(hookFunctionMap[type], hookInjections);\n  assembledSource += coreSource;\n  assembledSource = injectShader(assembledSource, type, mainInjections);\n  assembledSource = transpileShader(assembledSource, transpileToGLSL100 ? 100 : glslVersion, isVertex);\n  return assembledSource;\n}\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\nfunction getShaderType(_ref2) {\n  let {\n    type\n  } = _ref2;\n  return \"\\n#define SHADER_TYPE_\".concat(SHADER_TYPE[type].toUpperCase(), \"\\n\");\n}\nfunction getShaderName(_ref3) {\n  let {\n    id,\n    source,\n    type\n  } = _ref3;\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName ? \"\\n#define SHADER_NAME \".concat(id, \"_\").concat(SHADER_TYPE[type], \"\\n\\n\") : '';\n}\nfunction getApplicationDefines() {\n  let defines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += \"#define \".concat(define.toUpperCase(), \" \").concat(defines[define], \"\\n\");\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\nfunction getHookFunctions(hookFunctions, hookInjections) {\n  let result = '';\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += \"void \".concat(hookFunction.signature, \" {\\n\");\n    if (hookFunction.header) {\n      result += \"  \".concat(hookFunction.header);\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n      for (const injection of injections) {\n        result += \"  \".concat(injection.injection, \"\\n\");\n      }\n    }\n    if (hookFunction.footer) {\n      result += \"  \".concat(hookFunction.footer);\n    }\n    result += '}\\n';\n  }\n  return result;\n}\nfunction normalizeHookFunctions(hookFunctions) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n  hookFunctions.forEach(hook => {\n    let opts;\n    if (typeof hook !== 'string') {\n      opts = hook;\n      hook = opts.hook;\n    } else {\n      opts = {};\n    }\n    hook = hook.trim();\n    const [stage, signature] = hook.split(':');\n    const name = hook.replace(/\\(.+/, '');\n    result[stage][name] = Object.assign(opts, {\n      signature\n    });\n  });\n  return result;\n}","map":{"version":3,"names":["VERTEX_SHADER","FRAGMENT_SHADER","resolveModules","getPlatformShaderDefines","getVersionDefines","injectShader","DECLARATION_INJECT_MARKER","transpileShader","assert","INJECT_SHADER_DECLARATIONS","concat","SHADER_TYPE","FRAGMENT_SHADER_PROLOGUE","assembleShaders","gl","opts","vs","fs","modules","assembleShader","Object","assign","source","type","getUniforms","assembleGetUniforms","_ref","id","defines","hookFunctions","inject","transpileToGLSL100","prologue","log","isVertex","sourceLines","split","glslVersion","versionLine","coreSource","indexOf","slice","join","allDefines","forEach","module","getDefines","assembledSource","getShaderName","getShaderType","getApplicationDefines","hookFunctionMap","normalizeHookFunctions","hookInjections","declInjections","mainInjections","key","injection","order","match","hash","name","checkDeprecations","moduleSource","getModuleSource","injections","injectionType","push","getHookFunctions","uniforms","moduleUniforms","_ref2","toUpperCase","_ref3","injectShaderName","arguments","length","undefined","count","sourceText","define","value","Number","isFinite","result","hookName","hookFunction","signature","header","sort","a","b","footer","hook","trim","stage","replace"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/shadertools/src/lib/assemble-shaders.js"],"sourcesContent":["import {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {resolveModules} from './resolve-modules';\nimport {getPlatformShaderDefines, getVersionDefines} from './platform-defines';\nimport injectShader, {DECLARATION_INJECT_MARKER} from './inject-shader';\nimport transpileShader from './transpile-shader';\nimport {assert} from '../utils';\n\nconst INJECT_SHADER_DECLARATIONS = `\\n\\n${DECLARATION_INJECT_MARKER}\\n\\n`;\n\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\n\n// Precision prologue to inject before functions are injected in shader\n// TODO - extract any existing prologue in the fragment source and move it up...\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\n\n// Inject a list of modules\nexport function assembleShaders(gl, opts) {\n  const {vs, fs} = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {source: vs, type: VERTEX_SHADER, modules})),\n    fs: assembleShader(gl, Object.assign({}, opts, {source: fs, type: FRAGMENT_SHADER, modules})),\n    getUniforms: assembleGetUniforms(modules)\n  };\n}\n\n// Pulls together complete source code for either a vertex or a fragment shader\n// adding prologues, requested module chunks, and any final injections.\nfunction assembleShader(\n  gl,\n  {\n    id,\n    source,\n    type,\n    modules,\n    defines = {},\n    hookFunctions = [],\n    inject = {},\n    transpileToGLSL100 = false,\n    prologue = true,\n    log\n  }\n) {\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  const isVertex = type === VERTEX_SHADER;\n\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  // Extract any version directive string from source.\n  // TODO : keep all pre-processor statements at the begining of the shader.\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300; // TODO - regexp that matches actual version number\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  } else {\n    versionLine = `#version ${glslVersion}`;\n  }\n\n  // Combine Module and Application Defines\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = prologue\n    ? `\\\n${versionLine}\n${getShaderName({id, source, type})}\n${getShaderType({type})}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(allDefines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n`\n    : `${versionLine}\n`;\n\n  const hookFunctionMap = normalizeHookFunctions(hookFunctions);\n\n  // Add source of dependent modules in resolved order\n  const hookInjections = {};\n  const declInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    const match = key.match(/^(v|f)s:(#)?([\\w-]+)$/);\n    if (match) {\n      const hash = match[2];\n      const name = match[3];\n      if (hash) {\n        if (name === 'decl') {\n          declInjections[key] = [injection];\n        } else {\n          mainInjections[key] = [injection];\n        }\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    if (log) {\n      module.checkDeprecations(coreSource, log);\n    }\n    const moduleSource = module.getModuleSource(type, glslVersion);\n    // Add the module source, and a #define that declares it presence\n    assembledSource += moduleSource;\n\n    const injections = module.injections[type];\n    for (const key in injections) {\n      const match = key.match(/^(v|f)s:#([\\w-]+)$/);\n      if (match) {\n        const name = match[2];\n        const injectionType = name === 'decl' ? declInjections : mainInjections;\n        injectionType[key] = injectionType[key] || [];\n        injectionType[key].push(injections[key]);\n      } else {\n        hookInjections[key] = hookInjections[key] || [];\n        hookInjections[key].push(injections[key]);\n      }\n    }\n  }\n\n  // For injectShader\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n\n  assembledSource = injectShader(assembledSource, type, declInjections);\n\n  assembledSource += getHookFunctions(hookFunctionMap[type], hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, type, mainInjections);\n\n  assembledSource = transpileShader(\n    assembledSource,\n    transpileToGLSL100 ? 100 : glslVersion,\n    isVertex\n  );\n\n  return assembledSource;\n}\n\n// Returns a combined `getUniforms` covering the options for all the modules,\n// the created function will pass on options to the inidividual `getUniforms`\n// function of each shader module and combine the results into one object that\n// can be passed to setUniforms.\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\n\nfunction getShaderType({type}) {\n  return `\n#define SHADER_TYPE_${SHADER_TYPE[type].toUpperCase()}\n`;\n}\n\n// Generate \"glslify-compatible\" SHADER_NAME defines\n// These are understood by the GLSL error parsing function\n// If id is provided and no SHADER_NAME constant is present in source, create one\nfunction getShaderName({id, source, type}) {\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName\n    ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n`\n    : '';\n}\n\n// Generates application defines from an object\nfunction getApplicationDefines(defines = {}) {\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\n\nfunction getHookFunctions(hookFunctions, hookInjections) {\n  let result = '';\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n    result += '}\\n';\n  }\n\n  return result;\n}\n\nfunction normalizeHookFunctions(hookFunctions) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  hookFunctions.forEach(hook => {\n    let opts;\n    if (typeof hook !== 'string') {\n      opts = hook;\n      hook = opts.hook;\n    } else {\n      opts = {};\n    }\n    hook = hook.trim();\n    const [stage, signature] = hook.split(':');\n    const name = hook.replace(/\\(.+/, '');\n    result[stage][name] = Object.assign(opts, {signature});\n  });\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}