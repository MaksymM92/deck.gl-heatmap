{"ast":null,"code":"import IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\nexport function getDefaultProps(_ref) {\n  let {\n    type,\n    props\n  } = _ref;\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\nexport function forwardProps(layer, mapping) {\n  const {\n    transitions,\n    updateTriggers\n  } = layer.props;\n  const result = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      value = layer.getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}","map":{"version":3,"names":["IconLayer","ScatterplotLayer","TextLayer","PathLayer","SolidPolygonLayer","POINT_LAYER","circle","type","props","filled","stroked","lineWidthMaxPixels","lineWidthMinPixels","lineWidthScale","lineWidthUnits","pointRadiusMaxPixels","pointRadiusMinPixels","pointRadiusScale","pointRadiusUnits","pointAntialiasing","pointBillboard","getFillColor","getLineColor","getLineWidth","getPointRadius","icon","iconAtlas","iconMapping","iconSizeMaxPixels","iconSizeMinPixels","iconSizeScale","iconSizeUnits","iconAlphaCutoff","iconBillboard","getIcon","getIconAngle","getIconColor","getIconPixelOffset","getIconSize","text","textSizeMaxPixels","textSizeMinPixels","textSizeScale","textSizeUnits","textBackground","textBackgroundPadding","textFontFamily","textFontWeight","textLineHeight","textMaxWidth","textOutlineColor","textOutlineWidth","textWordBreak","textCharacterSet","textBillboard","textFontSettings","getText","getTextAngle","getTextColor","getTextPixelOffset","getTextSize","getTextAnchor","getTextAlignmentBaseline","getTextBackgroundColor","getTextBorderColor","getTextBorderWidth","LINE_LAYER","lineJointRounded","lineCapRounded","lineMiterLimit","lineBillboard","POLYGON_LAYER","extruded","wireframe","elevationScale","material","_full3d","getElevation","getDefaultProps","_ref","result","key","defaultProps","forwardProps","layer","mapping","transitions","updateTriggers","getPosition","geometry","sourceKey","targetKey","value","startsWith","getSubLayerAccessor"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/dist/esm/geojson-layer/sub-layer-map.js"],"sourcesContent":["import IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\nexport function getDefaultProps({\n  type,\n  props\n}) {\n  const result = {};\n\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n\n  return result;\n}\nexport function forwardProps(layer, mapping) {\n  const {\n    transitions,\n    updateTriggers\n  } = layer.props;\n  const result = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n\n    if (sourceKey.startsWith('get')) {\n      value = layer.getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n\n    result[targetKey] = value;\n  }\n\n  return result;\n}\n//# sourceMappingURL=sub-layer-map.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}