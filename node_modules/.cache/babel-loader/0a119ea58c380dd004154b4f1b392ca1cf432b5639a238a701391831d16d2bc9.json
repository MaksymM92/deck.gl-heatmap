{"ast":null,"code":"import { isWebGL2 } from '@luma.gl/core';\nexport function getBounds(points) {\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n  return [xMin, yMin, xMax, yMax];\n}\nexport function boundsContain(currentBounds, targetBounds) {\n  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {\n    return true;\n  }\n  return false;\n}\nconst scratchArray = new Float32Array(12);\nexport function packVertices(points) {\n  let dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  let index = 0;\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n  return scratchArray;\n}\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    newWidth = width / height * currentHeight;\n  } else {\n    newHeight = height / width * currentWidth;\n  }\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];\n}\nexport function getTextureCoordinates(point, bounds) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\nexport function getTextureParams(_ref) {\n  let {\n    gl,\n    floatTargetSupport\n  } = _ref;\n  return floatTargetSupport ? {\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: 5126\n  } : {\n    format: 6408,\n    type: 5121\n  };\n}","map":{"version":3,"names":["isWebGL2","getBounds","points","x","map","p","y","xMin","Math","min","apply","xMax","max","yMin","yMax","boundsContain","currentBounds","targetBounds","scratchArray","Float32Array","packVertices","dimensions","arguments","length","undefined","index","point","i","scaleToAspectRatio","boundingBox","width","height","currentWidth","currentHeight","newWidth","newHeight","xCenter","yCenter","getTextureCoordinates","bounds","getTextureParams","_ref","gl","floatTargetSupport","format","type"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/heatmap-layer/heatmap-layer-utils.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/core';\n\nexport function getBounds(points: number[][]): number[] {\n  // Now build bounding box in world space (aligned to world coordiante system)\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n\n  return [xMin, yMin, xMax, yMax];\n}\n\n// true if currentBounds contains targetBounds, false otherwise\nexport function boundsContain(currentBounds: number[], targetBounds: number[]): boolean {\n  if (\n    targetBounds[0] >= currentBounds[0] &&\n    targetBounds[2] <= currentBounds[2] &&\n    targetBounds[1] >= currentBounds[1] &&\n    targetBounds[3] <= currentBounds[3]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nconst scratchArray = new Float32Array(12);\n\n// For given rectangle bounds generates two triangles vertices that coverit completely\nexport function packVertices(points: number[][], dimensions: number = 2): Float32Array {\n  let index = 0;\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n  return scratchArray;\n}\n\n// Expands boundingBox:[xMin, yMin, xMax, yMax] to match aspect ratio of given width and height\nexport function scaleToAspectRatio(boundingBox: number[], width: number, height: number): number[] {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    // expand bounding box width\n    newWidth = (width / height) * currentHeight;\n  } else {\n    newHeight = (height / width) * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n\n  return [\n    xCenter - newWidth / 2,\n    yCenter - newHeight / 2,\n    xCenter + newWidth / 2,\n    yCenter + newHeight / 2\n  ];\n}\n\n// Get texture coordiante of point inside a bounding box\nexport function getTextureCoordinates(point: number[], bounds: number[]) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n\n// Returns format and type for creating texture objects\nexport function getTextureParams({gl, floatTargetSupport}) {\n  return floatTargetSupport\n    ? {\n        // format:  should be RGBA32F on WebGL2 (float textures), RGBA in WebGL1 for float or non float textures\n        format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n        type: GL.FLOAT\n      }\n    : {\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE\n      };\n}\n"],"mappings":"AACA,SAAQA,QAAR,QAAuB,eAAvB;AAEA,OAAO,SAASC,SAATA,CAAmBC,MAAnB,EAAiD;EAEtD,MAAMC,CAAC,GAAGD,MAAM,CAACE,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAjB,CAAV;EACA,MAAMC,CAAC,GAAGJ,MAAM,CAACE,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAjB,CAAV;EAEA,MAAME,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBP,CAArB,CAAb;EACA,MAAMQ,IAAI,GAAGH,IAAI,CAACI,GAAL,CAASF,KAAT,CAAe,IAAf,EAAqBP,CAArB,CAAb;EACA,MAAMU,IAAI,GAAGL,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBJ,CAArB,CAAb;EACA,MAAMQ,IAAI,GAAGN,IAAI,CAACI,GAAL,CAASF,KAAT,CAAe,IAAf,EAAqBJ,CAArB,CAAb;EAEA,OAAO,CAACC,IAAD,EAAOM,IAAP,EAAaF,IAAb,EAAmBG,IAAnB,CAAP;AACD;AAGD,OAAO,SAASC,aAATA,CAAuBC,aAAvB,EAAgDC,YAAhD,EAAiF;EACtF,IACEA,YAAY,CAAC,CAAD,CAAZ,IAAmBD,aAAa,CAAC,CAAD,CAAhC,IACAC,YAAY,CAAC,CAAD,CAAZ,IAAmBD,aAAa,CAAC,CAAD,CADhC,IAEAC,YAAY,CAAC,CAAD,CAAZ,IAAmBD,aAAa,CAAC,CAAD,CAFhC,IAGAC,YAAY,CAAC,CAAD,CAAZ,IAAmBD,aAAa,CAAC,CAAD,CAJlC,EAKE;IACA,OAAO,IAAP;EACD;EACD,OAAO,KAAP;AACD;AAED,MAAME,YAAY,GAAG,IAAIC,YAAJ,CAAiB,EAAjB,CAArB;AAGA,OAAO,SAASC,YAATA,CAAsBlB,MAAtB,EAAgF;EAAA,IAAtCmB,UAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAA/D;EACL,IAAIG,KAAK,GAAG,CAAZ;EACA,KAAK,MAAMC,KAAX,IAAoBxB,MAApB,EAA4B;IAC1B,KAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgCM,CAAC,EAAjC,EAAqC;MACnCT,YAAY,CAACO,KAAK,EAAN,CAAZ,GAAwBC,KAAK,CAACC,CAAD,CAAL,IAAY,CAApC;IACD;EACF;EACD,OAAOT,YAAP;AACD;AAGD,OAAO,SAASU,kBAATA,CAA4BC,WAA5B,EAAmDC,KAAnD,EAAkEC,MAAlE,EAA4F;EACjG,MAAM,CAACxB,IAAD,EAAOM,IAAP,EAAaF,IAAb,EAAmBG,IAAnB,IAA2Be,WAAjC;EAEA,MAAMG,YAAY,GAAGrB,IAAI,GAAGJ,IAA5B;EACA,MAAM0B,aAAa,GAAGnB,IAAI,GAAGD,IAA7B;EAEA,IAAIqB,QAAQ,GAAGF,YAAf;EACA,IAAIG,SAAS,GAAGF,aAAhB;EACA,IAAID,YAAY,GAAGC,aAAf,GAA+BH,KAAK,GAAGC,MAA3C,EAAmD;IAEjDG,QAAQ,GAAIJ,KAAK,GAAGC,MAAT,GAAmBE,aAA9B;EACD,CAHD,MAGO;IACLE,SAAS,GAAIJ,MAAM,GAAGD,KAAV,GAAmBE,YAA/B;EACD;EAED,IAAIE,QAAQ,GAAGJ,KAAf,EAAsB;IACpBI,QAAQ,GAAGJ,KAAX;IACAK,SAAS,GAAGJ,MAAZ;EACD;EAED,MAAMK,OAAO,GAAG,CAACzB,IAAI,GAAGJ,IAAR,IAAgB,CAAhC;EACA,MAAM8B,OAAO,GAAG,CAACvB,IAAI,GAAGD,IAAR,IAAgB,CAAhC;EAEA,OAAO,CACLuB,OAAO,GAAGF,QAAQ,GAAG,CADhB,EAELG,OAAO,GAAGF,SAAS,GAAG,CAFjB,EAGLC,OAAO,GAAGF,QAAQ,GAAG,CAHhB,EAILG,OAAO,GAAGF,SAAS,GAAG,CAJjB,CAAP;AAMD;AAGD,OAAO,SAASG,qBAATA,CAA+BZ,KAA/B,EAAgDa,MAAhD,EAAkE;EACvE,MAAM,CAAChC,IAAD,EAAOM,IAAP,EAAaF,IAAb,EAAmBG,IAAnB,IAA2ByB,MAAjC;EACA,OAAO,CAAC,CAACb,KAAK,CAAC,CAAD,CAAL,GAAWnB,IAAZ,KAAqBI,IAAI,GAAGJ,IAA5B,CAAD,EAAoC,CAACmB,KAAK,CAAC,CAAD,CAAL,GAAWb,IAAZ,KAAqBC,IAAI,GAAGD,IAA5B,CAApC,CAAP;AACD;AAGD,OAAO,SAAS2B,gBAATA,CAAAC,IAAA,EAAoD;EAAA,IAA1B;IAACC,EAAD;IAAKC;EAAL,CAA1B,GAAAF,IAAA;EACL,OAAOE,kBAAkB,GACrB;IAEEC,MAAM,EAAE5C,QAAQ,CAAC0C,EAAD,CAAR,eAFV;IAGEG,IAAI;EAHN,CADqB,GAMrB;IACED,MAAM,MADR;IAEEC,IAAI;EAFN,CANJ;AAUD"},"metadata":{},"sourceType":"module","externalDependencies":[]}