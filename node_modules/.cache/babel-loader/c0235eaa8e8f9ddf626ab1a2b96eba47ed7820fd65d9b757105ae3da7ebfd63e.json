{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nexport class MapState extends ViewState {\n  constructor(options) {\n    const {\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing = 0,\n      pitch = 0,\n      altitude = 1.5,\n      position = [0, 0, 0],\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom,\n      normalize = true\n    } = options;\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    }, {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    });\n    _defineProperty(this, \"makeViewport\", void 0);\n    this.makeViewport = options.makeViewport;\n  }\n  panStart(_ref) {\n    let {\n      pos\n    } = _ref;\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n  pan(_ref2) {\n    let {\n      pos,\n      startPos\n    } = _ref2;\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n    if (!startPanLngLat) {\n      return this;\n    }\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n    return this._getUpdatedState(newProps);\n  }\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n  rotateStart(_ref3) {\n    let {\n      pos\n    } = _ref3;\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n  rotate(_ref4) {\n    let {\n      pos,\n      deltaAngleX = 0,\n      deltaAngleY = 0\n    } = _ref4;\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this.getState();\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n  zoomStart(_ref5) {\n    let {\n      pos\n    } = _ref5;\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n  zoom(_ref6) {\n    let {\n      pos,\n      startPos,\n      scale\n    } = _ref6;\n    let {\n      startZoom,\n      startZoomLngLat\n    } = this.getState();\n    if (!startZoomLngLat) {\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n    let zoom = startZoom + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n    const zoomedViewport = this.makeViewport({\n      ...this.getViewportProps(),\n      zoom\n    });\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n  zoomIn() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._zoomFromCenter(speed);\n  }\n  zoomOut() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._zoomFromCenter(1 / speed);\n  }\n  moveLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([speed, 0]);\n  }\n  moveRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([-speed, 0]);\n  }\n  moveUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([0, speed]);\n  }\n  moveDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([0, -speed]);\n  }\n  rotateLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n  rotateRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n  rotateUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n  rotateDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {\n      ...this.getViewportProps()\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n  applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      maxPitch,\n      minPitch,\n      pitch\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n    const {\n      normalize = true\n    } = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n    return props;\n  }\n  _zoomFromCenter(scale) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n  _panFromCenter(offset) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n  _getUpdatedState(newProps) {\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n  _unproject(pos) {\n    const viewport = this.makeViewport(this.getViewportProps());\n    return pos && viewport.unproject(pos);\n  }\n  _getNewRotation(pos, startPos, startPitch, startBearing) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n    const {\n      minPitch,\n      maxPitch\n    } = this.getViewportProps();\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\nexport default class MapController extends Controller {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"ControllerState\", MapState);\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: {\n          compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n          required: ['longitude', 'latitude', 'zoom']\n        }\n      })\n    });\n    _defineProperty(this, \"dragMode\", 'pan');\n  }\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n    super.setProps(props);\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      this.updateViewport(new this.ControllerState({\n        makeViewport: this.makeViewport,\n        ...props,\n        ...this.state\n      }));\n    }\n  }\n}","map":{"version":3,"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","LinearInterpolator","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","constructor","options","width","height","latitude","longitude","zoom","bearing","pitch","altitude","position","maxZoom","minZoom","maxPitch","minPitch","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","_defineProperty","makeViewport","panStart","_ref","pos","_getUpdatedState","_unproject","pan","_ref2","startPos","getState","viewport","getViewportProps","newProps","panByPosition","panEnd","rotateStart","_ref3","rotate","_ref4","deltaAngleX","deltaAngleY","undefined","newRotation","_getNewRotation","rotateEnd","zoomStart","_ref5","_ref6","scale","Math","log2","zoomedViewport","zoomEnd","zoomIn","speed","arguments","length","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","props","abs","applyConstraints","Object","assign","offset","unproject","deltaX","deltaY","centerY","startY","deltaScaleX","deltaScaleY","MapController","transitionDuration","transitionInterpolator","transitionProps","compare","required","setProps","oldProps","dimensionChanged","updateViewport","ControllerState","state"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/controllers/map-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport type Viewport from '../viewports/viewport';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport type MapStateProps = {\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width: number;\n  /** The height of the viewport */\n  height: number;\n  /** The latitude at the center of the viewport */\n  latitude: number;\n  /** The longitude at the center of the viewport */\n  longitude: number;\n  /** The tile zoom level of the map. */\n  zoom: number;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize?: boolean;\n};\n\ntype MapStateInternal = {\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat?: [number, number];\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat?: [number, number];\n  /* Pointer position when rotation started */\n  startRotatePos?: [number, number];\n  /** Bearing when current perspective rotate operation started */\n  startBearing?: number;\n  /** Pitch when current perspective rotate operation started */\n  startPitch?: number;\n  /** Zoom when current zoom operation started */\n  startZoom?: number;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState<MapState, MapStateProps, MapStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: MapStateProps &\n      MapStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing = 0,\n      /** The pitch of the viewport in degrees */\n      pitch = 0,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude = 1.5,\n      /** Viewport position */\n      position = [0, 0, 0],\n\n      /** Viewport constraints */\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport */\n      normalize = true\n    } = options;\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super(\n      {\n        width,\n        height,\n        latitude,\n        longitude,\n        zoom,\n        bearing,\n        pitch,\n        altitude,\n        maxZoom,\n        minZoom,\n        maxPitch,\n        minPitch,\n        normalize,\n        position\n      },\n      {\n        startPanLngLat,\n        startZoomLngLat,\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): MapState {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): MapState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): MapState {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): MapState {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this.getState();\n\n    if (!startZoomLngLat) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {maxZoom, minZoom} = this.getViewportProps();\n    let zoom = (startZoom as number) + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): MapState {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed: number = 2): MapState {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed: number = 100): MapState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed: number = 100): MapState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed: number = 100): MapState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed: number = 100): MapState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState: MapState): MapStateProps {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): MapState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos?: [number, number]): [number, number] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(\n    pos: [number, number],\n    startPos: [number, number],\n    startPitch: number,\n    startBearing: number\n  ): {\n    pitch: number;\n    bearing: number;\n  } {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this.getViewportProps();\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller<MapState> {\n  ControllerState = MapState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n        required: ['longitude', 'latitude', 'zoom']\n      }\n    })\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps & MapStateProps) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...props,\n          ...this.state\n        })\n      );\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}