{"ast":null,"code":"import { uid, assert } from '@luma.gl/webgl';\nexport const DRAW_MODE = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006\n};\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n    this._setAttributes(attributes, indices);\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n  }\n  get mode() {\n    return this.drawMode;\n  }\n  getVertexCount() {\n    return this.vertexCount;\n  }\n  getAttributes() {\n    return this.indices ? {\n      indices: this.indices,\n      ...this.attributes\n    } : this.attributes;\n  }\n  _print(attributeName) {\n    return \"Geometry \".concat(this.id, \" attribute \").concat(attributeName);\n  }\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {\n        value: indices,\n        size: 1\n      } : indices;\n    }\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n      attribute = ArrayBuffer.isView(attribute) ? {\n        value: attribute\n      } : attribute;\n      assert(ArrayBuffer.isView(attribute.value), \"\".concat(this._print(attributeName), \": must be typed array or object with value as typed array\"));\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n    return this;\n  }\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {\n        value,\n        size,\n        constant\n      } = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}","map":{"version":3,"names":["uid","assert","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","constructor","props","arguments","length","undefined","id","drawMode","attributes","indices","vertexCount","userData","_setAttributes","_calculateVertexCount","mode","getVertexCount","getAttributes","_print","attributeName","concat","ArrayBuffer","isView","value","size","attribute","isIndexed","Object","assign","Infinity","constant","Math","min","Number","isFinite"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/engine/src/geometry/geometry.js"],"sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}