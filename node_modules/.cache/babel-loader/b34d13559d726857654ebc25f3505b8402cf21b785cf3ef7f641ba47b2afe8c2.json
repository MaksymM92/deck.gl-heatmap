{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nexport default class ScatterplotLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    if (params.changeFlags.extensionsChanged) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      stroked: stroked ? 1 : 0,\n      filled,\n      billboard,\n      antialiasing,\n      radiusUnits: UNIT[radiusUnits],\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      lineWidthUnits: UNIT[lineWidthUnits],\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    }).draw();\n  }\n  _getModel(gl) {\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount: 4,\n        attributes: {\n          positions: {\n            size: 3,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n_defineProperty(ScatterplotLayer, \"defaultProps\", defaultProps);\n_defineProperty(ScatterplotLayer, \"layerName\", 'ScatterplotLayer');","map":{"version":3,"names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","_ref","uniforms","setUniforms","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/scatterplot-layer/scatterplot-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = any> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}