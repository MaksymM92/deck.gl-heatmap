{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\nfunction normalizeData(data) {\n  const {\n    header,\n    attributes\n  } = data;\n  if (!header || !attributes) {\n    return;\n  }\n  data.length = header.vertexCount;\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n  updateState(params) {\n    const {\n      changeFlags,\n      props\n    } = params;\n    super.updateState(params);\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      pointSize,\n      sizeUnits\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeUnits: UNIT[sizeUnits],\n      radiusPixels: pointSize\n    }).draw();\n  }\n  _getModel(gl) {\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = i / 3 * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n_defineProperty(PointCloudLayer, \"layerName\", 'PointCloudLayer');\n_defineProperty(PointCloudLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["_defineProperty","Layer","project32","gouraudLighting","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","normalizeData","data","header","attributes","length","vertexCount","POSITION","instancePositions","NORMAL","instanceNormals","COLOR_0","instanceColors","PointCloudLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","size","fp64","use64bitPositions","transition","accessor","defaultValue","props","colorFormat","normalized","updateState","params","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","dataChanged","draw","_ref","uniforms","setUniforms","positions","i","angle","Math","PI","push","cos","sin","id","geometry","drawMode","Float32Array","isInstanced"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/dist/esm/point-cloud-layer/point-cloud-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\n\nfunction normalizeData(data) {\n  const {\n    header,\n    attributes\n  } = data;\n\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState(params) {\n    const {\n      changeFlags,\n      props\n    } = params;\n    super.updateState(params);\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      pointSize,\n      sizeUnits\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeUnits: UNIT[sizeUnits],\n      radiusPixels: pointSize\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const positions = [];\n\n    for (let i = 0; i < 3; i++) {\n      const angle = i / 3 * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\n\n_defineProperty(PointCloudLayer, \"layerName\", 'PointCloudLayer');\n\n_defineProperty(PointCloudLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=point-cloud-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}