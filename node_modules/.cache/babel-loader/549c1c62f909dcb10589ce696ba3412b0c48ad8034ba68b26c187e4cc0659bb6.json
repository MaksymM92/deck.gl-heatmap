{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Transition from '../transitions/transition';\nconst noop = () => {};\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\nconst DEFAULT_EASING = t => t;\nconst DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;\nexport default class TransitionManager {\n  constructor(opts) {\n    _defineProperty(this, \"getControllerState\", void 0);\n    _defineProperty(this, \"props\", void 0);\n    _defineProperty(this, \"propsInTransition\", void 0);\n    _defineProperty(this, \"transition\", void 0);\n    _defineProperty(this, \"onViewStateChange\", void 0);\n    _defineProperty(this, \"onStateChange\", void 0);\n    _defineProperty(this, \"_onTransitionUpdate\", transition => {\n      const {\n        time,\n        settings: {\n          interpolator,\n          startProps,\n          endProps,\n          duration,\n          easing\n        }\n      } = transition;\n      const t = easing(time / duration);\n      const viewport = interpolator.interpolateProps(startProps, endProps, t);\n      this.propsInTransition = this.getControllerState({\n        ...this.props,\n        ...viewport\n      }).getViewportProps();\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        oldViewState: this.props\n      });\n    });\n    this.getControllerState = opts.getControllerState;\n    this.propsInTransition = null;\n    this.transition = new Transition(opts.timeline);\n    this.onViewStateChange = opts.onViewStateChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n  }\n  finalize() {\n    this.transition.cancel();\n  }\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    this.props = nextProps;\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      let startProps = currentProps;\n      if (this.transition.inProgress) {\n        const {\n          interruption,\n          endProps\n        } = this.transition.settings;\n        startProps = {\n          ...currentProps,\n          ...(interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps)\n        };\n      }\n      this._triggerTransition(startProps, nextProps);\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n    return transitionTriggered;\n  }\n  updateTransition() {\n    this.transition.update();\n  }\n  _isTransitionEnabled(props) {\n    const {\n      transitionDuration,\n      transitionInterpolator\n    } = props;\n    return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n  }\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress && this.propsInTransition) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = this.getControllerState(startProps);\n    const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);\n    const transitionInterpolator = endProps.transitionInterpolator;\n    const duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n    if (duration === 0) {\n      return;\n    }\n    const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);\n    this.propsInTransition = {};\n    const transitionSettings = {\n      duration,\n      easing: endProps.transitionEasing || DEFAULT_EASING,\n      interpolator: transitionInterpolator,\n      interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    };\n    this.transition.start(transitionSettings);\n    this.onStateChange({\n      inTransition: true\n    });\n    this.updateTransition();\n  }\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n      callback === null || callback === void 0 ? void 0 : callback(transition);\n    };\n  }\n}","map":{"version":3,"names":["Transition","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_EASING","t","DEFAULT_INTERRUPTION","TransitionManager","constructor","opts","_defineProperty","transition","time","settings","interpolator","startProps","endProps","duration","easing","viewport","interpolateProps","propsInTransition","getControllerState","props","getViewportProps","onViewStateChange","viewState","oldViewState","timeline","onStateChange","finalize","cancel","getViewportInTransition","processViewStateChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","inProgress","interruption","_triggerTransition","updateTransition","update","transitionDuration","transitionInterpolator","Boolean","_isUpdateDueToCurrentTransition","arePropsEqual","startViewstate","endViewStateProps","shortestPathFrom","getDuration","initialProps","initializeProps","transitionSettings","transitionEasing","transitionInterruption","start","end","onStart","onTransitionStart","onUpdate","_onTransitionUpdate","onInterrupt","_onTransitionEnd","onTransitionInterrupt","onEnd","onTransitionEnd","inTransition","callback","isZooming","isPanning","isRotating"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/controllers/transition-manager.ts"],"sourcesContent":["import Transition, {TransitionSettings as BaseTransitionSettings} from '../transitions/transition';\nimport TransitionInterpolator from '../transitions/transition-interpolator';\nimport type {IViewState} from './view-state';\n\nimport type {Timeline} from '@luma.gl/core';\nimport type {InteractionState} from './controller';\n\nconst noop = () => {};\n\n// Enums cannot be directly exported as they are not transpiled correctly into ES5, see https://github.com/visgl/deck.gl/issues/7130\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n} as const;\n\ntype TransitionEvent = 1 | 2 | 3;\n\nexport type TransitionProps = {\n  /** Transition duration in milliseconds, default value 0, implies no transition. When using `FlyToInterpolator`, it can also be set to `'auto'`. */\n  transitionDuration?: number | 'auto';\n  /** An interpolator object that defines the transition behavior between two viewports. */\n  transitionInterpolator?: TransitionInterpolator;\n  /** Easing function that can be used to achieve effects like \"Ease-In-Cubic\", \"Ease-Out-Cubic\", etc. Default value performs Linear easing. */\n  transitionEasing?: (t: number) => number;\n  /** Controls how to process a new view state change that occurs during an existing transition. */\n  transitionInterruption?: TransitionEvent;\n  /** Callback fired when requested transition starts. */\n  onTransitionStart?: (transition: Transition) => void;\n  /** Callback fired when requested transition is interrupted. */\n  onTransitionInterrupt?: (transition: Transition) => void;\n  /** Callback fired when requested transition ends. */\n  onTransitionEnd?: (transition: Transition) => void;\n};\n\nconst DEFAULT_EASING = t => t;\nconst DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;\n\ntype TransitionSettings = BaseTransitionSettings & {\n  interpolator: TransitionInterpolator;\n  easing: (t: number) => number;\n  interruption: TransitionEvent;\n  startProps: Record<string, any>;\n  endProps: Record<string, any>;\n};\n\nexport default class TransitionManager<ControllerState extends IViewState<ControllerState>> {\n  getControllerState: (props: any) => ControllerState;\n  props?: TransitionProps;\n  propsInTransition: Record<string, any> | null;\n  transition: Transition;\n  onViewStateChange: (params: {\n    viewState: Record<string, any>;\n    oldViewState: Record<string, any>;\n  }) => void;\n  onStateChange: (state: InteractionState) => void;\n\n  constructor(opts: {\n    timeline: Timeline;\n    getControllerState: (props: any) => ControllerState;\n    onViewStateChange?: (params: {\n      viewState: Record<string, any>;\n      oldViewState: Record<string, any>;\n    }) => void;\n    onStateChange?: (state: InteractionState) => void;\n  }) {\n    this.getControllerState = opts.getControllerState;\n    this.propsInTransition = null;\n    this.transition = new Transition(opts.timeline);\n\n    this.onViewStateChange = opts.onViewStateChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n  }\n\n  finalize(): void {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition(): Record<string, any> | null {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps: TransitionProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      let startProps = currentProps;\n      if (this.transition.inProgress) {\n        const {interruption, endProps} = this.transition.settings as TransitionSettings;\n        startProps = {\n          ...currentProps,\n          ...(interruption === TRANSITION_EVENTS.SNAP_TO_END\n            ? endProps\n            : this.propsInTransition || currentProps)\n        };\n      }\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props: TransitionProps): boolean {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      ((transitionDuration as number) > 0 || transitionDuration === 'auto') &&\n      Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props: TransitionProps): boolean {\n    if (this.transition.inProgress && this.propsInTransition) {\n      return (this.transition.settings as TransitionSettings).interpolator.arePropsEqual(\n        props,\n        this.propsInTransition\n      );\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps: TransitionProps, nextProps: TransitionProps): boolean {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        (this.transition.settings as TransitionSettings).interruption ===\n          TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return (nextProps.transitionInterpolator as TransitionInterpolator).arePropsEqual(\n        currentProps,\n        nextProps\n      );\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps: TransitionProps, endProps: TransitionProps): void {\n    const startViewstate = this.getControllerState(startProps);\n    const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);\n\n    // update transitionDuration for 'auto' mode\n    const transitionInterpolator = endProps.transitionInterpolator as TransitionInterpolator;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : (endProps.transitionDuration as number);\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);\n\n    this.propsInTransition = {};\n    const transitionSettings: TransitionSettings = {\n      duration,\n      easing: endProps.transitionEasing || DEFAULT_EASING,\n      interpolator: transitionInterpolator,\n      interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    };\n    this.transition.start(transitionSettings);\n\n    this.onStateChange({inTransition: true});\n\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback?: (transition: Transition) => void) {\n    return transition => {\n      this.propsInTransition = null;\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n\n      callback?.(transition);\n    };\n  }\n\n  _onTransitionUpdate = transition => {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = this.getControllerState({\n      ...this.props,\n      ...viewport\n    }).getViewportProps();\n\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props as TransitionProps\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}