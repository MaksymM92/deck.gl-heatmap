{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\nconst defaultProps = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\nexport default class GridLayer extends CompositeLayer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n  updateState(_ref) {\n    let {\n      props\n    } = _ref;\n    this.setState({\n      useGPUAggregation: this.canUseGPUAggregation(props)\n    });\n  }\n  renderLayers() {\n    const {\n      data,\n      updateTriggers\n    } = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation ? this.getSubLayerClass('GPU', GPUGridLayer) : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(this.props, this.getSubLayerProps({\n      id,\n      updateTriggers\n    }), {\n      data\n    });\n  }\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      return false;\n    }\n    return true;\n  }\n}\n_defineProperty(GridLayer, \"layerName\", 'GridLayer');\n_defineProperty(GridLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["CompositeLayer","GPUGridAggregator","GPUGridLayer","CPUGridLayer","defaultProps","gpuAggregation","GridLayer","constructor","arguments","_defineProperty","initializeState","state","useGPUAggregation","updateState","_ref","props","setState","canUseGPUAggregation","renderLayers","data","updateTriggers","id","LayerType","getSubLayerClass","getSubLayerProps","lowerPercentile","upperPercentile","getColorValue","getElevationValue","colorScaleType","isSupported","context","gl"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/grid-layer/grid-layer.ts"],"sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer, {GPUGridLayerProps} from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer, {CPUGridLayerProps} from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps: DefaultProps<GridLayerProps> = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\n/** All properties supported by GridLayer. */\nexport type GridLayerProps<DataT = any> = _GridLayerProps<DataT> & CompositeLayerProps;\n\n/** Properties added by GridLayer. */\ntype _GridLayerProps<DataT> = CPUGridLayerProps<DataT> &\n  GPUGridLayerProps<DataT> & {\n    /**\n     * Whether the aggregation should be performed in high-precision 64-bit mode.\n     * @default false\n     */\n    fp64?: boolean;\n\n    /**\n     * When set to true, aggregation is performed on GPU, provided other conditions are met.\n     * @default false\n     */\n    gpuAggregation?: boolean;\n  };\n\n/** Aggregate data into a grid-based heatmap. The color and height of a cell are determined based on the objects it contains. */\nexport default class GridLayer<DataT = any, ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_GridLayerProps<DataT>>\n> {\n  static layerName = 'GridLayer';\n  static defaultProps = defaultProps;\n\n  state!: CompositeLayer['state'] & {\n    useGPUAggregation: boolean;\n  };\n\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({props}: UpdateParameters<this>) {\n    this.setState({\n      useGPUAggregation: this.canUseGPUAggregation(props)\n    });\n  }\n\n  renderLayers(): Layer {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props: GridLayer['props']) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n"],"mappings":";AAAA,SACEA,cADF,QAMO,eANP;AAOA,OAAOC,iBAAP,MAA8B,mDAA9B;AACA,OAAOC,YAAP,MAA8C,kCAA9C;AACA,OAAOC,YAAP,MAA8C,kCAA9C;AAEA,MAAMC,YAA0C,GAAG;EACjD,GAAGF,YAAY,CAACE,YADiC;EAEjD,GAAGD,YAAY,CAACC,YAFiC;EAGjDC,cAAc,EAAE;AAHiC,CAAnD;AA0BA,eAAe,MAAMC,SAAN,SAAkEN,cAAlE,CAEb;EAAAO,YAAA;IAAA,SAAAC,SAAA;IAAAC,eAAA;EAAA;EAQAC,eAAeA,CAAA,EAAG;IAChB,KAAKC,KAAL,GAAa;MACXC,iBAAiB,EAAE;IADR,CAAb;EAGD;EAEDC,WAAWA,CAAAC,IAAA,EAAkC;IAAA,IAAjC;MAACC;IAAD,CAAD,GAAAD,IAAA;IACT,KAAKE,QAAL,CAAc;MACZJ,iBAAiB,EAAE,KAAKK,oBAAL,CAA0BF,KAA1B;IADP,CAAd;EAGD;EAEDG,YAAYA,CAAA,EAAU;IACpB,MAAM;MAACC,IAAD;MAAOC;IAAP,IAAyB,KAAKL,KAApC;IACA,MAAMM,EAAE,GAAG,KAAKV,KAAL,CAAWC,iBAAX,GAA+B,KAA/B,GAAuC,KAAlD;IACA,MAAMU,SAAS,GAAG,KAAKX,KAAL,CAAWC,iBAAX,GACd,KAAKW,gBAAL,CAAsB,KAAtB,EAA6BrB,YAA7B,CADc,GAEd,KAAKqB,gBAAL,CAAsB,KAAtB,EAA6BpB,YAA7B,CAFJ;IAGA,OAAO,IAAImB,SAAJ,CACL,KAAKP,KADA,EAEL,KAAKS,gBAAL,CAAsB;MACpBH,EADoB;MAEpBD;IAFoB,CAAtB,CAFK,EAML;MACED;IADF,CANK,CAAP;EAUD;EAIDF,oBAAoBA,CAACF,KAAD,EAA4B;IAC9C,MAAM;MACJV,cADI;MAEJoB,eAFI;MAGJC,eAHI;MAIJC,aAJI;MAKJC,iBALI;MAMJC;IANI,IAOFd,KAPJ;IAQA,IAAI,CAACV,cAAL,EAAqB;MAEnB,OAAO,KAAP;IACD;IACD,IAAI,CAACJ,iBAAiB,CAAC6B,WAAlB,CAA8B,KAAKC,OAAL,CAAaC,EAA3C,CAAL,EAAqD;MACnD,OAAO,KAAP;IACD;IACD,IAAIP,eAAe,KAAK,CAApB,IAAyBC,eAAe,KAAK,GAAjD,EAAsD;MAEpD,OAAO,KAAP;IACD;IACD,IAAIC,aAAa,KAAK,IAAlB,IAA0BC,iBAAiB,KAAK,IAApD,EAA0D;MAExD,OAAO,KAAP;IACD;IACD,IAAIC,cAAc,KAAK,UAAnB,IAAiCA,cAAc,KAAK,SAAxD,EAAmE;MAEjE,OAAO,KAAP;IACD;IACD,OAAO,IAAP;EACD;AArED;gBAFmBvB,S,eAGA,W;gBAHAA,S,kBAIGF,Y"},"metadata":{},"sourceType":"module","externalDependencies":[]}