{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Model, Geometry, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { Layer, log, picking } from '@deck.gl/core';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\nconst defaultProps = {\n  cellSizePixels: {\n    value: 100,\n    min: 1\n  },\n  cellMarginPixels: {\n    value: 2,\n    min: 0,\n    max: 5\n  },\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\nexport default class ScreenGridCellLayer extends Layer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n  getShaders() {\n    return {\n      vs,\n      fs,\n      modules: [picking]\n    };\n  }\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        update: this.calculateInstancePositions\n      },\n      instanceCounts: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return changeFlags.somethingChanged;\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      oldProps,\n      props,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      parameters,\n      maxTexture\n    } = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {\n      model\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      minColor,\n      maxColor,\n      maxTexture,\n      colorDomain\n    }).draw({\n      parameters: {\n        depthTest: false,\n        depthMask: false,\n        ...parameters\n      }\n    });\n  }\n  calculateInstancePositions(attribute, _ref3) {\n    let {\n      numInstances\n    } = _ref3;\n    const {\n      width,\n      height\n    } = this.context.viewport;\n    const {\n      cellSizePixels\n    } = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n    const {\n      value,\n      size\n    } = attribute;\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n      value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n  _shouldUseMinMax() {\n    const {\n      minColor,\n      maxColor,\n      colorDomain,\n      colorRange\n    } = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    return true;\n  }\n  _updateUniforms(oldProps, props, changeFlags) {\n    const {\n      model\n    } = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({\n        shouldUseMinMax: this._shouldUseMinMax()\n      });\n    }\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({\n        colorRange: colorRangeToFlatArray(props.colorRange)\n      });\n    }\n    if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {\n      const {\n        width,\n        height\n      } = this.context.viewport;\n      const {\n        cellSizePixels,\n        cellMarginPixels\n      } = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n      const cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);\n      model.setUniforms({\n        cellScale\n      });\n    }\n  }\n}\n_defineProperty(ScreenGridCellLayer, \"layerName\", 'ScreenGridCellLayer');\n_defineProperty(ScreenGridCellLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["_defineProperty","Model","Geometry","FEATURES","hasFeatures","Layer","log","picking","defaultColorRange","colorRangeToFlatArray","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","ScreenGridCellLayer","constructor","arguments","isSupported","gl","TEXTURE_FLOAT","getShaders","modules","initializeState","context","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","noAlloc","setState","model","_getModel","shouldUpdateState","_ref","changeFlags","somethingChanged","updateState","params","oldProps","props","numInstances","invalidateAll","invalidate","_updateUniforms","draw","_ref2","uniforms","parameters","maxTexture","minColor","maxColor","state","setUniforms","depthTest","depthMask","attribute","_ref3","width","height","viewport","numCol","Math","ceil","i","x","y","floor","id","geometry","drawMode","attributes","positions","Float32Array","isInstanced","_shouldUseMinMax","deprecated","some","key","shouldUseMinMax","viewportChanged","margin","cellScale"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/dist/esm/screen-grid-layer/screen-grid-cell-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Model, Geometry, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { Layer, log, picking } from '@deck.gl/core';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\nconst defaultProps = {\n  cellSizePixels: {\n    value: 100,\n    min: 1\n  },\n  cellMarginPixels: {\n    value: 2,\n    min: 0,\n    max: 5\n  },\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\nexport default class ScreenGridCellLayer extends Layer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  getShaders() {\n    return {\n      vs,\n      fs,\n      modules: [picking]\n    };\n  }\n\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        update: this.calculateInstancePositions\n      },\n      instanceCounts: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({\n    changeFlags\n  }) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      oldProps,\n      props,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      parameters,\n      maxTexture\n    } = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {\n      model\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      minColor,\n      maxColor,\n      maxTexture,\n      colorDomain\n    }).draw({\n      parameters: {\n        depthTest: false,\n        depthMask: false,\n        ...parameters\n      }\n    });\n  }\n\n  calculateInstancePositions(attribute, {\n    numInstances\n  }) {\n    const {\n      width,\n      height\n    } = this.context.viewport;\n    const {\n      cellSizePixels\n    } = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n    const {\n      value,\n      size\n    } = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n      value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  _getModel(gl) {\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _shouldUseMinMax() {\n    const {\n      minColor,\n      maxColor,\n      colorDomain,\n      colorRange\n    } = this.props;\n\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n\n    if (colorDomain || colorRange) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags) {\n    const {\n      model\n    } = this.state;\n\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({\n        shouldUseMinMax: this._shouldUseMinMax()\n      });\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({\n        colorRange: colorRangeToFlatArray(props.colorRange)\n      });\n    }\n\n    if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {\n      const {\n        width,\n        height\n      } = this.context.viewport;\n      const {\n        cellSizePixels,\n        cellMarginPixels\n      } = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n      const cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);\n      model.setUniforms({\n        cellScale\n      });\n    }\n  }\n\n}\n\n_defineProperty(ScreenGridCellLayer, \"layerName\", 'ScreenGridCellLayer');\n\n_defineProperty(ScreenGridCellLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=screen-grid-cell-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}