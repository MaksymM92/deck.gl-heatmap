{"ast":null,"code":"/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n/* eslint-disable */\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n  // overrides PointerEventInput.handler to accept right mouse button\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n    // Allow non-left mouse buttons through\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n    oldHandler.call(this, ev);\n  };\n}\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n    // on start we want to have the mouse button down\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n    // mouse must be down\n    if (!this.pressed) {\n      return;\n    }\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}","map":{"version":3,"names":["INPUT_START","INPUT_MOVE","INPUT_END","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","some","array","predict","i","length","enhancePointerEventInput","PointerEventInput","oldHandler","prototype","handler","ev","store","button","type","e","pointerId","push","call","enhanceMouseInput","MouseInput","eventType","pressed","which","callback","manager","pointers","changedPointers","pointerType","srcEvent"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/mjolnir.js/src/utils/hammer-overrides.ts"],"sourcesContent":["/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n/* eslint-disable */\n\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n\n  // overrides PointerEventInput.handler to accept right mouse button\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n\n    // Allow non-left mouse buttons through\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n}\n\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n\n    // on start we want to have the mouse button down\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n\n    // mouse must be down\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}\n"],"mappings":"AAAA;;;;AAIA;AAEA;AACA,MAAMA,WAAW,GAAG,CAAC;AACrB,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,SAAS,GAAG,CAAC;AACnB,MAAMC,eAAe,GAAG;EACtBC,SAAS,EAAEJ,WAAW;EACtBK,SAAS,EAAEJ,UAAU;EACrBK,OAAO,EAAEJ;CACV;AAED;;;;;;AAMA,SAASK,IAAIA,CAACC,KAAK,EAAEC,OAAO;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAID,OAAO,CAACD,KAAK,CAACE,CAAC,CAAC,CAAC,EAAE;MACrB,OAAO,IAAI;;;EAGf,OAAO,KAAK;AACd;AAEA;AACA,OAAM,SAAUE,wBAAwBA,CAACC,iBAAiB;EACxD,MAAMC,UAAU,GAAGD,iBAAiB,CAACE,SAAS,CAACC,OAAO;EAEtD;EACAH,iBAAiB,CAACE,SAAS,CAACC,OAAO,GAAG,SAASA,OAAOA,CAACC,EAAE;IACvD,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB;IACA,IAAID,EAAE,CAACE,MAAM,GAAG,CAAC,IAAIF,EAAE,CAACG,IAAI,KAAK,aAAa,EAAE;MAC9C,IAAI,CAACb,IAAI,CAACW,KAAK,EAAEG,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAKL,EAAE,CAACK,SAAS,CAAC,EAAE;QACnDJ,KAAK,CAACK,IAAI,CAACN,EAAE,CAAC;;;IAIlBH,UAAU,CAACU,IAAI,CAAC,IAAI,EAAEP,EAAE,CAAC;EAC3B,CAAC;AACH;AAEA;AACA,OAAM,SAAUQ,iBAAiBA,CAACC,UAAU;EAC1CA,UAAU,CAACX,SAAS,CAACC,OAAO,GAAG,SAASA,OAAOA,CAACC,EAAE;IAChD,IAAIU,SAAS,GAAGxB,eAAe,CAACc,EAAE,CAACG,IAAI,CAAC;IAExC;IACA,IAAIO,SAAS,GAAG3B,WAAW,IAAIiB,EAAE,CAACE,MAAM,IAAI,CAAC,EAAE;MAC7C,IAAI,CAACS,OAAO,GAAG,IAAI;;IAGrB,IAAID,SAAS,GAAG1B,UAAU,IAAIgB,EAAE,CAACY,KAAK,KAAK,CAAC,EAAE;MAC5CF,SAAS,GAAGzB,SAAS;;IAGvB;IACA,IAAI,CAAC,IAAI,CAAC0B,OAAO,EAAE;MACjB;;IAGF,IAAID,SAAS,GAAGzB,SAAS,EAAE;MACzB,IAAI,CAAC0B,OAAO,GAAG,KAAK;;IAGtB,IAAI,CAACE,QAAQ,CAAC,IAAI,CAACC,OAAO,EAAEJ,SAAS,EAAE;MACrCK,QAAQ,EAAE,CAACf,EAAE,CAAC;MACdgB,eAAe,EAAE,CAAChB,EAAE,CAAC;MACrBiB,WAAW,EAAE,OAAO;MACpBC,QAAQ,EAAElB;KACX,CAAC;EACJ,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}