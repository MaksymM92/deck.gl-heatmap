{"ast":null,"code":"import { assert } from '../utils';\nimport { parsePropTypes } from './filters/prop-types';\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\nexport default class ShaderModule {\n  constructor(_ref) {\n    let {\n      name,\n      vs,\n      fs,\n      dependencies = [],\n      uniforms,\n      getUniforms,\n      deprecations = [],\n      defines = {},\n      inject = {},\n      vertexShader,\n      fragmentShader\n    } = _ref;\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n  getModuleSource(type) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = this.vs || '';\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = this.fs || '';\n        break;\n      default:\n        assert(false);\n    }\n    return \"#define MODULE_\".concat(this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_'), \"\\n\").concat(moduleSource, \"// END MODULE_\").concat(this.name, \"\\n\\n\");\n  }\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n  getDefines() {\n    return this.defines;\n  }\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(\"\\\\b\".concat(def.old, \"\\\\(\"));\n          break;\n        default:\n          def.regex = new RegExp(\"\".concat(def.type, \" \").concat(def.old, \";\"));\n      }\n    });\n    return deprecations;\n  }\n  _defaultGetUniforms() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const uniforms = {};\n    const propTypes = this.uniforms;\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), \"\".concat(this.name, \": invalid \").concat(key));\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n    return uniforms;\n  }\n}\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\nfunction normalizeInjections(injections) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = hook.slice(0, 2);\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n    result[stage][hook] = injection;\n  }\n  return result;\n}","map":{"version":3,"names":["assert","parsePropTypes","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","constructor","_ref","name","vs","fs","dependencies","uniforms","getUniforms","deprecations","defines","inject","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","injections","normalizeInjections","getModuleSource","type","moduleSource","concat","toUpperCase","replace","opts","_defaultGetUniforms","getDefines","checkDeprecations","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp","arguments","length","undefined","propTypes","key","propDef","private","validate","value","normalizeShaderModule","module","normalized","shaderModule","bind","result","hook","injection","stage","slice","order"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/shadertools/src/lib/shader-module.js"],"sourcesContent":["import {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    inject = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = this.vs || '';\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = this.fs || '';\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_')}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n\nfunction normalizeInjections(injections) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = hook.slice(0, 2);\n\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}