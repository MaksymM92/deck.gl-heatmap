{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport class TypedArrayManager {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"_pool\", []);\n    _defineProperty(this, \"opts\", {\n      overAlloc: 2,\n      poolSize: 100\n    });\n    this.setOptions(options);\n  }\n  setOptions(options) {\n    Object.assign(this.opts, options);\n  }\n  allocate(typedArray, count, _ref) {\n    let {\n      size = 1,\n      type,\n      padding = 0,\n      copy = false,\n      initialize = false,\n      maxCount\n    } = _ref;\n    const Type = type || typedArray && typedArray.constructor || Float32Array;\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n    let maxSize = Infinity;\n    if (maxCount) {\n      maxSize = maxCount * size + padding;\n    }\n    const newArray = this._allocate(Type, newSize, initialize, maxSize);\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      newArray.fill(0, 0, 4);\n    }\n    this._release(typedArray);\n    return newArray;\n  }\n  release(typedArray) {\n    this._release(typedArray);\n  }\n  _allocate(Type, size, initialize, maxSize) {\n    let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);\n    if (sizeToAllocate > maxSize) {\n      sizeToAllocate = maxSize;\n    }\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n      if (initialize) {\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(sizeToAllocate);\n  }\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {\n      buffer\n    } = typedArray;\n    const {\n      byteLength\n    } = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.opts.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.opts.poolSize) {\n      pool.shift();\n    }\n  }\n}\nexport default new TypedArrayManager();","map":{"version":3,"names":["TypedArrayManager","constructor","options","arguments","length","undefined","_defineProperty","overAlloc","poolSize","setOptions","Object","assign","opts","allocate","typedArray","count","_ref","size","type","padding","copy","initialize","maxCount","Type","Float32Array","newSize","ArrayBuffer","isView","BYTES_PER_ELEMENT","buffer","byteLength","maxSize","Infinity","newArray","_allocate","set","fill","_release","release","sizeToAllocate","Math","max","ceil","pool","_pool","i","findIndex","b","array","splice","push","shift"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/utils/typed-array-manager.ts"],"sourcesContent":["import {TypedArray, TypedArrayConstructor} from '../types/types';\n\nexport type TypedArrayManagerOptions = {\n  overAlloc?: number;\n  poolSize?: number;\n};\n\nexport class TypedArrayManager {\n  private _pool: ArrayBuffer[] = [];\n  opts: {\n    overAlloc: number;\n    poolSize: number;\n  } = {overAlloc: 2, poolSize: 100};\n\n  constructor(options: TypedArrayManagerOptions = {}) {\n    this.setOptions(options);\n  }\n\n  setOptions(options: TypedArrayManagerOptions) {\n    Object.assign(this.opts, options);\n  }\n\n  allocate<T extends TypedArray>(\n    typedArray: T | null | undefined,\n    count: number,\n    {\n      size = 1,\n      type,\n      padding = 0,\n      copy = false,\n      initialize = false,\n      maxCount\n    }: {\n      size?: number;\n      type?: TypedArrayConstructor;\n      padding?: number;\n      copy?: boolean;\n      initialize?: boolean;\n      maxCount?: number;\n    }\n  ): T {\n    const Type =\n      type || (typedArray && (typedArray.constructor as TypedArrayConstructor)) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize) as T;\n      }\n    }\n\n    let maxSize: number = Infinity;\n    if (maxCount) {\n      maxSize = maxCount * size + padding;\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize, maxSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray as T;\n  }\n\n  release(typedArray: TypedArray | null | undefined) {\n    this._release(typedArray);\n  }\n\n  private _allocate(\n    Type: TypedArrayConstructor,\n    size: number,\n    initialize: boolean,\n    maxSize: number\n  ): TypedArray {\n    // Allocate at least one element to ensure a valid buffer\n    let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);\n    // Don't over allocate after certain specified number of elements\n    if (sizeToAllocate > maxSize) {\n      sizeToAllocate = maxSize;\n    }\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n      if (initialize) {\n        // Viewing a buffer with a different type may create NaNs\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(sizeToAllocate);\n  }\n\n  private _release(typedArray: TypedArray | null | undefined): void {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.opts.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.opts.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}