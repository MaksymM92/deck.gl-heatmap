{"ast":null,"code":"import Hammer from './utils/hammer';\n// This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\nexport const RECOGNIZERS = Hammer ? [[Hammer.Pan, {\n  event: 'tripan',\n  pointers: 3,\n  threshold: 0,\n  enable: false\n}], [Hammer.Rotate, {\n  enable: false\n}], [Hammer.Pinch, {\n  enable: false\n}], [Hammer.Swipe, {\n  enable: false\n}], [Hammer.Pan, {\n  threshold: 0,\n  enable: false\n}], [Hammer.Press, {\n  enable: false\n}], [Hammer.Tap, {\n  event: 'doubletap',\n  taps: 2,\n  enable: false\n}],\n// TODO - rename to 'tap' and 'singletap' in the next major release\n[Hammer.Tap, {\n  event: 'anytap',\n  enable: false\n}], [Hammer.Tap, {\n  enable: false\n}]] : null;\n// Recognize the following gestures even if a given recognizer succeeds\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n  tripan: ['rotate', 'pinch', 'pan'],\n  rotate: ['pinch'],\n  pinch: ['pan'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n};\n// Recognize the folling gestures only if a given recognizer fails\nexport const RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n};\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\nexport const BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n};\nexport const INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: [\n  // Chrome, Safari\n  'wheel',\n  // IE\n  'mousewheel']\n};\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\nexport const EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  tripan: 'tripan',\n  tripanstart: 'tripan',\n  tripanmove: 'tripan',\n  tripanup: 'tripan',\n  tripandown: 'tripan',\n  tripanleft: 'tripan',\n  tripanright: 'tripan',\n  tripanend: 'tripan',\n  tripancancel: 'tripan',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n};\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\nexport const GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n};","map":{"version":3,"names":["Hammer","RECOGNIZERS","Pan","event","pointers","threshold","enable","Rotate","Pinch","Swipe","Press","Tap","taps","RECOGNIZER_COMPATIBLE_MAP","tripan","rotate","pinch","pan","doubletap","anytap","RECOGNIZER_FALLBACK_MAP","BASIC_EVENT_ALIASES","pointerdown","pointermove","pointerup","touchstart","touchmove","touchend","mousedown","mousemove","mouseup","INPUT_EVENT_TYPES","KEY_EVENTS","MOUSE_EVENTS","WHEEL_EVENTS","EVENT_RECOGNIZER_MAP","tap","press","pinchin","pinchout","pinchstart","pinchmove","pinchend","pinchcancel","rotatestart","rotatemove","rotateend","rotatecancel","tripanstart","tripanmove","tripanup","tripandown","tripanleft","tripanright","tripanend","tripancancel","panstart","panmove","panup","pandown","panleft","panright","panend","pancancel","swipe","swipeleft","swiperight","swipeup","swipedown","GESTURE_EVENT_ALIASES","click","anyclick","dblclick","mouseover","mouseout","mouseleave"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/mjolnir.js/src/constants.ts"],"sourcesContent":["import Hammer from './utils/hammer';\nimport {RecognizerTuple} from './types';\n\n// This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\nexport const RECOGNIZERS: RecognizerTuple[] = Hammer\n  ? [\n      [Hammer.Pan, {event: 'tripan', pointers: 3, threshold: 0, enable: false}],\n      [Hammer.Rotate, {enable: false}],\n      [Hammer.Pinch, {enable: false}],\n      [Hammer.Swipe, {enable: false}],\n      [Hammer.Pan, {threshold: 0, enable: false}],\n      [Hammer.Press, {enable: false}],\n      [Hammer.Tap, {event: 'doubletap', taps: 2, enable: false}],\n      // TODO - rename to 'tap' and 'singletap' in the next major release\n      [Hammer.Tap, {event: 'anytap', enable: false}],\n      [Hammer.Tap, {enable: false}]\n    ]\n  : null;\n\n// Recognize the following gestures even if a given recognizer succeeds\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n  tripan: ['rotate', 'pinch', 'pan'],\n  rotate: ['pinch'],\n  pinch: ['pan'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n} as const;\n\n// Recognize the folling gestures only if a given recognizer fails\nexport const RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n} as const;\n\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\nexport const BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n} as const;\n\nexport const INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: [\n    // Chrome, Safari\n    'wheel',\n    // IE\n    'mousewheel'\n  ]\n} as const;\n\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\nexport const EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  tripan: 'tripan',\n  tripanstart: 'tripan',\n  tripanmove: 'tripan',\n  tripanup: 'tripan',\n  tripandown: 'tripan',\n  tripanleft: 'tripan',\n  tripanright: 'tripan',\n  tripanend: 'tripan',\n  tripancancel: 'tripan',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n} as const;\n\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\nexport const GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n} as const;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}