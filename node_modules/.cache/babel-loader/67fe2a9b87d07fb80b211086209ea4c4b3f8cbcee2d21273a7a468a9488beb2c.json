{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { GridCellLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToDensityGridDataCPU } from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\nfunction nop() {}\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  gridAggregator: pointToDensityGridDataCPU,\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  extruded: false,\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      }\n    });\n  }\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances()\n      })\n    });\n  }\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      cellSize,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      cpuAggregator\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n    return new SubLayerClass({\n      cellSize,\n      coverage,\n      material,\n      elevationScale,\n      extruded,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'grid-cell',\n      updateTriggers\n    }), {\n      data: cpuAggregator.state.layerData.data\n    });\n  }\n}\n_defineProperty(CPUGridLayer, \"layerName\", 'CPUGridLayer');\n_defineProperty(CPUGridLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["GridCellLayer","defaultColorRange","pointToDensityGridDataCPU","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","gridAggregator","cellSize","coverage","getPosition","x","position","extruded","material","_filterData","optional","CPUGridLayer","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","attributeManager","getAttributeManager","add","positions","size","accessor","updateState","opts","setState","viewport","context","attributes","getAttributes","numInstances","getNumInstances","getPickingInfo","_ref","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","getFillColor","bind","getElevation","getSubLayerProps","id","data","layerData"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/src/cpu-grid-layer/cpu-grid-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {GridCellLayer} from '@deck.gl/layers';\nimport {Accessor, AccessorFunction, Color, Position, Material, DefaultProps} from '@deck.gl/core';\n\nimport {defaultColorRange} from '../utils/color-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\n\nimport {Layer, UpdateParameters, GetPickingInfoParams, PickingInfo} from '@deck.gl/core';\nimport {AggregateAccessor} from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() {}\n\nconst defaultProps: DefaultProps<CPUGridLayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calculated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  gridAggregator: pointToDensityGridDataCPU,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\n/** All properties supported by CPUGridLayer. */\nexport type CPUGridLayerProps<DataT = any> = _CPUGridLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\n/** Properties added by CPUGridLayer. */\ntype _CPUGridLayerProps<DataT> = {\n  /**\n   * Size of each cell in meters.\n   * @default 1000\n   */\n  cellSize?: number;\n\n  /**\n   * Color scale domain, default is set to the extent of aggregated weights in each cell.\n   * @default [min(colorWeight), max(colorWeight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Default: [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6) `6-class YlOrRd`\n   */\n  colorRange?: Color[];\n\n  /**\n   * Cell size multiplier, clamped between 0 - 1.\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Elevation scale input domain, default is set to between 0 and the max of aggregated weights in each cell.\n   * @default [0, max(elevationWeight)]\n   */\n  elevationDomain?: [number, number] | null;\n\n  /**\n   * Elevation scale output range.\n   * @default [0, 1000]\n   */\n  elevationRange?: [number, number];\n\n  /**\n   * Cell elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to enable cell elevation. If set to false, all cell will be flat.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Filter cells and re-calculate color by `upperPercentile`.\n   * Cells with value arger than the upperPercentile will be hidden.\n   * @default 100\n   */\n  upperPercentile?: number;\n\n  /**\n   * Filter cells and re-calculate color by `lowerPercentile`.\n   * Cells with value smaller than the lowerPercentile will be hidden.\n   * @default 0\n   */\n  lowerPercentile?: number;\n\n  /**\n   * Filter cells and re-calculate elevation by `elevationUpperPercentile`.\n   * Cells with elevation value larger than the `elevationUpperPercentile` will be hidden.\n   * @default 100\n   */\n  elevationUpperPercentile?: number;\n\n  /**\n   * Filter cells and re-calculate elevation by `elevationLowerPercentile`.\n   * Cells with elevation value larger than the `elevationLowerPercentile` will be hidden.\n   * @default 0\n   */\n  elevationLowerPercentile?: number;\n\n  /**\n   * Scaling function used to determine the color of the grid cell, default value is 'quantize'.\n   * Supported Values are 'quantize', 'linear', 'quantile' and 'ordinal'.\n   * @default 'quantize'\n   */\n  colorScaleType?: 'quantize' | 'linear' | 'quantile' | 'ordinal';\n\n  /**\n   * Scaling function used to determine the elevation of the grid cell, only supports 'linear'.\n   */\n  elevationScaleType?: 'linear';\n\n  // TODO - document\n  gridAggregator?: (props: any, params: any) => any;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's color value.\n   * @default 'SUM'\n   */\n  colorAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's elevation value.\n   * @default 'SUM'\n   */\n  elevationAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of a data object used to calculate the color value for a cell.\n   * @default 1\n   */\n  getColorWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into cells, this accessor is called on each cell to get the value that its color is based on.\n   * @default null\n   */\n  getColorValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * The weight of a data object used to calculate the elevation value for a cell.\n   * @default 1\n   */\n  getElevationWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into cells, this accessor is called on each cell to get the value that its elevation is based on.\n   * @default null\n   */\n  getElevationValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * This callback will be called when bin color domain has been calculated.\n   * @default () => {}\n   */\n  onSetColorDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * This callback will be called when bin elevation domain has been calculated.\n   * @default () => {}\n   */\n  onSetElevationDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * (Experimental) Filter data objects\n   */\n  _filterData: null | ((d: DataT) => boolean);\n};\n\n/** Aggregate data into a grid-based heatmap. Aggregation is performed on CPU. */\nexport default class CPUGridLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends AggregationLayer<DataT, ExtraPropsT & Required<_CPUGridLayerProps<DataT>>> {\n  static layerName = 'CPUGridLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calcualted using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances()\n      })\n    });\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers(): Layer {\n    const {elevationScale, extruded, cellSize, coverage, material, transitions} = this.props;\n    const {cpuAggregator} = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}