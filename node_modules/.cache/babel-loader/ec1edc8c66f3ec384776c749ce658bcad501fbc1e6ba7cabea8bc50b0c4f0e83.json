{"ast":null,"code":"import { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  const {\n    data,\n    radius\n  } = props;\n  const {\n    viewport,\n    attributes\n  } = aggregationParams;\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  const screenPoints = [];\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n  const newHexbin = hexbin().radius(radiusCommon).x(d => d.screenCoord[0]).y(d => d.screenCoord[1]);\n  const hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  const {\n    attributes\n  } = aggregationParams;\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {\n    unitsPerMeter\n  } = viewport.getDistanceScales(center);\n  return radius * unitsPerMeter[0];\n}","map":{"version":3,"names":["hexbin","createIterable","log","pointToHexbin","props","aggregationParams","data","radius","viewport","attributes","centerLngLat","length","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","iterable","objectInfo","positions","value","size","getAccessor","object","index","posIndex","position","arrayIsFinite","Number","isFinite","push","screenCoord","projectFlat","source","warn","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","unprojectFlat","points","minX","Infinity","minY","maxX","maxY","i","Math","min","max","every","center","unitsPerMeter","getDistanceScales"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/dist/esm/hexagon-layer/hexagon-aggregator.js"],"sourcesContent":["import { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  const {\n    data,\n    radius\n  } = props;\n  const {\n    viewport,\n    attributes\n  } = aggregationParams;\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  const screenPoints = [];\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin().radius(radiusCommon).x(d => d.screenCoord[0]).y(d => d.screenCoord[1]);\n  const hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  const {\n    attributes\n  } = aggregationParams;\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {\n    unitsPerMeter\n  } = viewport.getDistanceScales(center);\n  return radius * unitsPerMeter[0];\n}\n//# sourceMappingURL=hexagon-aggregator.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}