{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, phongLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, isWebGL2, hasFeature, FEATURES } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const {\n      gl\n    } = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines = {};\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n    if (regenerateModels) {\n      var _this$state$model;\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n      this._updateGeometry(props);\n    }\n  }\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n    return geometry;\n  }\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n  _updateGeometry(_ref) {\n    let {\n      diskResolution,\n      vertices,\n      extruded,\n      stroked\n    } = _ref;\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n    this.state.model.setProps({\n      geometry\n    });\n  }\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {\n      model,\n      fillVertexCount,\n      wireframeVertexCount,\n      edgeDistance\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: angle / 180 * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n    if (extruded && wireframe) {\n      model.setProps({\n        isIndexed: true\n      });\n      model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n    if (filled) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n        isStroke: false\n      }).draw();\n    }\n    if (!extruded && stroked) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n  }\n}\n_defineProperty(ColumnLayer, \"layerName\", 'ColumnLayer');\n_defineProperty(ColumnLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["Layer","project32","gouraudLighting","phongLighting","picking","UNIT","Model","isWebGL2","hasFeature","FEATURES","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","gl","context","transpileToGLSL100","defines","useDerivatives","props","flatShading","GLSL_DERIVATIVES","FLAT_SHADING","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","params","oldProps","changeFlags","regenerateModels","extensionsChanged","_this$state$model","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","setState","edgeDistance","cos","PI","id","isInstanced","_ref","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","_ref2","uniforms","setUniforms","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke"],"sources":["../../../src/column-layer/column-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  gouraudLighting,\n  phongLighting,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ColumnLayerProps> = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** All properties supported by ColumnLayer. */\nexport type ColumnLayerProps<DataT = any> = _ColumnLayerProps<DataT> & LayerProps;\n\n/** Properties added by ColumnLayer. */\ntype _ColumnLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The number of sides to render the disk as.\n   * @default 20\n   */\n  diskResolution?: number;\n\n  /**\n   * isk size in units specified by `radiusUnits`.\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Disk rotation, counter-clockwise in degrees.\n   * @default 0\n   */\n  angle?: number;\n\n  /**\n   * Replace the default geometry (regular polygon that fits inside the unit circle) with a custom one.\n   * @default null\n   */\n  vertices: Position[] | null;\n\n  /**\n   * Disk offset from the position, relative to the radius.\n   * @default [0,0]\n   */\n  offset?: [number, number];\n\n  /**\n   * Radius multiplier, between 0 - 1\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Column elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to draw a filled column (solid fill).\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to draw an outline around the disks.\n   * @default false\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to extrude the columns. If set to `false`, all columns will be rendered as flat polygons.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the column.\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * If `true`, the vertical surfaces of the columns use [flat shading](https://en.wikipedia.org/wiki/Shading#Flat_vs._smooth_shading).\n   * @default false\n   */\n  flatShading?: boolean;\n\n  /**\n   * The units of the radius.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n\n  /**\n   * The units of the line width.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines.\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum outline width in pixels.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum outline width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each column.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * @deprecated Use getFilledColor and getLineColor instead\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Fill collor value or accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * The elevation of each cell in meters.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * The width of the outline of the column, in units specified by `lineWidthUnits`.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n};\n\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nexport default class ColumnLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ColumnLayerProps<DataT>>\n> {\n  static layerName = 'ColumnLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines: Record<string, any> = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution: number, vertices: number[] | undefined, hasThinkness: boolean) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  protected _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry: any = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n"],"mappings":";AAoBA,SACEA,KADF,EAEEC,SAFF,EAGEC,eAHF,EAIEC,aAJF,EAKEC,OALF,EAMEC,IANF,QAiBO,eAjBP;AAmBA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,QAArC,QAAoD,eAApD;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,OAAOC,EAAP,MAAe,4BAAf;AACA,OAAOC,EAAP,MAAe,8BAAf;AAEA,MAAMC,aAA+C,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAxD;AAEA,MAAMC,YAA4C,GAAG;EACnDC,cAAc,EAAE;IAACC,IAAI,EAAE,QAAP;IAAiBC,GAAG,EAAE,CAAtB;IAAyBC,KAAK,EAAE;EAAhC,CADmC;EAEnDC,QAAQ,EAAE,IAFyC;EAGnDC,MAAM,EAAE;IAACJ,IAAI,EAAE,QAAP;IAAiBC,GAAG,EAAE,CAAtB;IAAyBC,KAAK,EAAE;EAAhC,CAH2C;EAInDG,KAAK,EAAE;IAACL,IAAI,EAAE,QAAP;IAAiBE,KAAK,EAAE;EAAxB,CAJ4C;EAKnDI,MAAM,EAAE;IAACN,IAAI,EAAE,OAAP;IAAgBE,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAAvB,CAL2C;EAMnDK,QAAQ,EAAE;IAACP,IAAI,EAAE,QAAP;IAAiBC,GAAG,EAAE,CAAtB;IAAyBO,GAAG,EAAE,CAA9B;IAAiCN,KAAK,EAAE;EAAxC,CANyC;EAOnDO,cAAc,EAAE;IAACT,IAAI,EAAE,QAAP;IAAiBC,GAAG,EAAE,CAAtB;IAAyBC,KAAK,EAAE;EAAhC,CAPmC;EAQnDQ,WAAW,EAAE,QARsC;EASnDC,cAAc,EAAE,QATmC;EAUnDC,cAAc,EAAE,CAVmC;EAWnDC,kBAAkB,EAAE,CAX+B;EAYnDC,kBAAkB,EAAEC,MAAM,CAACC,gBAZwB;EAcnDC,QAAQ,EAAE,IAdyC;EAenDC,SAAS,EAAE,KAfwC;EAgBnDC,MAAM,EAAE,IAhB2C;EAiBnDC,OAAO,EAAE,KAjB0C;EAmBnDC,WAAW,EAAE;IAACrB,IAAI,EAAE,UAAP;IAAmBE,KAAK,EAAEoB,CAAC,IAAIA,CAAC,CAACC;EAAjC,CAnBsC;EAoBnDC,YAAY,EAAE;IAACxB,IAAI,EAAE,UAAP;IAAmBE,KAAK,EAAEL;EAA1B,CApBqC;EAqBnD4B,YAAY,EAAE;IAACzB,IAAI,EAAE,UAAP;IAAmBE,KAAK,EAAEL;EAA1B,CArBqC;EAsBnD6B,YAAY,EAAE;IAAC1B,IAAI,EAAE,UAAP;IAAmBE,KAAK,EAAE;EAA1B,CAtBqC;EAuBnDyB,YAAY,EAAE;IAAC3B,IAAI,EAAE,UAAP;IAAmBE,KAAK,EAAE;EAA1B,CAvBqC;EAwBnD0B,QAAQ,EAAE,IAxByC;EAyBnDC,QAAQ,EAAE;IAACC,aAAa,EAAE,CAAC,cAAD,EAAiB,cAAjB;EAAhB;AAzByC,CAArD;AAuLA,eAAe,MAAMC,WAAN,SAAoE/C,KAApE,CAEb;EAIAgD,UAAUA,CAAA,EAAG;IACX,MAAM;MAACC;IAAD,IAAO,KAAKC,OAAlB;IACA,MAAMC,kBAAkB,GAAG,CAAC5C,QAAQ,CAAC0C,EAAD,CAApC;IACA,MAAMG,OAA4B,GAAG,EAArC;IAEA,MAAMC,cAAc,GAAG,KAAKC,KAAL,CAAWC,WAAX,IAA0B/C,UAAU,CAACyC,EAAD,EAAKxC,QAAQ,CAAC+C,gBAAd,CAA3D;IACA,IAAIH,cAAJ,EAAoB;MAClBD,OAAO,CAACK,YAAR,GAAuB,CAAvB;IACD;IACD,OAAO,MAAMT,UAAN,CAAiB;MACtBrC,EADsB;MAEtBC,EAFsB;MAGtBwC,OAHsB;MAItBD,kBAJsB;MAKtBO,OAAO,EAAE,CAACzD,SAAD,EAAYoD,cAAc,GAAGlD,aAAH,GAAmBD,eAA7C,EAA8DE,OAA9D;IALa,CAAjB,CAAP;EAOD;EAMDuD,eAAeA,CAAA,EAAG;IAChB,MAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;IAEAD,gBAAgB,CAACE,YAAjB,CAA8B;MAC5BC,iBAAiB,EAAE;QACjBC,IAAI,EAAE,CADW;QAEjBhD,IAAI,MAFa;QAGjBiD,IAAI,EAAE,KAAKC,iBAAL,EAHW;QAIjBC,UAAU,EAAE,IAJK;QAKjBC,QAAQ,EAAE;MALO,CADS;MAQ5BC,kBAAkB,EAAE;QAClBL,IAAI,EAAE,CADY;QAElBG,UAAU,EAAE,IAFM;QAGlBC,QAAQ,EAAE;MAHQ,CARQ;MAa5BE,kBAAkB,EAAE;QAClBN,IAAI,EAAE,KAAKV,KAAL,CAAWiB,WAAX,CAAuBC,MADX;QAElBxD,IAAI,MAFc;QAGlByD,UAAU,EAAE,IAHM;QAIlBN,UAAU,EAAE,IAJM;QAKlBC,QAAQ,EAAE,cALQ;QAMlBM,YAAY,EAAE7D;MANI,CAbQ;MAqB5B8D,kBAAkB,EAAE;QAClBX,IAAI,EAAE,KAAKV,KAAL,CAAWiB,WAAX,CAAuBC,MADX;QAElBxD,IAAI,MAFc;QAGlByD,UAAU,EAAE,IAHM;QAIlBN,UAAU,EAAE,IAJM;QAKlBC,QAAQ,EAAE,cALQ;QAMlBM,YAAY,EAAE7D;MANI,CArBQ;MA6B5B+D,oBAAoB,EAAE;QACpBZ,IAAI,EAAE,CADc;QAEpBI,QAAQ,EAAE,cAFU;QAGpBD,UAAU,EAAE;MAHQ;IA7BM,CAA9B;EAoCD;EAEDU,WAAWA,CAACC,MAAD,EAAuC;IAChD,MAAMD,WAAN,CAAkBC,MAAlB;IAEA,MAAM;MAACxB,KAAD;MAAQyB,QAAR;MAAkBC;IAAlB,IAAiCF,MAAvC;IACA,MAAMG,gBAAgB,GACpBD,WAAW,CAACE,iBAAZ,IAAiC5B,KAAK,CAACC,WAAN,KAAsBwB,QAAQ,CAACxB,WADlE;IAGA,IAAI0B,gBAAJ,EAAsB;MAAA,IAAAE,iBAAA;MACpB,MAAM;QAAClC;MAAD,IAAO,KAAKC,OAAlB;MACA,CAAAiC,iBAAA,QAAKC,KAAL,CAAWC,KAAX,cAAAF,iBAAA,uBAAAA,iBAAA,CAAkBG,MAAlB;MACA,KAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKE,SAAL,CAAetC,EAAf,CAAnB;MACA,KAAKY,mBAAL,GAA4B2B,aAA5B;IACD;IAED,IACEP,gBAAgB,IAChB3B,KAAK,CAACvC,cAAN,KAAyBgE,QAAQ,CAAChE,cADlC,IAEAuC,KAAK,CAACnC,QAAN,KAAmB4D,QAAQ,CAAC5D,QAF5B,IAGA,CAACmC,KAAK,CAACrB,QAAN,IAAkBqB,KAAK,CAAClB,OAAzB,OAAuC2C,QAAQ,CAAC9C,QAAT,IAAqB8C,QAAQ,CAAC3C,OAArE,CAJF,EAKE;MACA,KAAKqD,eAAL,CAAqBnC,KAArB;IACD;EACF;EAEDoC,WAAWA,CAAC3E,cAAD,EAAyBI,QAAzB,EAAyDwE,YAAzD,EAAgF;IACzF,MAAMC,QAAQ,GAAG,IAAIlF,cAAJ,CAAmB;MAClCU,MAAM,EAAE,CAD0B;MAElCyE,MAAM,EAAEF,YAAY,GAAG,CAAH,GAAO,CAFO;MAGlCxE,QAHkC;MAIlC2E,OAAO,EAAE/E;IAJyB,CAAnB,CAAjB;IAOA,IAAIgF,kBAAkB,GAAG,CAAzB;IACA,IAAI5E,QAAJ,EAAc;MACZ,KAAK,IAAI6E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjF,cAApB,EAAoCiF,CAAC,EAArC,EAAyC;QACvC,MAAMC,CAAC,GAAG9E,QAAQ,CAAC6E,CAAD,CAAlB;QACA,MAAME,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUH,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAhC,CAAV;QACAF,kBAAkB,IAAIG,CAAC,GAAGnF,cAA1B;MACD;IACF,CAND,MAMO;MACLgF,kBAAkB,GAAG,CAArB;IACD;IACD,KAAKM,QAAL,CAAc;MACZC,YAAY,EAAEH,IAAI,CAACI,GAAL,CAASJ,IAAI,CAACK,EAAL,GAAUzF,cAAnB,IAAqCgF;IADvC,CAAd;IAIA,OAAOH,QAAP;EACD;EAESL,SAASA,CAACtC,EAAD,EAAmC;IACpD,OAAO,IAAI3C,KAAJ,CAAU2C,EAAV,EAAc;MACnB,GAAG,KAAKD,UAAL,EADgB;MAEnByD,EAAE,EAAE,KAAKnD,KAAL,CAAWmD,EAFI;MAGnBC,WAAW,EAAE;IAHM,CAAd,CAAP;EAKD;EAESjB,eAAeA,CAAAkB,IAAA,EAAgD;IAAA,IAA/C;MAAC5F,cAAD;MAAiBI,QAAjB;MAA2Bc,QAA3B;MAAqCG;IAArC,CAAD,GAAAuE,IAAA;IACvB,MAAMf,QAAa,GAAG,KAAKF,WAAL,CAAiB3E,cAAjB,EAAiCI,QAAjC,EAA2Cc,QAAQ,IAAIG,OAAvD,CAAtB;IAEA,KAAKiE,QAAL,CAAc;MACZO,eAAe,EAAEhB,QAAQ,CAACiB,UAAT,CAAoBC,QAApB,CAA6B5F,KAA7B,CAAmCsD,MAAnC,GAA4C,CADjD;MAEZuC,oBAAoB,EAAEnB,QAAQ,CAACoB,OAAT,CAAiB9F,KAAjB,CAAuBsD;IAFjC,CAAd;IAKA,KAAKY,KAAL,CAAWC,KAAX,CAAiB4B,QAAjB,CAA0B;MAACrB;IAAD,CAA1B;EACD;EAEDsB,IAAIA,CAAAC,KAAA,EAAa;IAAA,IAAZ;MAACC;IAAD,CAAD,GAAAD,KAAA;IACF,MAAM;MACJxF,cADI;MAEJC,cAFI;MAGJC,kBAHI;MAIJC,kBAJI;MAKJJ,WALI;MAMJD,cANI;MAOJQ,QAPI;MAQJE,MARI;MASJC,OATI;MAUJF,SAVI;MAWJZ,MAXI;MAYJC,QAZI;MAaJH,MAbI;MAcJC;IAdI,IAeF,KAAKiC,KAfT;IAgBA,MAAM;MAAC+B,KAAD;MAAQuB,eAAR;MAAyBG,oBAAzB;MAA+CT;IAA/C,IAA+D,KAAKlB,KAA1E;IAEAC,KAAK,CAACgC,WAAN,CAAkBD,QAAlB,EAA4BC,WAA5B,CAAwC;MACtCjG,MADsC;MAEtCC,KAAK,EAAGA,KAAK,GAAG,GAAT,GAAgB8E,IAAI,CAACK,EAFU;MAGtClF,MAHsC;MAItCW,QAJsC;MAKtCG,OALsC;MAMtCb,QANsC;MAOtCE,cAPsC;MAQtC6E,YARsC;MAStC5E,WAAW,EAAErB,IAAI,CAACqB,WAAD,CATqB;MAUtC4F,UAAU,EAAEjH,IAAI,CAACsB,cAAD,CAVsB;MAWtC4F,UAAU,EAAE3F,cAX0B;MAYtC4F,cAAc,EAAE3F,kBAZsB;MAatC4F,cAAc,EAAE3F;IAbsB,CAAxC;IAiBA,IAAIG,QAAQ,IAAIC,SAAhB,EAA2B;MACzBmD,KAAK,CAAC4B,QAAN,CAAe;QAACS,SAAS,EAAE;MAAZ,CAAf;MACArC,KAAK,CACFsC,cADH,CACkBZ,oBADlB,EAEGa,WAFH,IAGGP,WAHH,CAGe;QAACQ,QAAQ,EAAE;MAAX,CAHf,EAIGX,IAJH;IAKD;IACD,IAAI/E,MAAJ,EAAY;MACVkD,KAAK,CAAC4B,QAAN,CAAe;QAACS,SAAS,EAAE;MAAZ,CAAf;MACArC,KAAK,CACFsC,cADH,CACkBf,eADlB,EAEGgB,WAFH,IAGGP,WAHH,CAGe;QAACQ,QAAQ,EAAE;MAAX,CAHf,EAIGX,IAJH;IAKD;IAED,IAAI,CAACjF,QAAD,IAAaG,OAAjB,EAA0B;MACxBiD,KAAK,CAAC4B,QAAN,CAAe;QAACS,SAAS,EAAE;MAAZ,CAAf;MAGArC,KAAK,CACFsC,cADH,CACmBf,eAAe,GAAG,CAAnB,GAAwB,CAD1C,EAEGgB,WAFH,IAGGP,WAHH,CAGe;QAACQ,QAAQ,EAAE;MAAX,CAHf,EAIGX,IAJH;IAKD;EACF;AAtMD;gBAFmBnE,W,eAGA,a;gBAHAA,W,kBAIGjC,Y"},"metadata":{},"sourceType":"module","externalDependencies":[]}