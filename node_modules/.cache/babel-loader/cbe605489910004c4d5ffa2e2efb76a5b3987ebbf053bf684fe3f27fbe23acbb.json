{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Vector3 from './vector3';\nimport { formatValue, equals, config } from '../lib/common';\nimport { degrees, radians, clamp } from '../lib/common';\nimport * as vec3 from 'gl-matrix/vec3';\nconst EPSILON = 0.000001;\nconst EARTH_RADIUS_METERS = 6371000;\nexport default class SphericalCoordinates {\n  constructor() {\n    let {\n      phi = 0,\n      theta = 0,\n      radius = 1,\n      bearing,\n      pitch,\n      altitude,\n      radiusScale = EARTH_RADIUS_METERS\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"phi\", void 0);\n    _defineProperty(this, \"theta\", void 0);\n    _defineProperty(this, \"radius\", void 0);\n    _defineProperty(this, \"radiusScale\", void 0);\n    this.phi = phi;\n    this.theta = theta;\n    this.radius = radius || altitude || 1;\n    this.radiusScale = radiusScale || 1;\n    if (bearing !== undefined) {\n      this.bearing = bearing;\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch;\n    }\n    this.check();\n  }\n  toString() {\n    return this.formatString(config);\n  }\n  formatString(_ref) {\n    let {\n      printTypes = false\n    } = _ref;\n    const f = formatValue;\n    return \"\".concat(printTypes ? 'Spherical' : '', \"[rho:\").concat(f(this.radius), \",theta:\").concat(f(this.theta), \",phi:\").concat(f(this.phi), \"]\");\n  }\n  equals(other) {\n    return equals(this.radius, other.radius) && equals(this.theta, other.theta) && equals(this.phi, other.phi);\n  }\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n  fromLngLatZ(_ref2) {\n    let [lng, lat, z] = _ref2;\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n    return this.check();\n  }\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]);\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1));\n    }\n    return this.check();\n  }\n  toVector3() {\n    return new Vector3(0, 0, this.radius).rotateX({\n      radians: this.theta\n    }).rotateZ({\n      radians: this.phi\n    });\n  }\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n  check() {\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["Vector3","formatValue","equals","config","degrees","radians","clamp","vec3","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","constructor","phi","theta","radius","bearing","pitch","altitude","radiusScale","arguments","length","undefined","_defineProperty","check","toString","formatString","_ref","printTypes","f","concat","other","exactEquals","v","Math","PI","longitude","latitude","lng","lat","z","set","clone","copy","fromLngLatZ","_ref2","fromVector3","atan2","acos","toVector3","rotateX","rotateZ","makeSafe","max","min","Number","isFinite","Error"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@math.gl/core/src/classes/spherical-coordinates.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\n// Adaptation of THREE.js Spherical class, under MIT license\nimport Vector3 from './vector3';\nimport {formatValue, equals, config} from '../lib/common';\nimport {degrees, radians, clamp} from '../lib/common';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {NumericArray} from '@math.gl/types';\n\ntype SphericalCoordinatesOptions = {\n  phi?: number;\n  theta?: number;\n  radius?: number;\n  bearing?: number;\n  pitch?: number;\n  altitude?: number;\n  radiusScale?: number;\n};\n\ntype FormatOptions = {\n  printTypes?: boolean;\n};\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\nconst EARTH_RADIUS_METERS = 6371000;\n\n/**\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n * @link https://en.wikipedia.org/wiki/Spherical_coordinate_system\n */\nexport default class SphericalCoordinates {\n  phi: number;\n  theta: number;\n  radius: number;\n  radiusScale: number;\n  // bearing: number;\n  // pitch: number;\n  // altitude: number;\n\n  // lnglatZ coordinates\n  // longitude: number;\n  // latitude: number;\n  // lng: number;\n  // lat: number;\n  // z: number;\n\n  /**\n   * Creates a new SphericalCoordinates object\n   * @param options\n   * @param [options.phi] =0 - rotation around X (latitude)\n   * @param [options.theta] =0 - rotation around Y (longitude)\n   * @param [options.radius] =1 - Distance from center\n   * @param [options.bearing]\n   * @param [options.pitch]\n   * @param [options.altitude]\n   * @param [options.radiusScale] =1\n   */\n  // eslint-disable-next-line complexity\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing,\n    pitch,\n    altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  }: SphericalCoordinatesOptions = {}) {\n    this.phi = phi;\n    this.theta = theta;\n    // TODO - silently accepts illegal 0\n    this.radius = radius || altitude || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n    if (bearing !== undefined) {\n      this.bearing = bearing; // up / down towards top and bottom pole\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch; // around the equator of the sphere\n    }\n    this.check();\n  }\n\n  toString(): string {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes = false}: FormatOptions): string {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other: SphericalCoordinates): boolean {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other: SphericalCoordinates): boolean {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing(): number {\n    return 180 - degrees(this.phi);\n  }\n\n  set bearing(v: number) {\n    this.phi = Math.PI - radians(v);\n  }\n\n  get pitch(): number {\n    return degrees(this.theta);\n  }\n\n  set pitch(v: number) {\n    this.theta = radians(v);\n  }\n\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n  // lnglatZ coordinates\n  get longitude(): number {\n    return degrees(this.phi);\n  }\n\n  get latitude(): number {\n    return degrees(this.theta);\n  }\n\n  get lng(): number {\n    return degrees(this.phi);\n  }\n\n  get lat(): number {\n    return degrees(this.theta);\n  }\n\n  get z(): number {\n    return (this.radius - 1) * this.radiusScale;\n  }\n\n  /* eslint-enable brace-style */\n  set(radius: number, phi: number, theta: number): this {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone(): SphericalCoordinates {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other: SphericalCoordinates): this {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]: [number, number, number]): this {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n    return this.check();\n  }\n\n  fromVector3(v: Readonly<NumericArray>): this {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3(): Vector3 {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe(): this {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check(): this {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}