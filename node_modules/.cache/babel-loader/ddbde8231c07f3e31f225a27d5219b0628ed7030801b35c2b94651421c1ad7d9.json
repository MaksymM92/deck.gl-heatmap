{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_FONT_SETTINGS, setFontAtlasCacheLimit } from './font-atlas-manager';\nimport { transformParagraph, getTextFromBuffer } from './utils';\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_LINE_HEIGHT = 1.0;\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  background: false,\n  getBackgroundColor: {\n    type: 'accessor',\n    value: [255, 255, 255, 255]\n  },\n  getBorderColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getBorderWidth: {\n    type: 'accessor',\n    value: 0\n  },\n  backgroundPadding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  characterSet: {\n    type: 'object',\n    value: DEFAULT_FONT_SETTINGS.characterSet\n  },\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  outlineColor: {\n    type: 'color',\n    value: DEFAULT_COLOR\n  },\n  fontSettings: {\n    type: 'object',\n    value: {},\n    compare: 1\n  },\n  wordBreak: 'break-word',\n  maxWidth: {\n    type: 'number',\n    value: -1\n  },\n  getText: {\n    type: 'accessor',\n    value: x => x.text\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  backgroundColor: {\n    deprecatedFor: ['background', 'getBackgroundColor']\n  }\n};\nexport default class TextLayer extends CompositeLayer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"getBoundingRect\", (object, objectInfo) => {\n      let {\n        size: [width, height]\n      } = this.transformParagraph(object, objectInfo);\n      const {\n        fontSize\n      } = this.state.fontAtlasManager.props;\n      width /= fontSize;\n      height /= fontSize;\n      const {\n        getTextAnchor,\n        getAlignmentBaseline\n      } = this.props;\n      const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];\n    });\n    _defineProperty(this, \"getIconOffsets\", (object, objectInfo) => {\n      const {\n        getTextAnchor,\n        getAlignmentBaseline\n      } = this.props;\n      const {\n        x,\n        y,\n        rowWidth,\n        size: [width, height]\n      } = this.transformParagraph(object, objectInfo);\n      const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      const numCharacters = x.length;\n      const offsets = new Array(numCharacters * 2);\n      let index = 0;\n      for (let i = 0; i < numCharacters; i++) {\n        const rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;\n        offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];\n        offsets[index++] = (anchorY - 1) * height / 2 + y[i];\n      }\n      return offsets;\n    });\n  }\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n    if (this.props.maxWidth > 0) {\n      log.warn('v8.9 breaking change: TextLayer maxWidth is now relative to text size')();\n    }\n  }\n  updateState(params) {\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);\n    if (textChanged) {\n      this._updateText();\n    }\n    const fontChanged = this._updateFontAtlas();\n    const styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n  _updateFontAtlas() {\n    const {\n      fontSettings,\n      fontFamily,\n      fontWeight\n    } = this.props;\n    const {\n      fontAtlasManager,\n      characterSet\n    } = this.state;\n    const fontProps = {\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n    if (!fontAtlasManager.mapping) {\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n    return false;\n  }\n  _updateText() {\n    var _attributes;\n    const {\n      data,\n      characterSet\n    } = this.props;\n    const textBuffer = (_attributes = data.attributes) === null || _attributes === void 0 ? void 0 : _attributes.getText;\n    let {\n      getText\n    } = this.props;\n    let startIndices = data.startIndices;\n    let numInstances;\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n    if (textBuffer && startIndices) {\n      const {\n        texts,\n        characterCount\n      } = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {\n          value: textBuffer\n        } : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, _ref2) => {\n        let {\n          index\n        } = _ref2;\n        return texts[index];\n      };\n    } else {\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n      for (const object of iterable) {\n        objectInfo.index++;\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n  transformParagraph(object, objectInfo) {\n    const {\n      fontAtlasManager\n    } = this.state;\n    const iconMapping = fontAtlasManager.mapping;\n    const getText = this.state.getText;\n    const {\n      wordBreak,\n      lineHeight,\n      maxWidth\n    } = this.props;\n    const paragraph = getText(object, objectInfo) || '';\n    return transformParagraph(paragraph, lineHeight, wordBreak, maxWidth * fontAtlasManager.props.fontSize, iconMapping);\n  }\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {\n        scale,\n        texture,\n        mapping\n      },\n      styleVersion\n    } = this.state;\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n    return [background && new BackgroundLayerClass({\n      getFillColor: getBackgroundColor,\n      getLineColor: getBorderColor,\n      getLineWidth: getBorderWidth,\n      padding: backgroundPadding,\n      getPosition,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getSize: transitions.getSize,\n        getFillColor: transitions.getBackgroundColor,\n        getLineColor: transitions.getBorderColor,\n        getLineWidth: transitions.getBorderWidth,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'background',\n      updateTriggers: {\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getSize: updateTriggers.getSize,\n        getFillColor: updateTriggers.getBackgroundColor,\n        getLineColor: updateTriggers.getBorderColor,\n        getLineWidth: updateTriggers.getBorderWidth,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getBoundingRect: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data: data.attributes && data.attributes.background ? {\n        length: data.length,\n        attributes: data.attributes.background\n      } : data,\n      _dataDiff,\n      autoHighlight: false,\n      getBoundingRect: this.getBoundingRect\n    }), new CharactersLayerClass({\n      sdf: fontSettings.sdf,\n      smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,\n      outlineWidth: outlineWidth / (fontSettings.radius || DEFAULT_FONT_SETTINGS.radius),\n      outlineColor,\n      iconAtlas: texture,\n      iconMapping: mapping,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale * scale,\n      sizeUnits,\n      sizeMinPixels: sizeMinPixels * scale,\n      sizeMaxPixels: sizeMaxPixels * scale,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getColor: transitions.getColor,\n        getSize: transitions.getSize,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'characters',\n      updateTriggers: {\n        getIcon: updateTriggers.getText,\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getColor: updateTriggers.getColor,\n        getSize: updateTriggers.getSize,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getIconOffsets: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data,\n      _dataDiff,\n      startIndices,\n      numInstances,\n      getIconOffsets: this.getIconOffsets,\n      getIcon: getText\n    })];\n  }\n  static set fontAtlasCacheLimit(limit) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n_defineProperty(TextLayer, \"defaultProps\", defaultProps);\n_defineProperty(TextLayer, \"layerName\", 'TextLayer');","map":{"version":3,"names":["_defineProperty","CompositeLayer","createIterable","log","MultiIconLayer","FontAtlasManager","DEFAULT_FONT_SETTINGS","setFontAtlasCacheLimit","transformParagraph","getTextFromBuffer","TextBackgroundLayer","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","compare","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","TextLayer","constructor","arguments","object","objectInfo","size","width","height","fontSize","state","fontAtlasManager","props","anchorX","anchorY","y","rowWidth","numCharacters","length","offsets","Array","index","i","rowOffset","initializeState","styleVersion","warn","updateState","params","oldProps","changeFlags","textChanged","dataChanged","updateTriggersChanged","all","_updateText","fontChanged","_updateFontAtlas","styleChanged","setState","getPickingInfo","_ref","info","data","fontProps","mapping","setProps","key","_attributes","textBuffer","attributes","startIndices","numInstances","autoCharacterSet","Set","texts","characterCount","ArrayBuffer","isView","_","_ref2","iterable","from","forEach","add","push","iconMapping","paragraph","renderLayers","scale","texture","_dataDiff","transitions","updateTriggers","CharactersLayerClass","getSubLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","getSubLayerProps","id","getBoundingRect","autoHighlight","sdf","smoothing","isFinite","radius","iconAtlas","getIcon","getIconOffsets","fontAtlasCacheLimit","limit"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/dist/esm/text-layer/text-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_FONT_SETTINGS, setFontAtlasCacheLimit } from './font-atlas-manager';\nimport { transformParagraph, getTextFromBuffer } from './utils';\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_LINE_HEIGHT = 1.0;\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  background: false,\n  getBackgroundColor: {\n    type: 'accessor',\n    value: [255, 255, 255, 255]\n  },\n  getBorderColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getBorderWidth: {\n    type: 'accessor',\n    value: 0\n  },\n  backgroundPadding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  characterSet: {\n    type: 'object',\n    value: DEFAULT_FONT_SETTINGS.characterSet\n  },\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  outlineColor: {\n    type: 'color',\n    value: DEFAULT_COLOR\n  },\n  fontSettings: {\n    type: 'object',\n    value: {},\n    compare: 1\n  },\n  wordBreak: 'break-word',\n  maxWidth: {\n    type: 'number',\n    value: -1\n  },\n  getText: {\n    type: 'accessor',\n    value: x => x.text\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  backgroundColor: {\n    deprecatedFor: ['background', 'getBackgroundColor']\n  }\n};\nexport default class TextLayer extends CompositeLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"getBoundingRect\", (object, objectInfo) => {\n      let {\n        size: [width, height]\n      } = this.transformParagraph(object, objectInfo);\n      const {\n        fontSize\n      } = this.state.fontAtlasManager.props;\n      width /= fontSize;\n      height /= fontSize;\n      const {\n        getTextAnchor,\n        getAlignmentBaseline\n      } = this.props;\n      const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];\n    });\n\n    _defineProperty(this, \"getIconOffsets\", (object, objectInfo) => {\n      const {\n        getTextAnchor,\n        getAlignmentBaseline\n      } = this.props;\n      const {\n        x,\n        y,\n        rowWidth,\n        size: [width, height]\n      } = this.transformParagraph(object, objectInfo);\n      const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n      const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n      const numCharacters = x.length;\n      const offsets = new Array(numCharacters * 2);\n      let index = 0;\n\n      for (let i = 0; i < numCharacters; i++) {\n        const rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;\n        offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];\n        offsets[index++] = (anchorY - 1) * height / 2 + y[i];\n      }\n\n      return offsets;\n    });\n  }\n\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n\n    if (this.props.maxWidth > 0) {\n      log.warn('v8.9 breaking change: TextLayer maxWidth is now relative to text size')();\n    }\n  }\n\n  updateState(params) {\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = this._updateFontAtlas();\n\n    const styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({\n    info\n  }) {\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas() {\n    const {\n      fontSettings,\n      fontFamily,\n      fontWeight\n    } = this.props;\n    const {\n      fontAtlasManager,\n      characterSet\n    } = this.state;\n    const fontProps = { ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n\n    if (!fontAtlasManager.mapping) {\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _updateText() {\n    var _attributes;\n\n    const {\n      data,\n      characterSet\n    } = this.props;\n    const textBuffer = (_attributes = data.attributes) === null || _attributes === void 0 ? void 0 : _attributes.getText;\n    let {\n      getText\n    } = this.props;\n    let startIndices = data.startIndices;\n    let numInstances;\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {\n        texts,\n        characterCount\n      } = getTextFromBuffer({ ...(ArrayBuffer.isView(textBuffer) ? {\n          value: textBuffer\n        } : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n\n      getText = (_, {\n        index\n      }) => texts[index];\n    } else {\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const text = Array.from(getText(object, objectInfo) || '');\n\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  transformParagraph(object, objectInfo) {\n    const {\n      fontAtlasManager\n    } = this.state;\n    const iconMapping = fontAtlasManager.mapping;\n    const getText = this.state.getText;\n    const {\n      wordBreak,\n      lineHeight,\n      maxWidth\n    } = this.props;\n    const paragraph = getText(object, objectInfo) || '';\n    return transformParagraph(paragraph, lineHeight, wordBreak, maxWidth * fontAtlasManager.props.fontSize, iconMapping);\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {\n        scale,\n        texture,\n        mapping\n      },\n      styleVersion\n    } = this.state;\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n    return [background && new BackgroundLayerClass({\n      getFillColor: getBackgroundColor,\n      getLineColor: getBorderColor,\n      getLineWidth: getBorderWidth,\n      padding: backgroundPadding,\n      getPosition,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getSize: transitions.getSize,\n        getFillColor: transitions.getBackgroundColor,\n        getLineColor: transitions.getBorderColor,\n        getLineWidth: transitions.getBorderWidth,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'background',\n      updateTriggers: {\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getSize: updateTriggers.getSize,\n        getFillColor: updateTriggers.getBackgroundColor,\n        getLineColor: updateTriggers.getBorderColor,\n        getLineWidth: updateTriggers.getBorderWidth,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getBoundingRect: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data: data.attributes && data.attributes.background ? {\n        length: data.length,\n        attributes: data.attributes.background\n      } : data,\n      _dataDiff,\n      autoHighlight: false,\n      getBoundingRect: this.getBoundingRect\n    }), new CharactersLayerClass({\n      sdf: fontSettings.sdf,\n      smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,\n      outlineWidth: outlineWidth / (fontSettings.radius || DEFAULT_FONT_SETTINGS.radius),\n      outlineColor,\n      iconAtlas: texture,\n      iconMapping: mapping,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale * scale,\n      sizeUnits,\n      sizeMinPixels: sizeMinPixels * scale,\n      sizeMaxPixels: sizeMaxPixels * scale,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getColor: transitions.getColor,\n        getSize: transitions.getSize,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'characters',\n      updateTriggers: {\n        getIcon: updateTriggers.getText,\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getColor: updateTriggers.getColor,\n        getSize: updateTriggers.getSize,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getIconOffsets: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data,\n      _dataDiff,\n      startIndices,\n      numInstances,\n      getIconOffsets: this.getIconOffsets,\n      getIcon: getText\n    })];\n  }\n\n  static set fontAtlasCacheLimit(limit) {\n    setFontAtlasCacheLimit(limit);\n  }\n\n}\n\n_defineProperty(TextLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(TextLayer, \"layerName\", 'TextLayer');\n//# sourceMappingURL=text-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}