{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray } from '@luma.gl/core';\nimport { padBuffer, getAttributeTypeFromSize, getSourceBufferAttribute, getAttributeBufferLength, cycleBuffers } from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\nexport default class GPUSpringTransition {\n  constructor(_ref) {\n    let {\n      gl,\n      attribute,\n      timeline\n    } = _ref;\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"type\", 'spring');\n    _defineProperty(this, \"attributeInTransition\", void 0);\n    _defineProperty(this, \"settings\", void 0);\n    _defineProperty(this, \"attribute\", void 0);\n    _defineProperty(this, \"transition\", void 0);\n    _defineProperty(this, \"currentStartIndices\", void 0);\n    _defineProperty(this, \"currentLength\", void 0);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"framebuffer\", void 0);\n    _defineProperty(this, \"transform\", void 0);\n    _defineProperty(this, \"buffers\", void 0);\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = new Attribute(gl, {\n      ...attribute.settings,\n      normalized: false\n    });\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: 35050\n    };\n    this.buffers = [new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts)];\n  }\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n  start(transitionSettings, numInstances) {\n    const {\n      gl,\n      buffers,\n      attribute\n    } = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n    for (const buffer of buffers) {\n      padBuffer({\n        buffer,\n        ...padBufferOpts\n      });\n    }\n    this.settings = transitionSettings;\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      value: attribute.value\n    });\n    this.transition.start({\n      ...transitionSettings,\n      duration: Infinity\n    });\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n  update() {\n    const {\n      buffers,\n      transform,\n      framebuffer,\n      transition\n    } = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n    const settings = this.settings;\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: settings.stiffness,\n        damping: settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [1, 1],\n        blendEquation: [32776, 32776]\n      }\n    });\n    cycleBuffers(buffers);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      value: this.attribute.value\n    });\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n    if (!isTransitioning) {\n      transition.end();\n    }\n    return true;\n  }\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    for (const buffer of this.buffers) {\n      buffer.delete();\n    }\n    this.buffers.length = 0;\n    this.texture.delete();\n    this.framebuffer.delete();\n  }\n}\nfunction getTransform(gl, attribute, framebuffer) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: \"\\n#define SHADER_NAME spring-transition-vertex-shader\\n\\n#define EPSILON 0.00001\\n\\nuniform float stiffness;\\nuniform float damping;\\nattribute ATTRIBUTE_TYPE aPrev;\\nattribute ATTRIBUTE_TYPE aCur;\\nattribute ATTRIBUTE_TYPE aTo;\\nvarying ATTRIBUTE_TYPE vNext;\\nvarying float vIsTransitioningFlag;\\n\\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\\n  ATTRIBUTE_TYPE velocity = cur - prev;\\n  ATTRIBUTE_TYPE delta = dest - cur;\\n  ATTRIBUTE_TYPE spring = delta * stiffness;\\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\\n  return spring + damper + velocity + cur;\\n}\\n\\nvoid main(void) {\\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\\n\\n  vNext = getNextValue(aCur, aPrev, aTo);\\n  gl_Position = vec4(0, 0, 0, 1);\\n  gl_PointSize = 100.0;\\n}\\n\",\n    fs: \"\\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\\n\\nvarying float vIsTransitioningFlag;\\n\\nvoid main(void) {\\n  if (vIsTransitioningFlag == 0.0) {\\n    discard;\\n  }\\n  gl_FragColor = vec4(1.0);\\n}\",\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: 6408,\n    type: 5121,\n    border: 0,\n    mipmaps: false,\n    dataFormat: 6408,\n    width: 1,\n    height: 1\n  });\n}\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [36064]: texture\n    }\n  });\n}","map":{"version":3,"names":["Buffer","Transform","Framebuffer","Texture2D","readPixelsToArray","padBuffer","getAttributeTypeFromSize","getSourceBufferAttribute","getAttributeBufferLength","cycleBuffers","Attribute","Transition","GPUSpringTransition","constructor","_ref","gl","attribute","timeline","_defineProperty","type","transition","attributeInTransition","settings","normalized","currentStartIndices","startIndices","currentLength","texture","getTexture","framebuffer","getFramebuffer","transform","getTransform","bufferOpts","byteLength","usage","buffers","inProgress","start","transitionSettings","numInstances","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","setData","value","duration","Infinity","update","elementCount","Math","floor","size","sourceBuffers","aTo","updated","aPrev","aCur","feedbackBuffers","vNext","run","discard","clearRenderTarget","uniforms","stiffness","damping","parameters","depthTest","blend","viewport","blendFunc","blendEquation","isTransitioning","end","cancel","delete","length","attributeType","vs","fs","defines","ATTRIBUTE_TYPE","varyings","data","Uint8Array","format","border","mipmaps","dataFormat","width","height","id","attachments"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/transitions/gpu-spring-transition.ts"],"sourcesContent":["/* eslint-disable complexity, max-statements, max-params */\nimport GL from '@luma.gl/constants';\nimport {Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray} from '@luma.gl/core';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers,\n  SpringTransitionSettings\n} from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\n\nimport type {Timeline, Transform as LumaTransform} from '@luma.gl/engine';\nimport type {\n  Buffer as LumaBuffer,\n  Framebuffer as LumaFramebuffer,\n  Texture2D as LumaTexture2D\n} from '@luma.gl/webgl';\nimport type {NumericArray} from '../types/types';\nimport type GPUTransition from './gpu-transition';\n\nexport default class GPUSpringTransition implements GPUTransition {\n  gl: WebGLRenderingContext;\n  type = 'spring';\n  attributeInTransition: Attribute;\n\n  private settings?: SpringTransitionSettings;\n  private attribute: Attribute;\n  private transition: Transition;\n  private currentStartIndices: NumericArray | null;\n  private currentLength: number;\n  private texture: LumaTexture2D;\n  private framebuffer: LumaFramebuffer;\n  private transform: LumaTransform;\n  private buffers: LumaBuffer[];\n\n  constructor({\n    gl,\n    attribute,\n    timeline\n  }: {\n    gl: WebGLRenderingContext;\n    attribute: Attribute;\n    timeline: Timeline;\n  }) {\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(gl, {...attribute.settings, normalized: false});\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // previous\n      new Buffer(gl, bufferOpts), // current\n      new Buffer(gl, bufferOpts) // next\n    ];\n  }\n\n  get inProgress(): boolean {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings: SpringTransitionSettings, numInstances: number): void {\n    const {gl, buffers, attribute} = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.settings = transitionSettings;\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value as NumericArray\n    });\n\n    // when an attribute changes values, a new transition is started. These\n    // are properties that we have to store on this.transition but can change\n    // when new transitions are started, so we have to keep them up-to-date.\n    // this.transition.start() takes the latest settings and updates them.\n    this.transition.start({...transitionSettings, duration: Infinity});\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {buffers, transform, framebuffer, transition} = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n    const settings = this.settings as SpringTransitionSettings;\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: settings.stiffness,\n        damping: settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: [GL.MAX, GL.MAX]\n      }\n    });\n\n    cycleBuffers(buffers);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: this.attribute.value as NumericArray\n    });\n\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    for (const buffer of this.buffers) {\n      buffer.delete();\n    }\n    this.buffers.length = 0;\n    this.texture.delete();\n    this.framebuffer.delete();\n  }\n}\n\nfunction getTransform(\n  gl: WebGLRenderingContext,\n  attribute: Attribute,\n  framebuffer: LumaFramebuffer\n): LumaTransform {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: `\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`,\n    fs: `\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}`,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl: WebGLRenderingContext): LumaTexture2D {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: GL.RGBA,\n    type: GL.UNSIGNED_BYTE,\n    border: 0,\n    mipmaps: false,\n    dataFormat: GL.RGBA,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl: WebGLRenderingContext, texture: LumaTexture2D): LumaFramebuffer {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}