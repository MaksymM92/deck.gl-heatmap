{"ast":null,"code":"import Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport { assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport { flipRows, scalePixels } from '../webgl-utils/typed-array-utils';\nimport { getTypedArrayFromGLType, getGLTypeFromTypedArray } from '../webgl-utils/typed-array-utils';\nimport { glFormatToComponents, glTypeToBytes } from '../webgl-utils/format-utils';\nimport { toFramebuffer } from '../webgl-utils/texture-utils';\nimport { assert } from '../utils/assert';\nexport function readPixelsToArray(source) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = 6408\n  } = options;\n  let {\n    sourceAttachment = 36064,\n    target = null,\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = options;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  assert(framebuffer);\n  const {\n    gl,\n    handle,\n    attachments\n  } = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n  if (sourceAttachment === 36064 && handle === null) {\n    sourceAttachment = 1028;\n  }\n  assert(attachments[sourceAttachment]);\n  sourceType = sourceType || attachments[sourceAttachment].type;\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n  const prevHandle = gl.bindFramebuffer(36160, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.bindFramebuffer(36160, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\nexport function readPixelsToBuffer(source, _ref) {\n  let {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = 6408,\n    target = null,\n    targetByteOffset = 0,\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = _ref;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  assert(framebuffer);\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n  const gl2 = assertWebGL2Context(framebuffer.gl);\n  sourceType = sourceType || (target ? target.type : 5121);\n  if (!target) {\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl2, {\n      byteLength,\n      accessor: {\n        type: sourceType,\n        size: components\n      }\n    });\n  }\n  target.bind({\n    target: 35051\n  });\n  withParameters(gl2, {\n    framebuffer\n  }, () => {\n    gl2.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, targetByteOffset);\n  });\n  target.unbind({\n    target: 35051\n  });\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\nexport function copyToDataUrl(source) {\n  let {\n    sourceAttachment = 36064,\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let data = readPixelsToArray(source, {\n    sourceAttachment\n  });\n  let {\n    width,\n    height\n  } = source;\n  while (height > targetMaxHeight) {\n    ({\n      data,\n      width,\n      height\n    } = scalePixels({\n      data,\n      width,\n      height\n    }));\n  }\n  flipRows({\n    data,\n    width,\n    height\n  });\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL();\n}\nexport function copyToImage(source) {\n  let {\n    sourceAttachment = 36064,\n    targetImage = null\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const dataUrl = copyToDataUrl(source, {\n    sourceAttachment\n  });\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\nexport function copyToTexture(source, target) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    targetMipmaplevel = 0,\n    targetInternalFormat = 6408\n  } = options;\n  let {\n    targetX,\n    targetY,\n    targetZ,\n    width,\n    height\n  } = options;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  assert(framebuffer);\n  const {\n    gl,\n    handle\n  } = framebuffer;\n  const isSubCopy = typeof targetX !== 'undefined' || typeof targetY !== 'undefined' || typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(36160, handle);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n  if (!isSubCopy) {\n    gl.copyTexImage2D(target, targetMipmaplevel, targetInternalFormat, sourceX, sourceY, width, height, 0);\n  } else {\n    switch (target) {\n      case 3553:\n      case 34067:\n        gl.copyTexSubImage2D(target, targetMipmaplevel, targetX, targetY, sourceX, sourceY, width, height);\n        break;\n      case 35866:\n      case 32879:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.copyTexSubImage3D(target, targetMipmaplevel, targetX, targetY, targetZ, sourceX, sourceY, width, height);\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  gl.bindFramebuffer(36160, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\nexport function blit(source, target) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    sourceX0 = 0,\n    sourceY0 = 0,\n    targetX0 = 0,\n    targetY0 = 0,\n    color = true,\n    depth = false,\n    stencil = false,\n    filter = 9728\n  } = options;\n  let {\n    sourceX1,\n    sourceY1,\n    targetX1,\n    targetY1,\n    sourceAttachment = 36064,\n    mask = 0\n  } = options;\n  const {\n    framebuffer: srcFramebuffer,\n    deleteFramebuffer: deleteSrcFramebuffer\n  } = getFramebuffer(source);\n  const {\n    framebuffer: dstFramebuffer,\n    deleteFramebuffer: deleteDstFramebuffer\n  } = getFramebuffer(target);\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  const {\n    gl,\n    handle,\n    width,\n    height,\n    readBuffer\n  } = dstFramebuffer;\n  const gl2 = assertWebGL2Context(gl);\n  if (!srcFramebuffer.handle && sourceAttachment === 36064) {\n    sourceAttachment = 1028;\n  }\n  if (color) {\n    mask |= 16384;\n  }\n  if (depth) {\n    mask |= 256;\n  }\n  if (stencil) {\n    mask |= 1024;\n  }\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    if (mask & (256 | 1024)) {\n      mask = 16384;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n  const prevDrawHandle = gl.bindFramebuffer(36009, handle);\n  const prevReadHandle = gl.bindFramebuffer(36008, srcFramebuffer.handle);\n  gl2.readBuffer(sourceAttachment);\n  gl2.blitFramebuffer(sourceX0, sourceY0, sourceX1, sourceY1, targetX0, targetY0, targetX1, targetY1, mask, filter);\n  gl2.readBuffer(readBuffer);\n  gl2.bindFramebuffer(36008, prevReadHandle || null);\n  gl2.bindFramebuffer(36009, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n  return dstFramebuffer;\n}\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {\n      framebuffer: toFramebuffer(source),\n      deleteFramebuffer: true\n    };\n  }\n  return {\n    framebuffer: source,\n    deleteFramebuffer: false\n  };\n}\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  type = type || 5121;\n  const ArrayType = getTypedArrayFromGLType(type, {\n    clamped: false\n  });\n  const components = glFormatToComponents(format);\n  return new ArrayType(width * height * components);\n}","map":{"version":3,"names":["Buffer","Framebuffer","Texture","assertWebGL2Context","withParameters","log","flipRows","scalePixels","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","toFramebuffer","assert","readPixelsToArray","source","options","arguments","length","undefined","sourceX","sourceY","sourceFormat","sourceAttachment","target","sourceWidth","sourceHeight","sourceType","framebuffer","deleteFramebuffer","getFramebuffer","gl","handle","attachments","width","height","type","getPixelArray","prevHandle","bindFramebuffer","readPixels","delete","readPixelsToBuffer","_ref","targetByteOffset","gl2","components","byteCount","byteLength","accessor","size","bind","unbind","copyToDataUrl","targetMaxHeight","Number","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","copyToImage","targetImage","dataUrl","Image","src","copyToTexture","targetMipmaplevel","targetInternalFormat","targetX","targetY","targetZ","isSubCopy","texture","isFinite","copyTexImage2D","copyTexSubImage2D","copyTexSubImage3D","blit","sourceX0","sourceY0","targetX0","targetY0","color","depth","stencil","filter","sourceX1","sourceY1","targetX1","targetY1","mask","srcFramebuffer","deleteSrcFramebuffer","dstFramebuffer","deleteDstFramebuffer","readBuffer","warn","prevDrawHandle","prevReadHandle","blitFramebuffer","pixelArray","format","ArrayType","clamped"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/copy-and-blit.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport {assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {flipRows, scalePixels} from '../webgl-utils/typed-array-utils';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {toFramebuffer} from '../webgl-utils/texture-utils';\nimport {assert} from '../utils/assert';\n\n// NOTE: Slow requires roundtrip to GPU\n// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.\n// App can provide targetPixelArray or have it auto allocated by this method\n// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n//  newly allocated by this method unless provided by app.\nexport function readPixelsToArray(source, options = {}) {\n  const {sourceX = 0, sourceY = 0, sourceFormat = GL.RGBA} = options;\n  let {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = options;\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle, attachments} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // TODO - Set and unset gl.readBuffer\n  if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  assert(attachments[sourceAttachment]);\n\n  // Deduce the type from color attachment if not provided.\n  sourceType = sourceType || attachments[sourceAttachment].type;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n\n  // Pixel array available, if necessary, deduce type from it.\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  // @ts-ignore\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\n\n// NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n// Copies data from a Framebuffer or a Texture object into a Buffer object.\nexport function readPixelsToBuffer(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    target = null, // A new Buffer object is created when not provided.\n    targetByteOffset = 0, // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  }\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  const gl2 = assertWebGL2Context(framebuffer.gl);\n\n  // deduce type if not available.\n  sourceType = sourceType || (target ? target.type : GL.UNSIGNED_BYTE);\n\n  if (!target) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl2, {byteLength, accessor: {type: sourceType, size: components}});\n  }\n\n  target.bind({target: GL.PIXEL_PACK_BUFFER});\n  withParameters(gl2, {framebuffer}, () => {\n    gl2.readPixels(\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      targetByteOffset\n    );\n  });\n  target.unbind({target: GL.PIXEL_PACK_BUFFER});\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\n\n// Reads pixels from a Framebuffer or Texture object to a dataUrl\nexport function copyToDataUrl(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = {}\n) {\n  let data = readPixelsToArray(source, {sourceAttachment});\n\n  // Scale down\n  let {width, height} = source;\n  while (height > targetMaxHeight) {\n    ({data, width, height} = scalePixels({data, width, height}));\n  }\n\n  // Flip to top down coordinate system\n  flipRows({data, width, height});\n\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n\n  // Copy the pixels to a 2D canvas\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\n// Reads pixels from a Framebuffer or Texture object into an HTML Image\nexport function copyToImage(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetImage = null\n  } = {}\n) {\n  const dataUrl = copyToDataUrl(source, {sourceAttachment});\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\n\n// Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(source, target, options = {}) {\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA\n  } = options;\n  let {\n    targetX,\n    targetY,\n    targetZ,\n    width, // defaults to target width\n    height // defaults to target height\n  } = options;\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle} = framebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(\n      target,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (target) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        gl.copyTexSubImage2D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.copyTexSubImage3D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  // @ts-ignore\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\n\n// NOTE: WEBLG2 only\n// Copies a rectangle of pixels between Framebuffer or Texture objects\n// eslint-disable-next-line max-statements, complexity\nexport function blit(source, target, options = {}) {\n  const {\n    sourceX0 = 0,\n    sourceY0 = 0,\n    targetX0 = 0,\n    targetY0 = 0,\n    color = true,\n    depth = false,\n    stencil = false,\n    filter = GL.NEAREST\n  } = options;\n\n  let {\n    sourceX1,\n    sourceY1,\n    targetX1,\n    targetY1,\n    sourceAttachment = GL.COLOR_ATTACHMENT0,\n    mask = 0\n  } = options;\n\n  const {framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer} = getFramebuffer(\n    source\n  );\n  const {framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer} = getFramebuffer(\n    target\n  );\n\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  // @ts-ignore\n  const {gl, handle, width, height, readBuffer} = dstFramebuffer;\n  const gl2 = assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === GL.COLOR_ATTACHMENT0) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  if (color) {\n    mask |= GL.COLOR_BUFFER_BIT;\n  }\n  if (depth) {\n    mask |= GL.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    mask |= GL.STENCIL_BUFFER_BIT;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.\n    // Overwrite the mask to `COLOR_BUFFER_BIT`\n    if (mask & (GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT)) {\n      mask = GL.COLOR_BUFFER_BIT;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n\n  const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, handle);\n  const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n  gl2.readBuffer(sourceAttachment);\n  gl2.blitFramebuffer(\n    sourceX0,\n    sourceY0,\n    sourceX1,\n    sourceY1,\n    targetX0,\n    targetY0,\n    targetX1,\n    targetY1,\n    mask,\n    filter\n  );\n  gl2.readBuffer(readBuffer);\n  // @ts-ignore\n  gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n  // @ts-ignore\n  gl2.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\n// Helper methods\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source, deleteFramebuffer: false};\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // Allocate pixel array if not already available, using supplied type\n  type = type || GL.UNSIGNED_BYTE;\n  const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n  const components = glFormatToComponents(format);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}