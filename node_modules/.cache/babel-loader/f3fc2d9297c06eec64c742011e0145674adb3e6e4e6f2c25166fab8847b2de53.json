{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\nfunction nop() {}\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class HexagonLayer extends AggregationLayer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      }\n    });\n  }\n  updateState(opts) {\n    super.updateState(opts);\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        const {\n          hexagonVertices\n        } = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n      this.setState({\n        aggregatorState\n      });\n    }\n  }\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {\n      viewport\n    } = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n      const {\n        metersPerUnit\n      } = viewport.getDistanceScales(centroid);\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n        return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n      });\n      return vertices;\n    }\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      aggregatorState,\n      vertices\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n    const geometry = vertices ? {\n      vertices,\n      radius: 1\n    } : {\n      radius: aggregatorState.layerData.radiusCommon || 1,\n      radiusUnits: 'common',\n      angle: 90\n    };\n    return new SubLayerClass({\n      ...geometry,\n      diskResolution: 6,\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'hexagon-cell',\n      updateTriggers\n    }), {\n      data: aggregatorState.layerData.data\n    });\n  }\n}\n_defineProperty(HexagonLayer, \"layerName\", 'HexagonLayer');\n_defineProperty(HexagonLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["_defineProperty","log","ColumnLayer","defaultColorRange","pointToHexbin","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","material","_filterData","optional","HexagonLayer","constructor","arguments","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","vertices","attributeManager","getAttributeManager","add","positions","size","accessor","updateState","opts","changeFlags","propsOrDataChanged","viewport","context","attributes","getAttributes","layerData","hexagonVertices","setState","convertLatLngToMeterOffset","Array","isArray","length","vertex0","vertex3","centroid","centroidFlat","projectFlat","metersPerUnit","getDistanceScales","map","vt","vtFlat","error","getPickingInfo","_ref","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","geometry","radiusCommon","radiusUnits","angle","diskResolution","getFillColor","bind","getElevation","getSubLayerProps","id","data"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/aggregation-layers/dist/esm/hexagon-layer/hexagon-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class HexagonLayer extends AggregationLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        const {\n          hexagonVertices\n        } = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {\n      viewport\n    } = this.context;\n\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n      const {\n        metersPerUnit\n      } = viewport.getDistanceScales(centroid);\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n        return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n      });\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({\n    info\n  }) {\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      aggregatorState,\n      vertices\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices ? {\n      vertices,\n      radius: 1\n    } : {\n      radius: aggregatorState.layerData.radiusCommon || 1,\n      radiusUnits: 'common',\n      angle: 90\n    };\n    return new SubLayerClass({ ...geometry,\n      diskResolution: 6,\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'hexagon-cell',\n      updateTriggers\n    }), {\n      data: aggregatorState.layerData.data\n    });\n  }\n\n}\n\n_defineProperty(HexagonLayer, \"layerName\", 'HexagonLayer');\n\n_defineProperty(HexagonLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=hexagon-layer.js.map"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,gBAAgB,MAAM,sBAAsB;AAEnD,SAASC,GAAGA,CAAA,EAAG,CAAC;AAEhB,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,IAAI;EACjBC,UAAU,EAAEP,iBAAiB;EAC7BQ,aAAa,EAAE;IACbC,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE;EACT,CAAC;EACDC,cAAc,EAAE;IACdF,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE;EACT,CAAC;EACDE,gBAAgB,EAAE,KAAK;EACvBC,eAAe,EAAE;IACfJ,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,CAAC;IACRI,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE;EACP,CAAC;EACDC,eAAe,EAAE;IACfP,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,GAAG;IACVI,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE;EACP,CAAC;EACDE,cAAc,EAAE,UAAU;EAC1BC,gBAAgB,EAAEd,GAAG;EACrBe,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;EACzBC,iBAAiB,EAAE;IACjBZ,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE;EACT,CAAC;EACDY,kBAAkB,EAAE;IAClBb,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE;EACT,CAAC;EACDa,oBAAoB,EAAE,KAAK;EAC3BC,wBAAwB,EAAE;IACxBf,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,CAAC;IACRI,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE;EACP,CAAC;EACDU,wBAAwB,EAAE;IACxBhB,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,GAAG;IACVI,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE;EACP,CAAC;EACDW,cAAc,EAAE;IACdjB,IAAI,EAAE,QAAQ;IACdK,GAAG,EAAE,CAAC;IACNJ,KAAK,EAAE;EACT,CAAC;EACDiB,kBAAkB,EAAE,QAAQ;EAC5BC,oBAAoB,EAAExB,GAAG;EACzByB,MAAM,EAAE;IACNpB,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,IAAI;IACXI,GAAG,EAAE;EACP,CAAC;EACDgB,QAAQ,EAAE;IACRrB,IAAI,EAAE,QAAQ;IACdK,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACNL,KAAK,EAAE;EACT,CAAC;EACDqB,QAAQ,EAAE,KAAK;EACfC,iBAAiB,EAAE/B,aAAa;EAChCgC,WAAW,EAAE;IACXxB,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAEwB,CAAC,IAAIA,CAAC,CAACC;EAChB,CAAC;EACDC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE;IACX5B,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE,IAAI;IACX4B,QAAQ,EAAE;EACZ;AACF,CAAC;AACD,eAAe,MAAMC,YAAY,SAASpC,gBAAgB,CAAC;EACzDqC,WAAWA,CAAA,EAAU;IACnB,KAAK,CAAC,GAAAC,SAAO,CAAC;IAEd5C,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;EACxC;EAEA6C,eAAeA,CAAA,EAAG;IAChB,MAAMC,aAAa,GAAG,IAAIzC,aAAa,CAAC;MACtC0C,aAAa,EAAEC,KAAK,IAAIA,KAAK,CAACb,iBAAiB;MAC/Cc,WAAW,EAAED,KAAK,IAAIA,KAAK,CAAChB;IAC9B,CAAC,CAAC;IACF,IAAI,CAACkB,KAAK,GAAG;MACXJ,aAAa;MACbK,eAAe,EAAEL,aAAa,CAACI,KAAK;MACpCE,QAAQ,EAAE;IACZ,CAAC;IACD,MAAMC,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,EAAE;IACnDD,gBAAgB,CAACE,GAAG,CAAC;MACnBC,SAAS,EAAE;QACTC,IAAI,EAAE,CAAC;QACP7C,IAAI,EAAE,IAAI;QACV8C,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;EACJ;EAEAC,WAAWA,CAACC,IAAI,EAAE;IAChB,KAAK,CAACD,WAAW,CAACC,IAAI,CAAC;IAEvB,IAAIA,IAAI,CAACC,WAAW,CAACC,kBAAkB,EAAE;MACvC,MAAMX,eAAe,GAAG,IAAI,CAACD,KAAK,CAACJ,aAAa,CAACa,WAAW,CAACC,IAAI,EAAE;QACjEG,QAAQ,EAAE,IAAI,CAACC,OAAO,CAACD,QAAQ;QAC/BE,UAAU,EAAE,IAAI,CAACC,aAAa;MAChC,CAAC,CAAC;MAEF,IAAI,IAAI,CAAChB,KAAK,CAACC,eAAe,CAACgB,SAAS,KAAKhB,eAAe,CAACgB,SAAS,EAAE;QACtE,MAAM;UACJC;QACF,CAAC,GAAGjB,eAAe,CAACgB,SAAS,IAAI,CAAC,CAAC;QACnC,IAAI,CAACE,QAAQ,CAAC;UACZjB,QAAQ,EAAEgB,eAAe,IAAI,IAAI,CAACE,0BAA0B,CAACF,eAAe;QAC9E,CAAC,CAAC;MACJ;MAEA,IAAI,CAACC,QAAQ,CAAC;QACZlB;MACF,CAAC,CAAC;IACJ;EACF;EAEAmB,0BAA0BA,CAACF,eAAe,EAAE;IAC1C,MAAM;MACJL;IACF,CAAC,GAAG,IAAI,CAACC,OAAO;IAEhB,IAAIO,KAAK,CAACC,OAAO,CAACJ,eAAe,CAAC,IAAIA,eAAe,CAACK,MAAM,KAAK,CAAC,EAAE;MAClE,MAAMC,OAAO,GAAGN,eAAe,CAAC,CAAC,CAAC;MAClC,MAAMO,OAAO,GAAGP,eAAe,CAAC,CAAC,CAAC;MAClC,MAAMQ,QAAQ,GAAG,CAAC,CAACF,OAAO,CAAC,CAAC,CAAC,GAAGC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAACD,OAAO,CAAC,CAAC,CAAC,GAAGC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MAC/E,MAAME,YAAY,GAAGd,QAAQ,CAACe,WAAW,CAACF,QAAQ,CAAC;MACnD,MAAM;QACJG;MACF,CAAC,GAAGhB,QAAQ,CAACiB,iBAAiB,CAACJ,QAAQ,CAAC;MACxC,MAAMxB,QAAQ,GAAGgB,eAAe,CAACa,GAAG,CAACC,EAAE,IAAI;QACzC,MAAMC,MAAM,GAAGpB,QAAQ,CAACe,WAAW,CAACI,EAAE,CAAC;QACvC,OAAO,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,GAAGN,YAAY,CAAC,CAAC,CAAC,IAAIE,aAAa,CAAC,CAAC,CAAC,EAAE,CAACI,MAAM,CAAC,CAAC,CAAC,GAAGN,YAAY,CAAC,CAAC,CAAC,IAAIE,aAAa,CAAC,CAAC,CAAC,CAAC;MAC7G,CAAC,CAAC;MACF,OAAO3B,QAAQ;IACjB;IAEAnD,GAAG,CAACmF,KAAK,CAAC,gEAAgE,CAAC,EAAE;IAC7E,OAAO,IAAI;EACb;EAEAC,cAAcA,CAAAC,IAAA,EAEX;IAAA,IAFY;MACbC;IACF,CAAC,GAAAD,IAAA;IACC,OAAO,IAAI,CAACpC,KAAK,CAACJ,aAAa,CAACuC,cAAc,CAAC;MAC7CE;IACF,CAAC,CAAC;EACJ;EAEAC,mBAAmBA,CAACC,IAAI,EAAE;IACxB,OAAO,IAAI,CAACvC,KAAK,CAACJ,aAAa,CAAC4C,WAAW,CAAC,WAAW,CAAC,CAACD,IAAI,CAAC;EAChE;EAEAE,uBAAuBA,CAACF,IAAI,EAAE;IAC5B,OAAO,IAAI,CAACvC,KAAK,CAACJ,aAAa,CAAC4C,WAAW,CAAC,WAAW,CAAC,CAACD,IAAI,CAAC;EAChE;EAEAG,0BAA0BA,CAAA,EAAG;IAC3B,OAAO,IAAI,CAAC1C,KAAK,CAACJ,aAAa,CAAC+C,iBAAiB,CAAC,IAAI,CAAC7C,KAAK,CAAC;EAC/D;EAEA8C,YAAYA,CAAA,EAAG;IACb,MAAM;MACJjE,cAAc;MACdK,QAAQ;MACRD,QAAQ;MACRM,QAAQ;MACRwD;IACF,CAAC,GAAG,IAAI,CAAC/C,KAAK;IACd,MAAM;MACJG,eAAe;MACfC;IACF,CAAC,GAAG,IAAI,CAACF,KAAK;IACd,MAAM8C,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAAC,cAAc,EAAE/F,WAAW,CAAC;IAExE,MAAMgG,cAAc,GAAG,IAAI,CAACN,0BAA0B,EAAE;IAExD,MAAMO,QAAQ,GAAG/C,QAAQ,GAAG;MAC1BA,QAAQ;MACRpB,MAAM,EAAE;IACV,CAAC,GAAG;MACFA,MAAM,EAAEmB,eAAe,CAACgB,SAAS,CAACiC,YAAY,IAAI,CAAC;MACnDC,WAAW,EAAE,QAAQ;MACrBC,KAAK,EAAE;IACT,CAAC;IACD,OAAO,IAAIN,aAAa,CAAC;MAAE,GAAGG,QAAQ;MACpCI,cAAc,EAAE,CAAC;MACjB1E,cAAc;MACdK,QAAQ;MACRD,QAAQ;MACRM,QAAQ;MACRiE,YAAY,EAAE,IAAI,CAAChB,mBAAmB,CAACiB,IAAI,CAAC,IAAI,CAAC;MACjDC,YAAY,EAAE,IAAI,CAACf,uBAAuB,CAACc,IAAI,CAAC,IAAI,CAAC;MACrDV,WAAW,EAAEA,WAAW,IAAI;QAC1BS,YAAY,EAAET,WAAW,CAACpF,aAAa,IAAIoF,WAAW,CAACjF,cAAc;QACrE4F,YAAY,EAAEX,WAAW,CAACvE,iBAAiB,IAAIuE,WAAW,CAACtE;MAC7D;IACF,CAAC,EAAE,IAAI,CAACkF,gBAAgB,CAAC;MACvBC,EAAE,EAAE,cAAc;MAClBV;IACF,CAAC,CAAC,EAAE;MACFW,IAAI,EAAE1D,eAAe,CAACgB,SAAS,CAAC0C;IAClC,CAAC,CAAC;EACJ;AAEF;AAEA7G,eAAe,CAAC0C,YAAY,EAAE,WAAW,EAAE,cAAc,CAAC;AAE1D1C,eAAe,CAAC0C,YAAY,EAAE,cAAc,EAAElC,YAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}