{"ast":null,"code":"export function binaryToFeatureForAccesor(data, index) {\n  if (!data) {\n    return null;\n  }\n  const featureIndex = 'startIndices' in data ? data.startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n  return null;\n}\nfunction getPropertiesForIndex(data, propertiesIndex, numericPropsIndex) {\n  const feature = {\n    properties: {\n      ...data.properties[propertiesIndex]\n    }\n  };\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n  return feature;\n}\nexport function calculatePickingColors(geojsonBinary, encodePickingColor) {\n  const pickingColors = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key][i * 3 + 0] = pickingColor[0];\n      pickingColors[key][i * 3 + 1] = pickingColor[1];\n      pickingColors[key][i * 3 + 2] = pickingColor[2];\n    }\n  }\n  return pickingColors;\n}","map":{"version":3,"names":["binaryToFeatureForAccesor","data","index","featureIndex","startIndices","geometryIndex","featureIds","value","getPropertiesForIndex","propertiesIndex","numericPropsIndex","feature","properties","prop","numericProps","calculatePickingColors","geojsonBinary","encodePickingColor","pickingColors","points","lines","polygons","key","globalFeatureIds","Uint8ClampedArray","length","pickingColor","i"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/src/geojson-layer/geojson-binary.ts"],"sourcesContent":["// This module implement some utility functions to work with\n// the geojson-binary format defined at loaders.gl:\n// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n\nimport {\n  BinaryFeatures,\n  BinaryLineFeatures,\n  BinaryPointFeatures,\n  BinaryPolygonFeatures,\n  Feature\n} from '@loaders.gl/schema';\n\nexport type BinaryFeatureTypes = BinaryPointFeatures | BinaryLineFeatures | BinaryPolygonFeatures;\n\ntype FeaureOnlyProperties = Pick<Feature, 'properties'>;\n\n/**\n * Return the feature for an accesor\n */\nexport function binaryToFeatureForAccesor(\n  data: BinaryFeatureTypes,\n  index: number\n): FeaureOnlyProperties | null {\n  if (!data) {\n    return null;\n  }\n\n  const featureIndex = 'startIndices' in data ? (data as any).startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n\n  return null;\n}\n\nfunction getPropertiesForIndex(\n  data: BinaryFeatureTypes,\n  propertiesIndex: number,\n  numericPropsIndex: number\n): FeaureOnlyProperties {\n  const feature = {\n    properties: {...data.properties[propertiesIndex]}\n  };\n\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n\n  return feature;\n}\n\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(\n  geojsonBinary: BinaryFeatures,\n  encodePickingColor: (id: number, result: number[]) => void\n): Record<string, Uint8ClampedArray | null> {\n  const pickingColors: Record<string, Uint8ClampedArray | null> = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key]![i * 3 + 0] = pickingColor[0];\n      pickingColors[key]![i * 3 + 1] = pickingColor[1];\n      pickingColors[key]![i * 3 + 2] = pickingColor[2];\n    }\n  }\n\n  return pickingColors;\n}\n"],"mappings":"AAmBA,OAAO,SAASA,yBAATA,CACLC,IADK,EAELC,KAFK,EAGwB;EAC7B,IAAI,CAACD,IAAL,EAAW;IACT,OAAO,IAAP;EACD;EAED,MAAME,YAAY,GAAG,kBAAkBF,IAAlB,GAA0BA,IAAD,CAAcG,YAAd,CAA2BF,KAA3B,CAAzB,GAA6DA,KAAlF;EACA,MAAMG,aAAa,GAAGJ,IAAI,CAACK,UAAL,CAAgBC,KAAhB,CAAsBJ,YAAtB,CAAtB;EAEA,IAAIA,YAAY,KAAK,CAAC,CAAtB,EAAyB;IACvB,OAAOK,qBAAqB,CAACP,IAAD,EAAOI,aAAP,EAAsBF,YAAtB,CAA5B;EACD;EAED,OAAO,IAAP;AACD;AAED,SAASK,qBAATA,CACEP,IADF,EAEEQ,eAFF,EAGEC,iBAHF,EAIwB;EACtB,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAE;MAAC,GAAGX,IAAI,CAACW,UAAL,CAAgBH,eAAhB;IAAJ;EADE,CAAhB;EAIA,KAAK,MAAMI,IAAX,IAAmBZ,IAAI,CAACa,YAAxB,EAAsC;IACpCH,OAAO,CAACC,UAAR,CAAmBC,IAAnB,IAA2BZ,IAAI,CAACa,YAAL,CAAkBD,IAAlB,EAAwBN,KAAxB,CAA8BG,iBAA9B,CAA3B;EACD;EAED,OAAOC,OAAP;AACD;AAGD,OAAO,SAASI,sBAATA,CACLC,aADK,EAELC,kBAFK,EAGqC;EAC1C,MAAMC,aAAuD,GAAG;IAC9DC,MAAM,EAAE,IADsD;IAE9DC,KAAK,EAAE,IAFuD;IAG9DC,QAAQ,EAAE;EAHoD,CAAhE;EAKA,KAAK,MAAMC,GAAX,IAAkBJ,aAAlB,EAAiC;IAC/B,MAAMZ,UAAU,GAAGU,aAAa,CAACM,GAAD,CAAb,CAAmBC,gBAAnB,CAAoChB,KAAvD;IACAW,aAAa,CAACI,GAAD,CAAb,GAAqB,IAAIE,iBAAJ,CAAsBlB,UAAU,CAACmB,MAAX,GAAoB,CAA1C,CAArB;IACA,MAAMC,YAAY,GAAG,EAArB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,UAAU,CAACmB,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;MAC1CV,kBAAkB,CAACX,UAAU,CAACqB,CAAD,CAAX,EAAgBD,YAAhB,CAAlB;MACAR,aAAa,CAACI,GAAD,CAAb,CAAoBK,CAAC,GAAG,CAAJ,GAAQ,CAA5B,IAAiCD,YAAY,CAAC,CAAD,CAA7C;MACAR,aAAa,CAACI,GAAD,CAAb,CAAoBK,CAAC,GAAG,CAAJ,GAAQ,CAA5B,IAAiCD,YAAY,CAAC,CAAD,CAA7C;MACAR,aAAa,CAACI,GAAD,CAAb,CAAoBK,CAAC,GAAG,CAAJ,GAAQ,CAA5B,IAAiCD,YAAY,CAAC,CAAD,CAA7C;IACD;EACF;EAED,OAAOR,aAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}