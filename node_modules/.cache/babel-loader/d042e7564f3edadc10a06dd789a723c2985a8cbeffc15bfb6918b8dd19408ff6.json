{"ast":null,"code":"import { getWebGL2Context, assertWebGL2Context, log } from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport { clear, clearBuffer } from './clear';\nimport { copyToDataUrl } from './copy-and-blit.js';\nimport { getFeatures } from '../features';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { assert } from '../utils/assert';\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\nexport default class Framebuffer extends Resource {\n  get [Symbol.toStringTag]() {\n    return 'Framebuffer';\n  }\n  static isSupported(gl) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      colorBufferFloat,\n      colorBufferHalfFloat\n    } = options;\n    let supported = true;\n    if (colorBufferFloat) {\n      supported = Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('WEBGL_color_buffer_float') || gl.getExtension('OES_texture_float'));\n    }\n    if (colorBufferHalfFloat) {\n      supported = supported && Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('EXT_color_buffer_half_float'));\n    }\n    return supported;\n  }\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n      id: 'default-framebuffer',\n      handle: null,\n      attachments: {}\n    });\n    return gl.luma.defaultFramebuffer;\n  }\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, opts);\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = 36064;\n    this.drawBuffers = [36064];\n    this.ownResources = [];\n    this.initialize(opts);\n    Object.seal(this);\n  }\n  get color() {\n    return this.attachments[36064] || null;\n  }\n  get texture() {\n    return this.attachments[36064] || null;\n  }\n  get depth() {\n    return this.attachments[36096] || this.attachments[33306] || null;\n  }\n  get stencil() {\n    return this.attachments[36128] || this.attachments[33306] || null;\n  }\n  initialize(_ref) {\n    let {\n      width = 1,\n      height = 1,\n      attachments = null,\n      color = true,\n      depth = true,\n      stencil = false,\n      check = true,\n      readBuffer = undefined,\n      drawBuffers = undefined\n    } = _ref;\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n    this.width = width;\n    this.height = height;\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({\n          width,\n          height\n        });\n      }\n    } else {\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n    this.update({\n      clearAttachments: true,\n      attachments,\n      readBuffer,\n      drawBuffers\n    });\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n    return this;\n  }\n  update(_ref2) {\n    let {\n      attachments = {},\n      readBuffer,\n      drawBuffers,\n      clearAttachments = false,\n      resizeAttachments = true\n    } = _ref2;\n    this.attach(attachments, {\n      clearAttachments,\n      resizeAttachments\n    });\n    const {\n      gl\n    } = this;\n    const prevHandle = gl.bindFramebuffer(36160, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(36160, prevHandle || null);\n    return this;\n  }\n  resize() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let {\n      width,\n      height\n    } = options;\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n    if (width !== this.width && height !== this.height) {\n      log.log(2, \"Resizing framebuffer \".concat(this.id, \" to \").concat(width, \"x\").concat(height))();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({\n        width,\n        height\n      });\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n  attach(attachments) {\n    let {\n      clearAttachments = false,\n      resizeAttachments = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const newAttachments = {};\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n    Object.assign(newAttachments, attachments);\n    const prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n    for (const key in newAttachments) {\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n      const attachment = Number(key);\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({\n          attachment,\n          renderbuffer: object\n        });\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({\n          attachment,\n          texture,\n          layer,\n          level\n        });\n      } else {\n        this._attachTexture({\n          attachment,\n          texture: object,\n          layer: 0,\n          level: 0\n        });\n      }\n      if (resizeAttachments && object) {\n        object.resize({\n          width: this.width,\n          height: this.height\n        });\n      }\n    }\n    this.gl.bindFramebuffer(36160, prevHandle || null);\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n  checkStatus() {\n    const {\n      gl\n    } = this;\n    const status = this.getStatus();\n    if (status !== 36053) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n  getStatus() {\n    const {\n      gl\n    } = this;\n    const prevHandle = gl.bindFramebuffer(36160, this.handle);\n    const status = gl.checkFramebufferStatus(36160);\n    gl.bindFramebuffer(36160, prevHandle || null);\n    return status;\n  }\n  clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      color,\n      depth,\n      stencil,\n      drawBuffers = []\n    } = options;\n    const prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n    if (color || depth || stencil) {\n      clear(this.gl, {\n        color,\n        depth,\n        stencil\n      });\n    }\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer(this.gl, {\n        drawBuffer,\n        value\n      });\n    });\n    this.gl.bindFramebuffer(36160, prevHandle || null);\n    return this;\n  }\n  readPixels() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    log.error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();\n    return null;\n  }\n  readPixelsToBuffer() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    log.error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();\n    return null;\n  }\n  copyToDataUrl() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    log.error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();\n    return null;\n  }\n  copyToImage() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n  copyToTexture() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    log.error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n    return null;\n  }\n  blit() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n  invalidate(_ref3) {\n    let {\n      attachments = [],\n      x = 0,\n      y = 0,\n      width,\n      height\n    } = _ref3;\n    const gl2 = assertWebGL2Context(this.gl);\n    const prevHandle = gl2.bindFramebuffer(36008, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(36008, attachments);\n    } else {\n      gl2.invalidateFramebuffer(36008, attachments, x, y, width, height);\n    }\n    gl2.bindFramebuffer(36008, prevHandle);\n    return this;\n  }\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(36160, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);\n      this.gl.bindFramebuffer(36160, null);\n    }\n    if (keys && value > 1000) {\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n  getAttachmentParameters() {\n    let attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;\n    let keys = arguments.length > 1 ? arguments[1] : undefined;\n    let parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n  getParameters() {\n    let keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const attachments = Object.keys(this.attachments);\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n  log() {\n    let logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || \"Framebuffer \".concat(this.id);\n    const image = copyToDataUrl(this, {\n      targetMaxHeight: 100\n    });\n    log.image({\n      logLevel,\n      message,\n      image\n    }, message)();\n    return this;\n  }\n  bind() {\n    let {\n      target = 36160\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n  unbind() {\n    let {\n      target = 36160\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[36064] = new Texture2D(this.gl, {\n        id: \"\".concat(this.id, \"-color0\"),\n        pixels: null,\n        format: 6408,\n        type: 5121,\n        width,\n        height,\n        mipmaps: false,\n        parameters: {\n          [10241]: 9729,\n          [10240]: 9729,\n          [10242]: 33071,\n          [10243]: 33071\n        }\n      });\n      this.ownResources.push(defaultAttachments[36064]);\n    }\n    if (depth && stencil) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[33306] = new Renderbuffer(this.gl, {\n        id: \"\".concat(this.id, \"-depth-stencil\"),\n        format: 35056,\n        width,\n        height: 111\n      });\n      this.ownResources.push(defaultAttachments[33306]);\n    } else if (depth) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[36096] = new Renderbuffer(this.gl, {\n        id: \"\".concat(this.id, \"-depth\"),\n        format: 33189,\n        width,\n        height\n      });\n      this.ownResources.push(defaultAttachments[36096]);\n    } else if (stencil) {\n      assert(false);\n    }\n    return defaultAttachments;\n  }\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);\n    } else {\n      this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n  _attachRenderbuffer(_ref4) {\n    let {\n      attachment = 36064,\n      renderbuffer\n    } = _ref4;\n    const {\n      gl\n    } = this;\n    gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle);\n    this.attachments[attachment] = renderbuffer;\n  }\n  _attachTexture(_ref5) {\n    let {\n      attachment = 36064,\n      texture,\n      layer,\n      level\n    } = _ref5;\n    const {\n      gl\n    } = this;\n    gl.bindTexture(texture.target, texture.handle);\n    switch (texture.target) {\n      case 35866:\n      case 32879:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.framebufferTextureLayer(36160, attachment, texture.target, level, layer);\n        break;\n      case 34067:\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n        break;\n      case 3553:\n        gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n        break;\n      default:\n        assert(false, 'Illegal texture type');\n    }\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n  _setReadBuffer(readBuffer) {\n    const gl2 = getWebGL2Context(this.gl);\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      assert(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);\n    }\n    this.readBuffer = readBuffer;\n  }\n  _setDrawBuffers(drawBuffers) {\n    const {\n      gl\n    } = this;\n    const gl2 = assertWebGL2Context(gl);\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        assert(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n    switch (pname) {\n      case 36052:\n        return !caps.WEBGL2 ? 0 : null;\n      case 33298:\n      case 33299:\n      case 33300:\n      case 33301:\n      case 33302:\n      case 33303:\n        return !caps.WEBGL2 ? 8 : null;\n      case 33297:\n        return !caps.WEBGL2 ? 5125 : null;\n      case 33296:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? 9729 : null;\n      default:\n        return null;\n    }\n  }\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(36160, handle);\n  }\n}\nfunction mapIndexToCubeMapFace(layer) {\n  return layer < 34069 ? layer + 34069 : layer;\n}\nfunction _getFrameBufferStatus(status) {\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || \"Framebuffer error \".concat(status);\n}\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, 36048, 33296, 33298, 33299, 33300, 33301, 33302, 33303];\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;","map":{"version":3,"names":["getWebGL2Context","assertWebGL2Context","log","Resource","Texture2D","Renderbuffer","clear","clearBuffer","copyToDataUrl","getFeatures","getKey","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","Symbol","toStringTag","isSupported","gl","options","arguments","length","undefined","colorBufferFloat","colorBufferHalfFloat","supported","Boolean","getExtension","getDefaultFramebuffer","luma","defaultFramebuffer","id","handle","attachments","MAX_COLOR_ATTACHMENTS","gl2","getParameter","MAX_DRAW_BUFFERS","constructor","opts","width","height","readBuffer","drawBuffers","ownResources","initialize","Object","seal","color","texture","depth","stencil","_ref","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","delete","resource","_ref2","resizeAttachments","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","drawingBufferWidth","drawingBufferHeight","concat","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","layer","level","_attachTexture","filter","status","getStatus","Error","_getFrameBufferStatus","checkFramebufferStatus","value","drawBuffer","readPixels","error","readPixelsToBuffer","copyToImage","copyToTexture","blit","invalidate","_ref3","x","y","invalidateAll","invalidateFramebuffer","getAttachmentParameter","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","parameters","ATTACHMENT_PARAMETERS","values","getParameters","attachmentName","show","window","open","logLevel","message","image","targetMaxHeight","bind","unbind","defaultAttachments","pixels","format","type","mipmaps","push","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","_ref4","_ref5","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","ext","drawBuffersWEBGL","caps","WEBGL2","EXT_sRGB","_createHandle","createFramebuffer","_deleteHandle","deleteFramebuffer","_bindHandle","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/webgl/src/classes/framebuffer.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getWebGL2Context, assertWebGL2Context, log} from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Framebuffer';\n  }\n  static isSupported(gl, options = {}) {\n    const {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = options;\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer = undefined,\n    drawBuffers = undefined\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n    return this;\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize(options = {}) {\n    let {width, height} = options;\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const status = this.getStatus();\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  getStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return status;\n  }\n\n  clear(options = {}) {\n    const {color, depth, stencil, drawBuffers = []} = options;\n\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer(this.gl, {drawBuffer, value});\n    });\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const gl2 = assertWebGL2Context(this.gl);\n    const prevHandle = gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      // TODO - why does type checking fail on this line\n      // @ts-ignore\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    // @ts-ignore\n    gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      // @ts-ignore\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    // @ts-ignore\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(logLevel = 0, message = '') {\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {targetMaxHeight: 100});\n    // @ts-expect-error\n    log.image({logLevel, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const gl2 = getWebGL2Context(this.gl);\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    const gl2 = assertWebGL2Context(gl);\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      // TODO - is this not handled by polyfills?\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.WEBGL2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.WEBGL2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.WEBGL2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  // @ts-ignore\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"mappings":"AACA,SAAQA,gBAAR,EAA0BC,mBAA1B,EAA+CC,GAA/C,QAAyD,kBAAzD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,KAAR,EAAeC,WAAf,QAAiC,SAAjC;AACA,SAAQC,aAAR,QAA4B,oBAA5B;AAEA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,MAAR,QAAqB,kCAArB;AACA,SAAQC,MAAR,QAAqB,iBAArB;AAEA,MAAMC,0BAA0B,GAAG,uCAAnC;AAEA,eAAe,MAAMC,WAAN,SAA0BV,QAA1B,CAAmC;EAEzB,KAAlBW,MAAM,CAACC,WAAW,IAAI;IACzB,OAAO,aAAP;EACD;EACiB,OAAXC,WAAWA,CAACC,EAAD,EAAmB;IAAA,IAAdC,OAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACnC,MAAM;MACJG,gBADI;MAEJC;IAFI,IAGFL,OAHJ;IAIA,IAAIM,SAAS,GAAG,IAAhB;IAEA,IAAIF,gBAAJ,EAAsB;MACpBE,SAAS,GAAGC,OAAO,CAEjBR,EAAE,CAACS,YAAH,CAAgB,wBAAhB,KAEET,EAAE,CAACS,YAAH,CAAgB,0BAAhB,CAFF,IAIET,EAAE,CAACS,YAAH,CAAgB,mBAAhB,CANe,CAAnB;IAQD;IAED,IAAIH,oBAAJ,EAA0B;MACxBC,SAAS,GACPA,SAAS,IACTC,OAAO,CAELR,EAAE,CAACS,YAAH,CAAgB,wBAAhB,KAEET,EAAE,CAACS,YAAH,CAAgB,6BAAhB,CAJG,CAFT;IAQD;IAED,OAAOF,SAAP;EACD;EAG2B,OAArBG,qBAAqBA,CAACV,EAAD,EAAK;IAC/BA,EAAE,CAACW,IAAH,GAAUX,EAAE,CAACW,IAAH,IAAW,EAArB;IACAX,EAAE,CAACW,IAAH,CAAQC,kBAAR,GACEZ,EAAE,CAACW,IAAH,CAAQC,kBAAR,IACA,IAAIhB,WAAJ,CAAgBI,EAAhB,EAAoB;MAClBa,EAAE,EAAE,qBADc;MAElBC,MAAM,EAAE,IAFU;MAGlBC,WAAW,EAAE;IAHK,CAApB,CAFF;IAQA,OAAOf,EAAE,CAACW,IAAH,CAAQC,kBAAf;EACD;EAEwB,IAArBI,qBAAqBA,CAAA,EAAG;IAC1B,MAAMC,GAAG,GAAGjC,mBAAmB,CAAC,KAAKgB,EAAN,CAA/B;IACA,OAAOiB,GAAG,CAACC,YAAJ,CAAiBD,GAAG,CAACD,qBAArB,CAAP;EACD;EAEmB,IAAhBG,gBAAgBA,CAAA,EAAG;IACrB,MAAMF,GAAG,GAAGjC,mBAAmB,CAAC,KAAKgB,EAAN,CAA/B;IACA,OAAOiB,GAAG,CAACC,YAAJ,CAAiBD,GAAG,CAACE,gBAArB,CAAP;EACD;EAEDC,WAAWA,CAACpB,EAAD,EAAgB;IAAA,IAAXqB,IAAW,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACzB,MAAMF,EAAN,EAAUqB,IAAV;IAGA,KAAKC,KAAL,GAAa,IAAb;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKR,WAAL,GAAmB,EAAnB;IACA,KAAKS,UAAL;IACA,KAAKC,WAAL,GAAmB,OAAnB;IACA,KAAKC,YAAL,GAAoB,EAApB;IACA,KAAKC,UAAL,CAAgBN,IAAhB;IAEAO,MAAM,CAACC,IAAP,CAAY,IAAZ;EACD;EAEQ,IAALC,KAAKA,CAAA,EAAG;IACV,OAAO,KAAKf,WAAL,WAA0C,IAAjD;EACD;EAEU,IAAPgB,OAAOA,CAAA,EAAG;IACZ,OAAO,KAAKhB,WAAL,WAA0C,IAAjD;EACD;EAEQ,IAALiB,KAAKA,CAAA,EAAG;IACV,OACE,KAAKjB,WAAL,WAAyC,KAAKA,WAAL,OAAzC,IAA0F,IAD5F;EAGD;EAEU,IAAPkB,OAAOA,CAAA,EAAG;IACZ,OACE,KAAKlB,WAAL,WACA,KAAKA,WAAL,OADA,IAEA,IAHF;EAKD;EAEDY,UAAUA,CAAAO,IAAA,EAUP;IAAA,IAVQ;MACTZ,KAAK,GAAG,CADC;MAETC,MAAM,GAAG,CAFA;MAGTR,WAAW,GAAG,IAHL;MAITe,KAAK,GAAG,IAJC;MAKTE,KAAK,GAAG,IALC;MAMTC,OAAO,GAAG,KAND;MAOTE,KAAK,GAAG,IAPC;MAQTX,UAAU,GAAGpB,SARJ;MASTqB,WAAW,GAAGrB;IATL,CAUR,GAAA8B,IAAA;IACDxC,MAAM,CAAC4B,KAAK,IAAI,CAAT,IAAcC,MAAM,IAAI,CAAzB,EAA4B,sCAA5B,CAAN;IAGA,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IAIA,IAAIR,WAAJ,EAAiB;MACf,KAAK,MAAMqB,UAAX,IAAyBrB,WAAzB,EAAsC;QACpC,MAAMsB,MAAM,GAAGtB,WAAW,CAACqB,UAAD,CAA1B;QACA,MAAME,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IAAwBA,MAAM,CAAC,CAAD,CAA9B,GAAoCA,MAAnD;QACAC,MAAM,CAACG,MAAP,CAAc;UAACnB,KAAD;UAAQC;QAAR,CAAd;MACD;IACF,CAND,MAMO;MAELR,WAAW,GAAG,KAAK2B,yBAAL,CAA+BZ,KAA/B,EAAsCE,KAAtC,EAA6CC,OAA7C,EAAsDX,KAAtD,EAA6DC,MAA7D,CAAd;IACD;IAED,KAAKoB,MAAL,CAAY;MAACC,gBAAgB,EAAE,IAAnB;MAAyB7B,WAAzB;MAAsCS,UAAtC;MAAkDC;IAAlD,CAAZ;IAGA,IAAIV,WAAW,IAAIoB,KAAnB,EAA0B;MACxB,KAAKU,WAAL;IACD;EACF;EAEDC,MAAMA,CAAA,EAAG;IACP,KAAK,MAAMC,QAAX,IAAuB,KAAKrB,YAA5B,EAA0C;MACxCqB,QAAQ,CAACD,MAAT;IACD;IACD,MAAMA,MAAN;IACA,OAAO,IAAP;EACD;EAEDH,MAAMA,CAAAK,KAAA,EAMH;IAAA,IANI;MACLjC,WAAW,GAAG,EADT;MAELS,UAFK;MAGLC,WAHK;MAILmB,gBAAgB,GAAG,KAJd;MAKLK,iBAAiB,GAAG;IALf,CAMJ,GAAAD,KAAA;IACD,KAAKE,MAAL,CAAYnC,WAAZ,EAAyB;MAAC6B,gBAAD;MAAmBK;IAAnB,CAAzB;IAEA,MAAM;MAACjD;IAAD,IAAO,IAAb;IAEA,MAAMmD,UAAU,GAAGnD,EAAE,CAACoD,eAAH,QAAmC,KAAKtC,MAAxC,CAAnB;IACA,IAAIU,UAAJ,EAAgB;MACd,KAAK6B,cAAL,CAAoB7B,UAApB;IACD;IACD,IAAIC,WAAJ,EAAiB;MACf,KAAK6B,eAAL,CAAqB7B,WAArB;IACD;IAEDzB,EAAE,CAACoD,eAAH,QAAmCD,UAAU,IAAI,IAAjD;IAEA,OAAO,IAAP;EACD;EAGDV,MAAMA,CAAA,EAAe;IAAA,IAAdxC,OAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACnB,IAAI;MAACoB,KAAD;MAAQC;IAAR,IAAkBtB,OAAtB;IAEA,IAAI,KAAKa,MAAL,KAAgB,IAApB,EAA0B;MACxBpB,MAAM,CAAC4B,KAAK,KAAKlB,SAAV,IAAuBmB,MAAM,KAAKnB,SAAnC,CAAN;MACA,KAAKkB,KAAL,GAAa,KAAKtB,EAAL,CAAQuD,kBAArB;MACA,KAAKhC,MAAL,GAAc,KAAKvB,EAAL,CAAQwD,mBAAtB;MACA,OAAO,IAAP;IACD;IAED,IAAIlC,KAAK,KAAKlB,SAAd,EAAyB;MACvBkB,KAAK,GAAG,KAAKtB,EAAL,CAAQuD,kBAAhB;IACD;IACD,IAAIhC,MAAM,KAAKnB,SAAf,EAA0B;MACxBmB,MAAM,GAAG,KAAKvB,EAAL,CAAQwD,mBAAjB;IACD;IAED,IAAIlC,KAAK,KAAK,KAAKA,KAAf,IAAwBC,MAAM,KAAK,KAAKA,MAA5C,EAAoD;MAClDtC,GAAG,CAACA,GAAJ,CAAQ,CAAR,0BAAAwE,MAAA,CAAmC,KAAK5C,EAAxC,UAAA4C,MAAA,CAAiDnC,KAAjD,OAAAmC,MAAA,CAA0DlC,MAA1D;IACD;IACD,KAAK,MAAMmC,eAAX,IAA8B,KAAK3C,WAAnC,EAAgD;MAC9C,KAAKA,WAAL,CAAiB2C,eAAjB,EAAkCjB,MAAlC,CAAyC;QAACnB,KAAD;QAAQC;MAAR,CAAzC;IACD;IACD,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,OAAO,IAAP;EACD;EAGD2B,MAAMA,CAACnC,WAAD,EAAyE;IAAA,IAA3D;MAAC6B,gBAAgB,GAAG,KAApB;MAA2BK,iBAAiB,GAAG;IAA/C,CAA2D,GAAA/C,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAC7E,MAAMyD,cAAc,GAAG,EAAvB;IAGA,IAAIf,gBAAJ,EAAsB;MACpBhB,MAAM,CAACgC,IAAP,CAAY,KAAK7C,WAAjB,EAA8B8C,OAA9B,CAAsCC,GAAG,IAAI;QAC3CH,cAAc,CAACG,GAAD,CAAd,GAAsB,IAAtB;MACD,CAFD;IAGD;IAGDlC,MAAM,CAACmC,MAAP,CAAcJ,cAAd,EAA8B5C,WAA9B;IAEA,MAAMoC,UAAU,GAAG,KAAKnD,EAAL,CAAQoD,eAAR,QAAwC,KAAKtC,MAA7C,CAAnB;IAGA,KAAK,MAAMgD,GAAX,IAAkBH,cAAlB,EAAkC;MAEhCjE,MAAM,CAACoE,GAAG,KAAK1D,SAAT,EAAoB,uCAApB,CAAN;MAEA,MAAMgC,UAAU,GAAG4B,MAAM,CAACF,GAAD,CAAzB;MAEA,MAAMG,UAAU,GAAGN,cAAc,CAACvB,UAAD,CAAjC;MACA,IAAIE,MAAM,GAAG2B,UAAb;MACA,IAAI,CAAC3B,MAAL,EAAa;QACX,KAAK4B,SAAL,CAAe9B,UAAf;MACD,CAFD,MAEO,IAAIE,MAAM,YAAYlD,YAAtB,EAAoC;QACzC,KAAK+E,mBAAL,CAAyB;UAAC/B,UAAD;UAAagC,YAAY,EAAE9B;QAA3B,CAAzB;MACD,CAFM,MAEA,IAAIC,KAAK,CAACC,OAAN,CAAcyB,UAAd,CAAJ,EAA+B;QACpC,MAAM,CAAClC,OAAD,EAAUsC,KAAK,GAAG,CAAlB,EAAqBC,KAAK,GAAG,CAA7B,IAAkCL,UAAxC;QACA3B,MAAM,GAAGP,OAAT;QACA,KAAKwC,cAAL,CAAoB;UAACnC,UAAD;UAAaL,OAAb;UAAsBsC,KAAtB;UAA6BC;QAA7B,CAApB;MACD,CAJM,MAIA;QACL,KAAKC,cAAL,CAAoB;UAACnC,UAAD;UAAaL,OAAO,EAAEO,MAAtB;UAA8B+B,KAAK,EAAE,CAArC;UAAwCC,KAAK,EAAE;QAA/C,CAApB;MACD;MAGD,IAAIrB,iBAAiB,IAAIX,MAAzB,EAAiC;QAC/BA,MAAM,CAACG,MAAP,CAAc;UAACnB,KAAK,EAAE,KAAKA,KAAb;UAAoBC,MAAM,EAAE,KAAKA;QAAjC,CAAd;MACD;IACF;IAGD,KAAKvB,EAAL,CAAQoD,eAAR,QAAwCD,UAAU,IAAI,IAAtD;IAGAvB,MAAM,CAACmC,MAAP,CAAc,KAAKhD,WAAnB,EAAgCA,WAAhC;IACAa,MAAM,CAACgC,IAAP,CAAY,KAAK7C,WAAjB,EACGyD,MADH,CACUV,GAAG,IAAI,CAAC,KAAK/C,WAAL,CAAiB+C,GAAjB,CADlB,EAEGD,OAFH,CAEWC,GAAG,IAAI;MACd,OAAO,KAAK/C,WAAL,CAAiB+C,GAAjB,CAAP;IACD,CAJH;EAKD;EAEDjB,WAAWA,CAAA,EAAG;IACZ,MAAM;MAAC7C;IAAD,IAAO,IAAb;IACA,MAAMyE,MAAM,GAAG,KAAKC,SAAL,EAAf;IACA,IAAID,MAAM,UAAV,EAAwC;MACtC,MAAM,IAAIE,KAAJ,CAAUC,qBAAqB,CAACH,MAAD,CAA/B,CAAN;IACD;IACD,OAAO,IAAP;EACD;EAEDC,SAASA,CAAA,EAAG;IACV,MAAM;MAAC1E;IAAD,IAAO,IAAb;IACA,MAAMmD,UAAU,GAAGnD,EAAE,CAACoD,eAAH,QAAmC,KAAKtC,MAAxC,CAAnB;IACA,MAAM2D,MAAM,GAAGzE,EAAE,CAAC6E,sBAAH,OAAf;IAEA7E,EAAE,CAACoD,eAAH,QAAmCD,UAAU,IAAI,IAAjD;IACA,OAAOsB,MAAP;EACD;EAEDpF,KAAKA,CAAA,EAAe;IAAA,IAAdY,OAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAClB,MAAM;MAAC4B,KAAD;MAAQE,KAAR;MAAeC,OAAf;MAAwBR,WAAW,GAAG;IAAtC,IAA4CxB,OAAlD;IAGA,MAAMkD,UAAU,GAAG,KAAKnD,EAAL,CAAQoD,eAAR,QAAwC,KAAKtC,MAA7C,CAAnB;IAEA,IAAIgB,KAAK,IAAIE,KAAT,IAAkBC,OAAtB,EAA+B;MAC7B5C,KAAK,CAAC,KAAKW,EAAN,EAAU;QAAC8B,KAAD;QAAQE,KAAR;QAAeC;MAAf,CAAV,CAAL;IACD;IAEDR,WAAW,CAACoC,OAAZ,CAAoB,CAACiB,KAAD,EAAQC,UAAR,KAAuB;MACzCzF,WAAW,CAAC,KAAKU,EAAN,EAAU;QAAC+E,UAAD;QAAaD;MAAb,CAAV,CAAX;IACD,CAFD;IAKA,KAAK9E,EAAL,CAAQoD,eAAR,QAAwCD,UAAU,IAAI,IAAtD;IAEA,OAAO,IAAP;EACD;EAMD6B,UAAUA,CAAA,EAAY;IAAA,IAAX3D,IAAW,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACpBjB,GAAG,CAACgG,KAAJ,CACE,qFADF;IAGA,OAAO,IAAP;EACD;EAIDC,kBAAkBA,CAAA,EAAY;IAAA,IAAX7D,IAAW,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAC5BjB,GAAG,CAACgG,KAAJ,CACE,6FADF;IAGA,OAAO,IAAP;EACD;EAGD1F,aAAaA,CAAA,EAAY;IAAA,IAAX8B,IAAW,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACvBjB,GAAG,CAACgG,KAAJ,CACE,oFADF;IAGA,OAAO,IAAP;EACD;EAGDE,WAAWA,CAAA,EAAY;IAAA,IAAX9D,IAAW,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACrBjB,GAAG,CAACgG,KAAJ,CAAU,gFAAV;IACA,OAAO,IAAP;EACD;EAeDG,aAAaA,CAAA,EAAY;IAAA,IAAX/D,IAAW,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACvBjB,GAAG,CAACgG,KAAJ,CACE,mGADF;IAGA,OAAO,IAAP;EACD;EAMDI,IAAIA,CAAA,EAAY;IAAA,IAAXhE,IAAW,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACdjB,GAAG,CAACgG,KAAJ,CAAU,gFAAV;IACA,OAAO,IAAP;EACD;EAGDK,UAAUA,CAAAC,KAAA,EAAkD;IAAA,IAAjD;MAACxE,WAAW,GAAG,EAAf;MAAmByE,CAAC,GAAG,CAAvB;MAA0BC,CAAC,GAAG,CAA9B;MAAiCnE,KAAjC;MAAwCC;IAAxC,CAAiD,GAAAgE,KAAA;IAC1D,MAAMtE,GAAG,GAAGjC,mBAAmB,CAAC,KAAKgB,EAAN,CAA/B;IACA,MAAMmD,UAAU,GAAGlC,GAAG,CAACmC,eAAJ,QAAyC,KAAKtC,MAA9C,CAAnB;IACA,MAAM4E,aAAa,GAAGF,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAAjB,IAAsBnE,KAAK,KAAKlB,SAAhC,IAA6CmB,MAAM,KAAKnB,SAA9E;IACA,IAAIsF,aAAJ,EAAmB;MACjBzE,GAAG,CAAC0E,qBAAJ,QAA+C5E,WAA/C;IACD,CAFD,MAEO;MAGLE,GAAG,CAAC0E,qBAAJ,QAA+C5E,WAA/C,EAA4DyE,CAA5D,EAA+DC,CAA/D,EAAkEnE,KAAlE,EAAyEC,MAAzE;IACD;IAEDN,GAAG,CAACmC,eAAJ,QAAyCD,UAAzC;IACA,OAAO,IAAP;EACD;EAIDyC,sBAAsBA,CAACxD,UAAD,EAAayD,KAAb,EAAoBjC,IAApB,EAA0B;IAC9C,IAAIkB,KAAK,GAAG,KAAKgB,+BAAL,CAAqCD,KAArC,CAAZ;IACA,IAAIf,KAAK,KAAK,IAAd,EAAoB;MAClB,KAAK9E,EAAL,CAAQoD,eAAR,QAAwC,KAAKtC,MAA7C;MACAgE,KAAK,GAAG,KAAK9E,EAAL,CAAQ+F,iCAAR,QAA0D3D,UAA1D,EAAsEyD,KAAtE,CAAR;MACA,KAAK7F,EAAL,CAAQoD,eAAR,QAAwC,IAAxC;IACD;IACD,IAAIQ,IAAI,IAAIkB,KAAK,GAAG,IAApB,EAA0B;MAExBA,KAAK,GAAGrF,MAAM,CAAC,KAAKO,EAAN,EAAU8E,KAAV,CAAd;IACD;IACD,OAAOA,KAAP;EACD;EAEDkB,uBAAuBA,CAAA,EAKrB;IAAA,IAJA5D,UAIA,GAAAlC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAA,IAHA0D,IAGA,GAAA1D,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAA,IADA6F,UACA,GAAA/F,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADa,KAAKkB,WAAL,CAAiB8E,qBAAjB,IAA0C,EACvD;IACA,MAAMC,MAAM,GAAG,EAAf;IACA,KAAK,MAAMN,KAAX,IAAoBI,UAApB,EAAgC;MAC9B,MAAMnC,GAAG,GAAGF,IAAI,GAAGnE,MAAM,CAAC,KAAKO,EAAN,EAAU6F,KAAV,CAAT,GAA4BA,KAA5C;MACAM,MAAM,CAACrC,GAAD,CAAN,GAAc,KAAK8B,sBAAL,CAA4BxD,UAA5B,EAAwCyD,KAAxC,EAA+CjC,IAA/C,CAAd;IACD;IACD,OAAOuC,MAAP;EACD;EAEDC,aAAaA,CAAA,EAAc;IAAA,IAAbxC,IAAa,GAAA1D,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAN,IAAM;IACzB,MAAMa,WAAW,GAAGa,MAAM,CAACgC,IAAP,CAAY,KAAK7C,WAAjB,CAApB;IAIA,MAAMkF,UAAU,GAAG,EAAnB;IACA,KAAK,MAAMI,cAAX,IAA6BtF,WAA7B,EAA0C;MACxC,MAAMqB,UAAU,GAAG4B,MAAM,CAACqC,cAAD,CAAzB;MACA,MAAMvC,GAAG,GAAGF,IAAI,GAAGnE,MAAM,CAAC,KAAKO,EAAN,EAAUoC,UAAV,CAAT,GAAiCA,UAAjD;MACA6D,UAAU,CAACnC,GAAD,CAAV,GAAkB,KAAKkC,uBAAL,CAA6B5D,UAA7B,EAAyCwB,IAAzC,CAAlB;IACD;IACD,OAAOqC,UAAP;EACD;EAKDK,IAAIA,CAAA,EAAG;IACL,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;MACjCA,MAAM,CAACC,IAAP,CAAYjH,aAAa,CAAC,IAAD,CAAzB,EAAiC,oBAAjC;IACD;IACD,OAAO,IAAP;EACD;EAEDN,GAAGA,CAAA,EAA6B;IAAA,IAA5BwH,QAA4B,GAAAvG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAjB,CAAiB;IAAA,IAAdwG,OAAc,GAAAxG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAC9B,IAAIuG,QAAQ,GAAGxH,GAAG,CAACqF,KAAf,IAAwB,OAAOiC,MAAP,KAAkB,WAA9C,EAA2D;MACzD,OAAO,IAAP;IACD;IACDG,OAAO,GAAGA,OAAO,mBAAAjD,MAAA,CAAmB,KAAK5C,EAAxB,CAAjB;IACA,MAAM8F,KAAK,GAAGpH,aAAa,CAAC,IAAD,EAAO;MAACqH,eAAe,EAAE;IAAlB,CAAP,CAA3B;IAEA3H,GAAG,CAAC0H,KAAJ,CAAU;MAACF,QAAD;MAAWC,OAAX;MAAoBC;IAApB,CAAV,EAAsCD,OAAtC;IACA,OAAO,IAAP;EACD;EAGDG,IAAIA,CAAA,EAAiC;IAAA,IAAhC;MAACxE,MAAM;IAAP,CAAgC,GAAAnC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACnC,KAAKF,EAAL,CAAQoD,eAAR,CAAwBf,MAAxB,EAAgC,KAAKvB,MAArC;IACA,OAAO,IAAP;EACD;EAEDgG,MAAMA,CAAA,EAAiC;IAAA,IAAhC;MAACzE,MAAM;IAAP,CAAgC,GAAAnC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IACrC,KAAKF,EAAL,CAAQoD,eAAR,CAAwBf,MAAxB,EAAgC,IAAhC;IACA,OAAO,IAAP;EACD;EAIDK,yBAAyBA,CAACZ,KAAD,EAAQE,KAAR,EAAeC,OAAf,EAAwBX,KAAxB,EAA+BC,MAA/B,EAAuC;IAC9D,IAAIwF,kBAAkB,GAAG,IAAzB;IAGA,IAAIjF,KAAJ,EAAW;MACTiF,kBAAkB,GAAGA,kBAAkB,IAAI,EAA3C;MACAA,kBAAkB,OAAlB,GAA2C,IAAI5H,SAAJ,CAAc,KAAKa,EAAnB,EAAuB;QAChEa,EAAE,KAAA4C,MAAA,CAAK,KAAK5C,EAAV,YAD8D;QAEhEmG,MAAM,EAAE,IAFwD;QAGhEC,MAAM,MAH0D;QAIhEC,IAAI,MAJ4D;QAKhE5F,KALgE;QAMhEC,MANgE;QAUhE4F,OAAO,EAAE,KAVuD;QAchElB,UAAU,EAAE;UACV,aADU;UAEV,aAFU;UAGV,cAHU;UAIV;QAJU;MAdoD,CAAvB,CAA3C;MAsBA,KAAKvE,YAAL,CAAkB0F,IAAlB,CAAuBL,kBAAkB,OAAzC;IACD;IAED,IAAI/E,KAAK,IAAIC,OAAb,EAAsB;MAEpB8E,kBAAkB,GAAGA,kBAAkB,IAAI,EAA3C;MACAA,kBAAkB,OAAlB,GAAkD,IAAI3H,YAAJ,CAAiB,KAAKY,EAAtB,EAA0B;QAC1Ea,EAAE,KAAA4C,MAAA,CAAK,KAAK5C,EAAV,mBADwE;QAE1EoG,MAAM,OAFoE;QAG1E3F,KAH0E;QAI1EC,MAAM,EAAE;MAJkE,CAA1B,CAAlD;MAOA,KAAKG,YAAL,CAAkB0F,IAAlB,CAAuBL,kBAAkB,OAAzC;IAWD,CArBD,MAqBO,IAAI/E,KAAJ,EAAW;MAEhB+E,kBAAkB,GAAGA,kBAAkB,IAAI,EAA3C;MACAA,kBAAkB,OAAlB,GAA0C,IAAI3H,YAAJ,CAAiB,KAAKY,EAAtB,EAA0B;QAClEa,EAAE,KAAA4C,MAAA,CAAK,KAAK5C,EAAV,WADgE;QAElEoG,MAAM,OAF4D;QAGlE3F,KAHkE;QAIlEC;MAJkE,CAA1B,CAA1C;MAOA,KAAKG,YAAL,CAAkB0F,IAAlB,CAAuBL,kBAAkB,OAAzC;IACD,CAXM,MAWA,IAAI9E,OAAJ,EAAa;MAElBvC,MAAM,CAAC,KAAD,CAAN;IACD;IAED,OAAOqH,kBAAP;EACD;EAED7C,SAASA,CAAC9B,UAAD,EAAa;IACpB,MAAMiF,aAAa,GAAG,KAAKtG,WAAL,CAAiBqB,UAAjB,CAAtB;IACA,IAAI,CAACiF,aAAL,EAAoB;MAClB;IACD;IACD,IAAIA,aAAa,YAAYjI,YAA7B,EAA2C;MAEzC,KAAKY,EAAL,CAAQsH,uBAAR,QAAgDlF,UAAhD,SAA6E,IAA7E;IACD,CAHD,MAGO;MAEL,KAAKpC,EAAL,CAAQuH,oBAAR,QAA6CnF,UAA7C,QAAwE,IAAxE,EAA8E,CAA9E;IACD;IACD,OAAO,KAAKrB,WAAL,CAAiBqB,UAAjB,CAAP;EACD;EAED+B,mBAAmBA,CAAAqD,KAAA,EAAoD;IAAA,IAAnD;MAACpF,UAAU,QAAX;MAAoCgC;IAApC,CAAmD,GAAAoD,KAAA;IACrE,MAAM;MAACxH;IAAD,IAAO,IAAb;IAGAA,EAAE,CAACsH,uBAAH,QAA2ClF,UAA3C,SAAwEgC,YAAY,CAACtD,MAArF;IAIA,KAAKC,WAAL,CAAiBqB,UAAjB,IAA+BgC,YAA/B;EACD;EAIDG,cAAcA,CAAAkD,KAAA,EAA6D;IAAA,IAA5D;MAACrF,UAAU,QAAX;MAAoCL,OAApC;MAA6CsC,KAA7C;MAAoDC;IAApD,CAA4D,GAAAmD,KAAA;IACzE,MAAM;MAACzH;IAAD,IAAO,IAAb;IACAA,EAAE,CAAC0H,WAAH,CAAe3F,OAAO,CAACM,MAAvB,EAA+BN,OAAO,CAACjB,MAAvC;IAEA,QAAQiB,OAAO,CAACM,MAAhB;MACE;MACA;QACE,MAAMpB,GAAG,GAAGjC,mBAAmB,CAACgB,EAAD,CAA/B;QACAiB,GAAG,CAAC0G,uBAAJ,QAA4CvF,UAA5C,EAAwDL,OAAO,CAACM,MAAhE,EAAwEiC,KAAxE,EAA+ED,KAA/E;QACA;MAEF;QAEE,MAAMuD,IAAI,GAAGC,qBAAqB,CAACxD,KAAD,CAAlC;QACArE,EAAE,CAACuH,oBAAH,QAAwCnF,UAAxC,EAAoDwF,IAApD,EAA0D7F,OAAO,CAACjB,MAAlE,EAA0EwD,KAA1E;QACA;MAEF;QACEtE,EAAE,CAACuH,oBAAH,QAAwCnF,UAAxC,QAAmEL,OAAO,CAACjB,MAA3E,EAAmFwD,KAAnF;QACA;MAEF;QACE5E,MAAM,CAAC,KAAD,EAAQ,sBAAR,CAAN;IAAA;IAGJM,EAAE,CAAC0H,WAAH,CAAe3F,OAAO,CAACM,MAAvB,EAA+B,IAA/B;IACA,KAAKtB,WAAL,CAAiBqB,UAAjB,IAA+BL,OAA/B;EACD;EAGDsB,cAAcA,CAAC7B,UAAD,EAAa;IACzB,MAAMP,GAAG,GAAGlC,gBAAgB,CAAC,KAAKiB,EAAN,CAA5B;IACA,IAAIiB,GAAJ,EAAS;MACPA,GAAG,CAACO,UAAJ,CAAeA,UAAf;IACD,CAFD,MAEO;MAEL9B,MAAM,CACJ8B,UAAU,UAAV,IAAuCA,UAAU,SAD7C,EAEJ7B,0BAFI,CAAN;IAID;IACD,KAAK6B,UAAL,GAAkBA,UAAlB;EACD;EAGD8B,eAAeA,CAAC7B,WAAD,EAAc;IAC3B,MAAM;MAACzB;IAAD,IAAO,IAAb;IACA,MAAMiB,GAAG,GAAGjC,mBAAmB,CAACgB,EAAD,CAA/B;IACA,IAAIiB,GAAJ,EAAS;MACPA,GAAG,CAACQ,WAAJ,CAAgBA,WAAhB;IACD,CAFD,MAEO;MAEL,MAAMqG,GAAG,GAAG9H,EAAE,CAACS,YAAH,CAAgB,oBAAhB,CAAZ;MACA,IAAIqH,GAAJ,EAAS;QACPA,GAAG,CAACC,gBAAJ,CAAqBtG,WAArB;MACD,CAFD,MAEO;QAEL/B,MAAM,CACJ+B,WAAW,CAACtB,MAAZ,KAAuB,CAAvB,KACGsB,WAAW,CAAC,CAAD,CAAX,cAA2CA,WAAW,CAAC,CAAD,CAAX,SAD9C,CADI,EAGJ9B,0BAHI,CAAN;MAKD;IACF;IACD,KAAK8B,WAAL,GAAmBA,WAAnB;EACD;EAMDqE,+BAA+BA,CAACD,KAAD,EAAQ;IACrC,MAAMmC,IAAI,GAAGxI,WAAW,CAAC,KAAKQ,EAAN,CAAxB;IAEA,QAAQ6F,KAAR;MACE;QACE,OAAO,CAACmC,IAAI,CAACC,MAAN,GAAe,CAAf,GAAmB,IAA1B;MACF;MACA;MACA;MACA;MACA;MACA;QACE,OAAO,CAACD,IAAI,CAACC,MAAN,GAAe,CAAf,GAAmB,IAA1B;MACF;QACE,OAAO,CAACD,IAAI,CAACC,MAAN,UAAiC,IAAxC;MACF;QACE,OAAO,CAACD,IAAI,CAACC,MAAN,IAAgB,CAACD,IAAI,CAACE,QAAtB,UAA6C,IAApD;MACF;QACE,OAAO,IAAP;IAAA;EAEL;EAKDC,aAAaA,CAAA,EAAG;IACd,OAAO,KAAKnI,EAAL,CAAQoI,iBAAR,EAAP;EACD;EAEDC,aAAaA,CAAA,EAAG;IACd,KAAKrI,EAAL,CAAQsI,iBAAR,CAA0B,KAAKxH,MAA/B;EACD;EAEDyH,WAAWA,CAACzH,MAAD,EAAS;IAClB,OAAO,KAAKd,EAAL,CAAQoD,eAAR,QAAwCtC,MAAxC,CAAP;EACD;AA7oB+C;AAmpBlD,SAAS+G,qBAATA,CAA+BxD,KAA/B,EAAsC;EAGpC,OAAOA,KAAK,QAAL,GAAyCA,KAAK,QAA9C,GAAkFA,KAAzF;AACD;AAID,SAASO,qBAATA,CAA+BH,MAA/B,EAAuC;EAGrC,MAAM+D,MAAM,GAAG5I,WAAW,CAAC4I,MAAZ,IAAsB,EAArC;EACA,OAAOA,MAAM,CAAC/D,MAAD,CAAN,yBAAAhB,MAAA,CAAuCgB,MAAvC,CAAP;AACD;AAED,OAAO,MAAMgE,iCAAiC,GAAG,+DAA1C;AAmBP7I,WAAW,CAACsG,qBAAZ,GAAoCuC,iCAApC"},"metadata":{},"sourceType":"module","externalDependencies":[]}