{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\nconst defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: x => x.offsets\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\nexport default class MultiIconLayer extends IconLayer {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", void 0);\n  }\n  getShaders() {\n    return {\n      ...super.getShaders(),\n      fs\n    };\n  }\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: 5121,\n        size: 3,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(index, value);\n        }\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    let {\n      outlineColor\n    } = props;\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n    }\n  }\n  draw(params) {\n    const {\n      sdf,\n      smoothing,\n      outlineWidth\n    } = this.props;\n    const {\n      outlineColor\n    } = this.state;\n    const outlineBuffer = outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1;\n    params.uniforms = {\n      ...params.uniforms,\n      sdfBuffer: DEFAULT_BUFFER,\n      outlineBuffer,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n    if (sdf && outlineWidth) {\n      const {\n        iconManager\n      } = this.state;\n      const iconsTexture = iconManager.getTexture();\n      if (iconsTexture) {\n        this.state.model.draw({\n          uniforms: {\n            outlineBuffer: DEFAULT_BUFFER\n          }\n        });\n      }\n    }\n  }\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n  getInstanceColorMode(icons) {\n    return 1;\n  }\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n}\n_defineProperty(MultiIconLayer, \"defaultProps\", defaultProps);\n_defineProperty(MultiIconLayer, \"layerName\", 'MultiIconLayer');","map":{"version":3,"names":["_defineProperty","log","IconLayer","fs","DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","getIconOffsets","type","value","x","offsets","alphaCutoff","smoothing","outlineWidth","outlineColor","MultiIconLayer","constructor","arguments","getShaders","initializeState","attributeManager","getAttributeManager","addInstanced","instanceOffsets","size","accessor","instancePickingColors","object","_ref","index","target","encodePickingColor","updateState","params","props","oldProps","map","Number","isFinite","setState","sdf","warn","concat","id","draw","state","outlineBuffer","Math","max","uniforms","sdfBuffer","gamma","Boolean","iconManager","iconsTexture","getTexture","model","getInstanceOffset","icons","Array","from","flatMap","icon","getInstanceColorMode","getInstanceIconFrame"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/layers/dist/esm/text-layer/multi-icon-layer/multi-icon-layer.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\nconst defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: x => x.offsets\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\nexport default class MultiIconLayer extends IconLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    return { ...super.getShaders(),\n      fs\n    };\n  }\n\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: 5121,\n        size: 3,\n        accessor: (object, {\n          index,\n          target: value\n        }) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    let {\n      outlineColor\n    } = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n      this.setState({\n        outlineColor\n      });\n    }\n\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n    }\n  }\n\n  draw(params) {\n    const {\n      sdf,\n      smoothing,\n      outlineWidth\n    } = this.props;\n    const {\n      outlineColor\n    } = this.state;\n    const outlineBuffer = outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1;\n    params.uniforms = { ...params.uniforms,\n      sdfBuffer: DEFAULT_BUFFER,\n      outlineBuffer,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n\n    if (sdf && outlineWidth) {\n      const {\n        iconManager\n      } = this.state;\n      const iconsTexture = iconManager.getTexture();\n\n      if (iconsTexture) {\n        this.state.model.draw({\n          uniforms: {\n            outlineBuffer: DEFAULT_BUFFER\n          }\n        });\n      }\n    }\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1;\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n\n}\n\n_defineProperty(MultiIconLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(MultiIconLayer, \"layerName\", 'MultiIconLayer');\n//# sourceMappingURL=multi-icon-layer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}