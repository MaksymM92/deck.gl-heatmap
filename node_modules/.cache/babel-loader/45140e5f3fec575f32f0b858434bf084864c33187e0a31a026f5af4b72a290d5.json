{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport View from './view';\nimport OrbitViewport from '../viewports/orbit-viewport';\nimport OrbitController from '../controllers/orbit-controller';\nexport default class OrbitView extends View {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(props);\n    this.props.orbitAxis = props.orbitAxis || 'Z';\n  }\n  get ViewportType() {\n    return OrbitViewport;\n  }\n  get ControllerType() {\n    return OrbitController;\n  }\n}\n_defineProperty(OrbitView, \"displayName\", 'OrbitView');","map":{"version":3,"names":["View","OrbitViewport","OrbitController","OrbitView","constructor","props","arguments","length","undefined","orbitAxis","ViewportType","ControllerType"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/views/orbit-view.ts"],"sourcesContent":["import View, {CommonViewState} from './view';\nimport OrbitViewport from '../viewports/orbit-viewport';\nimport OrbitController from '../controllers/orbit-controller';\n\nexport type OrbitViewState = {\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target: [number, number, number];\n  /** The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large. Default `0`. */\n  zoom: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationOrbit?: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationX?: number;\n  /** The min zoom level of the viewport. Default `-Infinity`. */\n  minZoom?: number;\n  /** The max zoom level of the viewport. Default `Infinity`. */\n  maxZoom?: number;\n  /** The min rotating angle around X axis. Default `-90`. */\n  minRotationX?: number;\n  /** The max rotating angle around X axis. Default `90`. */\n  maxRotationX?: number;\n} & CommonViewState;\n\ntype OrbitViewProps = {\n  /** Axis with 360 degrees rotating freedom, either `'Y'` or `'Z'`, default to `'Z'`. */\n  orbitAxis?: 'Y' | 'Z';\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Field of view covered by camera, in the perspective case. In degrees. Default `50`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to create an orthographic or perspective projection matrix. Default is `false` (perspective projection). */\n  orthographic?: boolean;\n};\n\nexport default class OrbitView extends View<OrbitViewState, OrbitViewProps> {\n  static displayName = 'OrbitView';\n\n  constructor(props: OrbitViewProps = {}) {\n    super(props);\n    this.props.orbitAxis = props.orbitAxis || 'Z';\n  }\n\n  get ViewportType() {\n    return OrbitViewport;\n  }\n\n  get ControllerType() {\n    return OrbitController;\n  }\n}\n"],"mappings":";AAAA,OAAOA,IAAP,MAAoC,QAApC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AAoCA,eAAe,MAAMC,SAAN,SAAwBH,IAAxB,CAA6D;EAG1EI,WAAWA,CAAA,EAA6B;IAAA,IAA5BC,KAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAzB;IACT,MAAMD,KAAN;IACA,KAAKA,KAAL,CAAWI,SAAX,GAAuBJ,KAAK,CAACI,SAAN,IAAmB,GAA1C;EACD;EAEe,IAAZC,YAAYA,CAAA,EAAG;IACjB,OAAOT,aAAP;EACD;EAEiB,IAAdU,cAAcA,CAAA,EAAG;IACnB,OAAOT,eAAP;EACD;AAdyE;gBAAvDC,S,iBACE,W"},"metadata":{},"sourceType":"module","externalDependencies":[]}