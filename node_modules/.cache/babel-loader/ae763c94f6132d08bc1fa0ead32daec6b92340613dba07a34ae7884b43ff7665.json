{"ast":null,"code":"import { project } from '../project/project';\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\nconst vs = null;\nconst fs = \"uniform vec3 dirlight_uLightDirection;\\nvec4 dirlight_filterColor(vec4 color) {\\n  vec3 normal = project_getNormal_World();\\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\\n  return vec4(color.rgb * d, color.a);\\n}\\n\";\nexport const dirlight = {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};","map":{"version":3,"names":["project","DEFAULT_LIGHT_DIRECTION","Float32Array","DEFAULT_MODULE_OPTIONS","lightDirection","getUniforms","opts","arguments","length","undefined","uniforms","dirlight_uLightDirection","vs","fs","dirlight","name","dependencies"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@luma.gl/shadertools/src/modules/dirlight/dirlight.js"],"sourcesContent":["/** @typedef {import('../../types').ShaderModule} ShaderModule */\n\n// Cheap lighting - single directional light, single dot product, one uniform\n\nimport {project} from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport const dirlight = {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n"],"mappings":"AAIA,SAAQA,OAAR,QAAsB,oBAAtB;AAGA,MAAMC,uBAAuB,GAAG,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAAhC;AAEA,MAAMC,sBAAsB,GAAG;EAC7BC,cAAc,EAAEH;AADa,CAA/B;AAIA,SAASI,WAATA,CAAA,EAAoD;EAAA,IAA/BC,IAA+B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAxBJ,sBAAwB;EAClD,MAAMO,QAAQ,GAAG,EAAjB;EACA,IAAIJ,IAAI,CAACF,cAAT,EAAyB;IACvBM,QAAQ,CAACC,wBAAT,GAAoCL,IAAI,CAACF,cAAzC;EACD;EACD,OAAOM,QAAP;AACD;AAGD,MAAME,EAAE,GAAG,IAAX;AAEA,MAAMC,EAAE,4PAAR;AAaA,OAAO,MAAMC,QAAQ,GAAG;EACtBC,IAAI,EAAE,UADgB;EAEtBH,EAFsB;EAGtBC,EAHsB;EAItBR,WAJsB;EAKtBW,YAAY,EAAE,CAAChB,OAAD;AALQ,CAAjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}