{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Timeline } from '@luma.gl/core';\nimport { LIFECYCLE } from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nimport { Stats } from '@probe.gl/stats';\nimport ResourceManager from './resource/resource-manager';\nimport Viewport from '../viewports/viewport';\nimport { createProgramManager } from '../shaderlib';\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\nexport default class LayerManager {\n  constructor(gl) {\n    let {\n      deck,\n      stats,\n      viewport: _viewport,\n      timeline\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _defineProperty(this, \"layers\", void 0);\n    _defineProperty(this, \"context\", void 0);\n    _defineProperty(this, \"resourceManager\", void 0);\n    _defineProperty(this, \"_lastRenderedLayers\", []);\n    _defineProperty(this, \"_needsRedraw\", false);\n    _defineProperty(this, \"_needsUpdate\", false);\n    _defineProperty(this, \"_nextLayers\", null);\n    _defineProperty(this, \"_debug\", false);\n    _defineProperty(this, \"activateViewport\", viewport => {\n      debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n      if (viewport) {\n        this.context.viewport = viewport;\n      }\n    });\n    this.layers = [];\n    this.resourceManager = new ResourceManager({\n      gl,\n      protocol: 'deck://'\n    });\n    this.context = {\n      mousePosition: null,\n      userData: {},\n      layerManager: this,\n      gl,\n      deck,\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({\n        id: 'deck.gl'\n      }),\n      viewport: _viewport || new Viewport({\n        id: 'DEFAULT-INITIAL-VIEWPORT'\n      }),\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager,\n      onError: undefined\n    };\n    Object.seal(this);\n  }\n  finalize() {\n    this.resourceManager.finalize();\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    for (const layer of this.layers) {\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n    return redraw;\n  }\n  needsUpdate() {\n    if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {\n      return 'layers changed';\n    }\n    return this._needsUpdate;\n  }\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n  getLayers() {\n    let {\n      layerIds\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return layerIds ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0)) : this.layers;\n  }\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n    if ('layers' in props) {\n      this._nextLayers = props.layers;\n    }\n    if ('onError' in props) {\n      this.context.onError = props.onError;\n    }\n  }\n  setLayers(newLayers, reason) {\n    debug(TRACE_SET_LAYERS, this, reason, newLayers);\n    this._lastRenderedLayers = newLayers;\n    const flatLayers = flatten(newLayers, Boolean);\n    for (const layer of flatLayers) {\n      layer.context = this.context;\n    }\n    this._updateLayers(this.layers, flatLayers);\n  }\n  updateLayers() {\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(\"updating layers: \".concat(reason));\n      this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);\n    }\n    this._nextLayers = null;\n  }\n  _handleError(stage, error, layer) {\n    layer.raiseError(error, \"\".concat(stage, \" of \").concat(layer));\n  }\n  _updateLayers(oldLayers, newLayers) {\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(\"Multiple old layers with same id \".concat(oldLayer.id))();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n    const generatedLayers = [];\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n    this._finalizeOldLayers(oldLayerMap);\n    let needsUpdate = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = \"Uniform transition in \".concat(layer);\n        break;\n      }\n    }\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        log.warn(\"Multiple new layers with same id \".concat(newLayer.id))();\n      }\n      oldLayerMap[newLayer.id] = null;\n      let sublayers = null;\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n        sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;\n      } catch (err) {\n        this._handleError('matching', err, newLayer);\n      }\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err, layer);\n    }\n  }\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err, layer);\n    }\n  }\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || \"finalized \".concat(layer);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err, layer);\n    }\n  }\n}","map":{"version":3,"names":["Timeline","LIFECYCLE","log","debug","flatten","Stats","ResourceManager","Viewport","createProgramManager","TRACE_SET_LAYERS","TRACE_ACTIVATE_VIEWPORT","LayerManager","constructor","gl","deck","stats","viewport","_viewport","timeline","arguments","length","undefined","_defineProperty","context","layers","resourceManager","protocol","mousePosition","userData","layerManager","programManager","id","onError","Object","seal","finalize","layer","_finalizeLayer","needsRedraw","opts","clearRedrawFlags","redraw","_needsRedraw","layerNeedsRedraw","getNeedsRedraw","needsUpdate","_nextLayers","_lastRenderedLayers","_needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","layerId","indexOf","setProps","props","_debug","setLayers","newLayers","flatLayers","Boolean","_updateLayers","updateLayers","concat","_handleError","stage","error","raiseError","oldLayers","oldLayerMap","oldLayer","warn","generatedLayers","_updateSublayersRecursively","_finalizeOldLayers","hasUniformTransition","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","_updateLayer","push","isComposite","getSubLayers","err","_initialize","lifecycle","INITIALIZED","_transferState","MATCHED","AWAITING_GC","_update","AWAITING_FINALIZATION","_finalize","FINALIZED"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/lib/layer-manager.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Timeline} from '@luma.gl/core';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from '@probe.gl/stats';\nimport ResourceManager from './resource/resource-manager';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nimport type Layer from './layer';\nimport type CompositeLayer from './composite-layer';\nimport type Deck from './deck';\nimport type {ProgramManager} from '@luma.gl/engine';\n\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\n\nexport type LayerContext = {\n  layerManager: LayerManager;\n  resourceManager: ResourceManager;\n  deck?: Deck;\n  gl: WebGLRenderingContext;\n  programManager: ProgramManager;\n  stats: Stats;\n  viewport: Viewport;\n  timeline: Timeline;\n  mousePosition: {x: number; y: number} | null;\n  userData: any;\n  onError?: <PropsT>(error: Error, source: Layer<PropsT>) => void;\n};\n\nexport type LayersList = (Layer | undefined | false | null | LayersList)[];\n\nexport default class LayerManager {\n  layers: Layer[];\n  context: LayerContext;\n  resourceManager: ResourceManager;\n\n  private _lastRenderedLayers: LayersList = [];\n  private _needsRedraw: string | false = false;\n  private _needsUpdate: string | false = false;\n  private _nextLayers: LayersList | null = null;\n  private _debug: boolean = false;\n\n  // eslint-disable-next-line\n  constructor(\n    gl,\n    {\n      deck,\n      stats,\n      viewport,\n      timeline\n    }: {\n      deck?: Deck;\n      stats?: Stats;\n      viewport?: Viewport;\n      timeline?: Timeline;\n    } = {}\n  ) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this._lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.layers = [];\n    this.resourceManager = new ResourceManager({gl, protocol: 'deck://'});\n\n    this.context = {\n      mousePosition: null,\n      userData: {},\n      layerManager: this,\n      gl,\n      deck,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager,\n      onError: undefined\n    };\n\n    Object.seal(this);\n  }\n\n  /** Method to call when the layer manager is not needed anymore. */\n  finalize() {\n    this.resourceManager.finalize();\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  /** Check if a redraw is needed */\n  needsRedraw(\n    opts: {\n      /** Reset redraw flags to false after the call */\n      clearRedrawFlags: boolean;\n    } = {clearRedrawFlags: false}\n  ): string | false {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  /** Check if a deep update of all layers is needed */\n  needsUpdate(): string | false {\n    if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {\n      // New layers array may be the same as the old one if `setProps` is called by React\n      return 'layers changed';\n    }\n    return this._needsUpdate;\n  }\n\n  /** Layers will be redrawn (in next animation frame) */\n  setNeedsRedraw(reason: string): void {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Layers will be updated deeply (in next animation frame)\n    Potentially regenerating attributes and sub layers */\n  setNeedsUpdate(reason: string): void {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  /** Gets a list of currently rendered layers. Optionally filter by id. */\n  getLayers({layerIds}: {layerIds?: string[]} = {}): Layer[] {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  /** Set props needed for layer rendering and picking. */\n  setProps(props: any): void {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // New layers will be processed in `updateLayers` in the next update cycle\n    if ('layers' in props) {\n      this._nextLayers = props.layers;\n    }\n\n    if ('onError' in props) {\n      this.context.onError = props.onError;\n    }\n  }\n\n  /** Supply a new layer list, initiating sublayer generation and layer matching */\n  setLayers(newLayers: LayersList, reason?: string): void {\n    debug(TRACE_SET_LAYERS, this, reason, newLayers);\n\n    this._lastRenderedLayers = newLayers;\n\n    const flatLayers = flatten(newLayers, Boolean) as Layer[];\n\n    for (const layer of flatLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, flatLayers);\n  }\n\n  /** Update layers from last cycle if `setNeedsUpdate()` has been called */\n  updateLayers(): void {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);\n    }\n    // Updated, clear the backlog\n    this._nextLayers = null;\n  }\n\n  //\n  // INTERNAL METHODS\n  //\n\n  /** Make a viewport \"current\" in layer context, updating viewportChanged flags */\n  activateViewport = (viewport: Viewport) => {\n    debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n    if (viewport) {\n      this.context.viewport = viewport;\n    }\n  };\n\n  private _handleError(stage: string, error: Error, layer: Layer) {\n    layer.raiseError(error, `${stage} of ${layer}`);\n  }\n\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  /** Match all layers, checking for caught errors\n    to avoid having an exception in one layer disrupt other layers */\n  private _updateLayers(oldLayers: Layer[], newLayers: Layer[]): void {\n    // Create old layer map\n    const oldLayerMap: {[layerId: string]: Layer | null} = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${oldLayer.id}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers: Layer[] = [];\n\n    // Match sublayers\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    // Finalize unmatched layers\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate: string | false = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = `Uniform transition in ${layer}`;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  private _updateSublayersRecursively(\n    newLayers: Layer[],\n    oldLayerMap: {[layerId: string]: Layer | null},\n    generatedLayers: Layer[]\n  ) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${newLayer.id}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers: Layer[] | null = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite ? (newLayer as CompositeLayer).getSubLayers() : null;\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        this._handleError('matching', err as Error, newLayer); // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  private _finalizeOldLayers(oldLayerMap: {[layerId: string]: Layer | null}): void {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  // / EXCEPTION SAFE LAYER ACCESS\n\n  /** Safely initializes a single layer, calling layer methods */\n  private _initializeLayer(layer: Layer): void {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err as Error, layer);\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n  }\n\n  /** Transfer state from one layer to a newer version */\n  private _transferLayerState(oldLayer: Layer, newLayer: Layer): void {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  /** Safely updates a single layer, cleaning all flags */\n  private _updateLayer(layer: Layer): void {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err as Error, layer);\n    }\n  }\n\n  /** Safely finalizes a single layer, removing all resources */\n  private _finalizeLayer(layer: Layer): void {\n    this._needsRedraw = this._needsRedraw || `finalized ${layer}`;\n\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err as Error, layer);\n    }\n  }\n}\n"],"mappings":";AAoBA,SAAQA,QAAR,QAAuB,eAAvB;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,OAAR,QAAsB,kBAAtB;AACA,SAAQC,KAAR,QAAoB,iBAApB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,oBAAR,QAAmC,cAAnC;AAOA,MAAMC,gBAAgB,GAAG,wBAAzB;AACA,MAAMC,uBAAuB,GAAG,+BAAhC;AAkBA,eAAe,MAAMC,YAAN,CAAmB;EAYhCC,WAAWA,CACTC,EADS,EAaT;IAAA,IAXA;MACEC,IADF;MAEEC,KAFF;MAGEC,QAAQ,EAARC,SAHF;MAIEC;IAJF,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAUI,EAZK;IAaTG,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,8BApBwC,EAoBxC;IAAAA,eAAA,uBAnBqC,KAmBrC;IAAAA,eAAA,uBAlBqC,KAkBrC;IAAAA,eAAA,sBAjBuC,IAiBvC;IAAAA,eAAA,iBAhBwB,KAgBxB;IAAAA,eAAA,2BAoJkBN,QAAD,IAAwB;MACzCb,KAAK,CAACO,uBAAD,EAA0B,IAA1B,EAAgCM,QAAhC,CAAL;MACA,IAAIA,QAAJ,EAAc;QACZ,KAAKO,OAAL,CAAaP,QAAb,GAAwBA,QAAxB;MACD;IACF,CAzJC;IAUA,KAAKQ,MAAL,GAAc,EAAd;IACA,KAAKC,eAAL,GAAuB,IAAInB,eAAJ,CAAoB;MAACO,EAAD;MAAKa,QAAQ,EAAE;IAAf,CAApB,CAAvB;IAEA,KAAKH,OAAL,GAAe;MACbI,aAAa,EAAE,IADF;MAEbC,QAAQ,EAAE,EAFG;MAGbC,YAAY,EAAE,IAHD;MAIbhB,EAJa;MAKbC,IALa;MAObgB,cAAc,EAAEjB,EAAE,IAAIL,oBAAoB,CAACK,EAAD,CAP7B;MAQbE,KAAK,EAAEA,KAAK,IAAI,IAAIV,KAAJ,CAAU;QAAC0B,EAAE,EAAE;MAAL,CAAV,CARH;MAUbf,QAAQ,EAAEC,SAAQ,IAAI,IAAIV,QAAJ,CAAa;QAACwB,EAAE,EAAE;MAAL,CAAb,CAVT;MAWbb,QAAQ,EAAEA,QAAQ,IAAI,IAAIlB,QAAJ,EAXT;MAYbyB,eAAe,EAAE,KAAKA,eAZT;MAabO,OAAO,EAAEX;IAbI,CAAf;IAgBAY,MAAM,CAACC,IAAP,CAAY,IAAZ;EACD;EAGDC,QAAQA,CAAA,EAAG;IACT,KAAKV,eAAL,CAAqBU,QAArB;IAEA,KAAK,MAAMC,KAAX,IAAoB,KAAKZ,MAAzB,EAAiC;MAC/B,KAAKa,cAAL,CAAoBD,KAApB;IACD;EACF;EAGDE,WAAWA,CAAA,EAKO;IAAA,IAJhBC,IAGC,GAAApB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;MAACqB,gBAAgB,EAAE;IAAnB,CAJK;IAMT,IAAIC,MAAM,GAAG,KAAKC,YAAlB;IACA,IAAIH,IAAI,CAACC,gBAAT,EAA2B;MACzB,KAAKE,YAAL,GAAoB,KAApB;IACD;IAGD,KAAK,MAAMN,KAAX,IAAoB,KAAKZ,MAAzB,EAAiC;MAE/B,MAAMmB,gBAAgB,GAAGP,KAAK,CAACQ,cAAN,CAAqBL,IAArB,CAAzB;MACAE,MAAM,GAAGA,MAAM,IAAIE,gBAAnB;IACD;IAED,OAAOF,MAAP;EACD;EAGDI,WAAWA,CAAA,EAAmB;IAC5B,IAAI,KAAKC,WAAL,IAAoB,KAAKA,WAAL,KAAqB,KAAKC,mBAAlD,EAAuE;MAErE,OAAO,gBAAP;IACD;IACD,OAAO,KAAKC,YAAZ;EACD;EAGDC,cAAcA,CAACC,MAAD,EAAuB;IACnC,KAAKR,YAAL,GAAoB,KAAKA,YAAL,IAAqBQ,MAAzC;EACD;EAIDC,cAAcA,CAACD,MAAD,EAAuB;IACnC,KAAKF,YAAL,GAAoB,KAAKA,YAAL,IAAqBE,MAAzC;EACD;EAGDE,SAASA,CAAA,EAAkD;IAAA,IAAjD;MAACC;IAAD,IAAAlC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAoC,EAArC;IAGP,OAAOkC,QAAQ,GACX,KAAK7B,MAAL,CAAY8B,MAAZ,CAAmBlB,KAAK,IAAIiB,QAAQ,CAACE,IAAT,CAAcC,OAAO,IAAIpB,KAAK,CAACL,EAAN,CAAS0B,OAAT,CAAiBD,OAAjB,MAA8B,CAAvD,CAA5B,CADW,GAEX,KAAKhC,MAFT;EAGD;EAGDkC,QAAQA,CAACC,KAAD,EAAmB;IACzB,IAAI,WAAWA,KAAf,EAAsB;MACpB,KAAKC,MAAL,GAAcD,KAAK,CAACxD,KAApB;IACD;IAGD,IAAI,cAAcwD,KAAlB,EAAyB;MACvB,KAAKpC,OAAL,CAAaK,QAAb,GAAwB+B,KAAK,CAAC/B,QAA9B;IACD;IAGD,IAAI,YAAY+B,KAAhB,EAAuB;MACrB,KAAKb,WAAL,GAAmBa,KAAK,CAACnC,MAAzB;IACD;IAED,IAAI,aAAamC,KAAjB,EAAwB;MACtB,KAAKpC,OAAL,CAAaS,OAAb,GAAuB2B,KAAK,CAAC3B,OAA7B;IACD;EACF;EAGD6B,SAASA,CAACC,SAAD,EAAwBZ,MAAxB,EAA+C;IACtD/C,KAAK,CAACM,gBAAD,EAAmB,IAAnB,EAAyByC,MAAzB,EAAiCY,SAAjC,CAAL;IAEA,KAAKf,mBAAL,GAA2Be,SAA3B;IAEA,MAAMC,UAAU,GAAG3D,OAAO,CAAC0D,SAAD,EAAYE,OAAZ,CAA1B;IAEA,KAAK,MAAM5B,KAAX,IAAoB2B,UAApB,EAAgC;MAC9B3B,KAAK,CAACb,OAAN,GAAgB,KAAKA,OAArB;IACD;IAED,KAAK0C,aAAL,CAAmB,KAAKzC,MAAxB,EAAgCuC,UAAhC;EACD;EAGDG,YAAYA,CAAA,EAAS;IAInB,MAAMhB,MAAM,GAAG,KAAKL,WAAL,EAAf;IACA,IAAIK,MAAJ,EAAY;MACV,KAAKD,cAAL,qBAAAkB,MAAA,CAAwCjB,MAAxC;MAEA,KAAKW,SAAL,CAAe,KAAKf,WAAL,IAAoB,KAAKC,mBAAxC,EAA6DG,MAA7D;IACD;IAED,KAAKJ,WAAL,GAAmB,IAAnB;EACD;EAcOsB,YAAYA,CAACC,KAAD,EAAgBC,KAAhB,EAA8BlC,KAA9B,EAA4C;IAC9DA,KAAK,CAACmC,UAAN,CAAiBD,KAAjB,KAAAH,MAAA,CAA2BE,KAA3B,UAAAF,MAAA,CAAuC/B,KAAvC;EACD;EAKO6B,aAAaA,CAACO,SAAD,EAAqBV,SAArB,EAA+C;IAElE,MAAMW,WAA8C,GAAG,EAAvD;IACA,KAAK,MAAMC,QAAX,IAAuBF,SAAvB,EAAkC;MAChC,IAAIC,WAAW,CAACC,QAAQ,CAAC3C,EAAV,CAAf,EAA8B;QAC5B7B,GAAG,CAACyE,IAAJ,qCAAAR,MAAA,CAA6CO,QAAQ,CAAC3C,EAAtD;MACD,CAFD,MAEO;QACL0C,WAAW,CAACC,QAAQ,CAAC3C,EAAV,CAAX,GAA2B2C,QAA3B;MACD;IACF;IAGD,MAAME,eAAwB,GAAG,EAAjC;IAGA,KAAKC,2BAAL,CAAiCf,SAAjC,EAA4CW,WAA5C,EAAyDG,eAAzD;IAGA,KAAKE,kBAAL,CAAwBL,WAAxB;IAEA,IAAI5B,WAA2B,GAAG,KAAlC;IACA,KAAK,MAAMT,KAAX,IAAoBwC,eAApB,EAAqC;MACnC,IAAIxC,KAAK,CAAC2C,oBAAN,EAAJ,EAAkC;QAChClC,WAAW,4BAAAsB,MAAA,CAA4B/B,KAA5B,CAAX;QACA;MACD;IACF;IAED,KAAKY,YAAL,GAAoBH,WAApB;IACA,KAAKrB,MAAL,GAAcoD,eAAd;EACD;EAIOC,2BAA2BA,CACjCf,SADiC,EAEjCW,WAFiC,EAGjCG,eAHiC,EAIjC;IACA,KAAK,MAAMI,QAAX,IAAuBlB,SAAvB,EAAkC;MAChCkB,QAAQ,CAACzD,OAAT,GAAmB,KAAKA,OAAxB;MAGA,MAAMmD,QAAQ,GAAGD,WAAW,CAACO,QAAQ,CAACjD,EAAV,CAA5B;MACA,IAAI2C,QAAQ,KAAK,IAAjB,EAAuB;QAErBxE,GAAG,CAACyE,IAAJ,qCAAAR,MAAA,CAA6Ca,QAAQ,CAACjD,EAAtD;MACD;MAED0C,WAAW,CAACO,QAAQ,CAACjD,EAAV,CAAX,GAA2B,IAA3B;MAEA,IAAIkD,SAAyB,GAAG,IAAhC;MAGA,IAAI;QACF,IAAI,KAAKrB,MAAL,IAAec,QAAQ,KAAKM,QAAhC,EAA0C;UACxCA,QAAQ,CAACE,aAAT;QACD;QAED,IAAI,CAACR,QAAL,EAAe;UACb,KAAKS,gBAAL,CAAsBH,QAAtB;QACD,CAFD,MAEO;UACL,KAAKI,mBAAL,CAAyBV,QAAzB,EAAmCM,QAAnC;UACA,KAAKK,YAAL,CAAkBL,QAAlB;QACD;QACDJ,eAAe,CAACU,IAAhB,CAAqBN,QAArB;QAGAC,SAAS,GAAGD,QAAQ,CAACO,WAAT,GAAwBP,QAAD,CAA6BQ,YAA7B,EAAvB,GAAqE,IAAjF;MAED,CAhBD,CAgBE,OAAOC,GAAP,EAAY;QACZ,KAAKrB,YAAL,CAAkB,UAAlB,EAA8BqB,GAA9B,EAA4CT,QAA5C;MACD;MAED,IAAIC,SAAJ,EAAe;QACb,KAAKJ,2BAAL,CAAiCI,SAAjC,EAA4CR,WAA5C,EAAyDG,eAAzD;MACD;IACF;EACF;EAIOE,kBAAkBA,CAACL,WAAD,EAAuD;IAC/E,KAAK,MAAMjB,OAAX,IAAsBiB,WAAtB,EAAmC;MACjC,MAAMrC,KAAK,GAAGqC,WAAW,CAACjB,OAAD,CAAzB;MACA,IAAIpB,KAAJ,EAAW;QACT,KAAKC,cAAL,CAAoBD,KAApB;MACD;IACF;EACF;EAKO+C,gBAAgBA,CAAC/C,KAAD,EAAqB;IAC3C,IAAI;MACFA,KAAK,CAACsD,WAAN;MACAtD,KAAK,CAACuD,SAAN,GAAkB1F,SAAS,CAAC2F,WAA5B;IACD,CAHD,CAGE,OAAOH,GAAP,EAAY;MACZ,KAAKrB,YAAL,CAAkB,gBAAlB,EAAoCqB,GAApC,EAAkDrD,KAAlD;IAED;EACF;EAGOgD,mBAAmBA,CAACV,QAAD,EAAkBM,QAAlB,EAAyC;IAClEA,QAAQ,CAACa,cAAT,CAAwBnB,QAAxB;IACAM,QAAQ,CAACW,SAAT,GAAqB1F,SAAS,CAAC6F,OAA/B;IAEA,IAAId,QAAQ,KAAKN,QAAjB,EAA2B;MACzBA,QAAQ,CAACiB,SAAT,GAAqB1F,SAAS,CAAC8F,WAA/B;IACD;EACF;EAGOV,YAAYA,CAACjD,KAAD,EAAqB;IACvC,IAAI;MACFA,KAAK,CAAC4D,OAAN;IACD,CAFD,CAEE,OAAOP,GAAP,EAAY;MACZ,KAAKrB,YAAL,CAAkB,QAAlB,EAA4BqB,GAA5B,EAA0CrD,KAA1C;IACD;EACF;EAGOC,cAAcA,CAACD,KAAD,EAAqB;IACzC,KAAKM,YAAL,GAAoB,KAAKA,YAAL,iBAAAyB,MAAA,CAAkC/B,KAAlC,CAApB;IAEAA,KAAK,CAACuD,SAAN,GAAkB1F,SAAS,CAACgG,qBAA5B;IAEA,IAAI;MACF7D,KAAK,CAAC8D,SAAN;MACA9D,KAAK,CAACuD,SAAN,GAAkB1F,SAAS,CAACkG,SAA5B;IACD,CAHD,CAGE,OAAOV,GAAP,EAAY;MACZ,KAAKrB,YAAL,CAAkB,cAAlB,EAAkCqB,GAAlC,EAAgDrD,KAAhD;IACD;EACF;AAlU+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}