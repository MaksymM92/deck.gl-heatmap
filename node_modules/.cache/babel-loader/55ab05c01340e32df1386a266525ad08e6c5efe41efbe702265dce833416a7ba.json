{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport log from '../utils/log';\nimport { createMat4, getCameraPosition, getFrustumPlanes } from '../utils/math-utils';\nimport { Matrix4, Vector3, equals, clamp } from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport { getDistanceScales, getMeterZoom, lngLatToWorld, worldToLngLat, worldToPixels, pixelsToWorld } from '@math.gl/web-mercator';\nimport { PROJECTION_MODE } from '../lib/constants';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst IDENTITY = createMat4();\nconst ZERO_VECTOR = [0, 0, 0];\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\nfunction createProjectionMatrix(_ref) {\n  let {\n    width,\n    height,\n    orthographic,\n    fovyRadians,\n    focalDistance,\n    padding,\n    near,\n    far\n  } = _ref;\n  const aspect = width / height;\n  const matrix = orthographic ? new Matrix4().orthographic({\n    fovy: fovyRadians,\n    aspect,\n    focalDistance,\n    near,\n    far\n  }) : new Matrix4().perspective({\n    fovy: fovyRadians,\n    aspect,\n    near,\n    far\n  });\n  if (padding) {\n    const {\n      left = 0,\n      right = 0,\n      top = 0,\n      bottom = 0\n    } = padding;\n    const offsetX = clamp((left + width - right) / 2, 0, width) - width / 2;\n    const offsetY = clamp((top + height - bottom) / 2, 0, height) - height / 2;\n    matrix[8] -= offsetX * 2 / width;\n    matrix[9] += offsetY * 2 / height;\n  }\n  return matrix;\n}\nexport default class Viewport {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"width\", void 0);\n    _defineProperty(this, \"height\", void 0);\n    _defineProperty(this, \"padding\", void 0);\n    _defineProperty(this, \"isGeospatial\", void 0);\n    _defineProperty(this, \"zoom\", void 0);\n    _defineProperty(this, \"focalDistance\", void 0);\n    _defineProperty(this, \"position\", void 0);\n    _defineProperty(this, \"modelMatrix\", void 0);\n    _defineProperty(this, \"distanceScales\", void 0);\n    _defineProperty(this, \"scale\", void 0);\n    _defineProperty(this, \"center\", void 0);\n    _defineProperty(this, \"cameraPosition\", void 0);\n    _defineProperty(this, \"projectionMatrix\", void 0);\n    _defineProperty(this, \"viewMatrix\", void 0);\n    _defineProperty(this, \"viewMatrixUncentered\", void 0);\n    _defineProperty(this, \"viewMatrixInverse\", void 0);\n    _defineProperty(this, \"viewProjectionMatrix\", void 0);\n    _defineProperty(this, \"pixelProjectionMatrix\", void 0);\n    _defineProperty(this, \"pixelUnprojectionMatrix\", void 0);\n    _defineProperty(this, \"resolution\", void 0);\n    _defineProperty(this, \"_frustumPlanes\", {});\n    this.id = opts.id || this.constructor.displayName || 'viewport';\n    this.x = opts.x || 0;\n    this.y = opts.y || 0;\n    this.width = opts.width || 1;\n    this.height = opts.height || 1;\n    this.zoom = opts.zoom || 0;\n    this.padding = opts.padding;\n    this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;\n    this.focalDistance = opts.focalDistance || 1;\n    this.position = opts.position || ZERO_VECTOR;\n    this.modelMatrix = opts.modelMatrix || null;\n    const {\n      longitude,\n      latitude\n    } = opts;\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n    this._initProps(opts);\n    this._initMatrices(opts);\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n  get subViewports() {\n    return null;\n  }\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12 ? PROJECTION_MODE.WEB_MERCATOR : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n    if (this === viewport) {\n      return true;\n    }\n    return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && equals(viewport.projectionMatrix, this.projectionMatrix) && equals(viewport.viewMatrix, this.viewMatrix);\n  }\n  project(xyz) {\n    let {\n      topLeft = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n  unproject(xyz) {\n    let {\n      topLeft = true,\n      targetZ\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const [x, y, z] = xyz;\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      const result = lngLatToWorld(xyz);\n      result[1] = clamp(result[1], -318, 830);\n      return result;\n    }\n    return xyz;\n  }\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz;\n  }\n  getBounds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const unprojectOption = {\n      targetZ: options.z || 0\n    };\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n    return [Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]), Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]), Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]), Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])];\n  }\n  getDistanceScales(coordinateOrigin) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n  containsPixel(_ref2) {\n    let {\n      x,\n      y,\n      width = 1,\n      height = 1\n    } = _ref2;\n    return x < this.x + this.width && this.x < x + width && y < this.y + this.height && this.y < y + height;\n  }\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n    return this._frustumPlanes;\n  }\n  panByPosition(coords, pixel) {\n    return null;\n  }\n  _initProps(opts) {\n    const longitude = opts.longitude;\n    const latitude = opts.latitude;\n    if (this.isGeospatial) {\n      if (!Number.isFinite(opts.zoom)) {\n        this.zoom = getMeterZoom({\n          latitude\n        }) + Math.log2(this.focalDistance);\n      }\n      this.distanceScales = opts.distanceScales || getDistanceScales({\n        latitude,\n        longitude\n      });\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n    const {\n      position,\n      modelMatrix\n    } = opts;\n    let meterOffset = ZERO_VECTOR;\n    if (position) {\n      meterOffset = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(position, []) : position;\n    }\n    if (this.isGeospatial) {\n      const center = this.projectPosition([longitude, latitude, 0]);\n      this.center = new Vector3(meterOffset).scale(this.distanceScales.unitsPerMeter).add(center);\n    } else {\n      this.center = this.projectPosition(meterOffset);\n    }\n  }\n  _initMatrices(opts) {\n    const {\n      viewMatrix = IDENTITY,\n      projectionMatrix = null,\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1,\n      far = 1000,\n      padding = null,\n      focalDistance = 1\n    } = opts;\n    this.viewMatrixUncentered = viewMatrix;\n    this.viewMatrix = new Matrix4().multiplyRight(viewMatrix).translate(new Vector3(this.center).negate());\n    this.projectionMatrix = projectionMatrix || createProjectionMatrix({\n      width: this.width,\n      height: this.height,\n      orthographic,\n      fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n      focalDistance,\n      padding,\n      near,\n      far\n    });\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n    const viewportMatrix = createMat4();\n    const pixelProjectionMatrix = createMat4();\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n    }\n  }\n}\n_defineProperty(Viewport, \"displayName\", 'Viewport');","map":{"version":3,"names":["log","createMat4","getCameraPosition","getFrustumPlanes","Matrix4","Vector3","equals","clamp","mat4","getDistanceScales","getMeterZoom","lngLatToWorld","worldToLngLat","worldToPixels","pixelsToWorld","PROJECTION_MODE","DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_DISTANCE_SCALES","unitsPerMeter","metersPerUnit","createProjectionMatrix","_ref","width","height","orthographic","fovyRadians","focalDistance","padding","near","far","aspect","matrix","fovy","perspective","left","right","top","bottom","offsetX","offsetY","Viewport","constructor","opts","arguments","length","undefined","_defineProperty","id","displayName","x","y","zoom","distanceScales","position","modelMatrix","longitude","latitude","isGeospatial","Number","isFinite","_initProps","_initMatrices","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","subViewports","metersPerPixel","scale","projectionMode","WEB_MERCATOR","WEB_MERCATOR_AUTO_OFFSET","viewport","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","targetZ","z","targetZWorld","pixelUnprojectionMatrix","X","Y","Z","result","getBounds","options","unprojectOption","topRight","bottomLeft","bottomRight","min","max","coordinateOrigin","highPrecision","containsPixel","_ref2","_frustumPlanes","Object","assign","viewProjectionMatrix","panByPosition","coords","pixel","log2","pow","meterOffset","transformAsVector","center","add","viewMatrixUncentered","multiplyRight","translate","negate","vpm","multiply","viewMatrixInverse","invert","cameraPosition","viewportMatrix","warn"],"sources":["/Users/maks/Desktop/projects/geo-viz/node_modules/@deck.gl/core/src/viewports/viewport.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, getCameraPosition, getFrustumPlanes, FrustumPlane} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals, clamp} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from '@math.gl/web-mercator';\n\nimport {PROJECTION_MODE} from '../lib/constants';\n\nexport type DistanceScales = {\n  unitsPerMeter: number[];\n  metersPerUnit: number[];\n};\n\nexport type Padding = {\n  left?: number;\n  right?: number;\n  top?: number;\n  bottom?: number;\n};\n\nexport type ViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude in degrees (geospatial only) */\n  longitude?: number;\n  /** Latitude in degrees (geospatial only) */\n  latitude?: number;\n  /** Viewport center in world space. If geospatial, refers to meter offsets from lng, lat */\n  position?: number[];\n  /** Zoom level */\n  zoom?: number;\n  /** Padding around the viewport, in pixels. */\n  padding?: Padding | null;\n  distanceScales?: DistanceScales;\n  /** Model matrix of viewport center */\n  modelMatrix?: number[] | null;\n  /** Custom view matrix */\n  viewMatrix?: number[];\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Modifier of viewport scale. Corresponds to the number of pixels per common unit at zoom 0. */\n  focalDistance?: number;\n  /** Use orthographic projection */\n  orthographic?: boolean;\n  /** fovy in radians. If supplied, overrides fovy */\n  fovyRadians?: number;\n  /** fovy in degrees. */\n  fovy?: number;\n  /** Near plane of the projection matrix */\n  near?: number;\n  /** Far plane of the projection matrix */\n  far?: number;\n};\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_DISTANCE_SCALES: DistanceScales = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\n// / Helpers\nfunction createProjectionMatrix({\n  width,\n  height,\n  orthographic,\n  fovyRadians,\n  focalDistance,\n  padding,\n  near,\n  far\n}: {\n  width: number;\n  height: number;\n  orthographic: boolean;\n  fovyRadians: number;\n  focalDistance: number;\n  padding: Padding | null;\n  near: number;\n  far: number;\n}) {\n  const aspect = width / height;\n  const matrix = orthographic\n    ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n    : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  if (padding) {\n    const {left = 0, right = 0, top = 0, bottom = 0} = padding;\n    const offsetX = clamp((left + width - right) / 2, 0, width) - width / 2;\n    const offsetY = clamp((top + height - bottom) / 2, 0, height) - height / 2;\n    // pixels to clip space\n    matrix[8] -= (offsetX * 2) / width;\n    matrix[9] += (offsetY * 2) / height;\n  }\n  return matrix;\n}\n\n/**\n * Manages coordinate system transformations.\n *\n * Note: The Viewport is immutable in the sense that it only has accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport default class Viewport {\n  static displayName = 'Viewport';\n\n  /** Init parameters */\n\n  id: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  padding?: Padding | null;\n  isGeospatial: boolean;\n  zoom: number;\n  focalDistance: number;\n  position: number[];\n  modelMatrix: number[] | null;\n\n  /** Derived parameters */\n\n  // `!` post-fix expression operator asserts that its operand is non-null and non-undefined in contexts\n  // where the type checker is unable to conclude that fact.\n\n  distanceScales: DistanceScales; /** scale factors between world space and common space */\n  scale!: number; /** scale factor, equals 2^zoom */\n  center!: number[]; /** viewport center in common space */\n  cameraPosition!: number[]; /** Camera position in common space */\n  projectionMatrix!: number[];\n  viewMatrix!: number[];\n  viewMatrixUncentered!: number[];\n  viewMatrixInverse!: number[];\n  viewProjectionMatrix!: number[];\n  pixelProjectionMatrix!: number[];\n  pixelUnprojectionMatrix!: number[];\n  resolution?: number;\n\n  private _frustumPlanes: {[name: string]: FrustumPlane} = {};\n\n  // eslint-disable-next-line complexity\n  constructor(opts: ViewportOptions = {}) {\n    // @ts-ignore\n    this.id = opts.id || this.constructor.displayName || 'viewport';\n\n    this.x = opts.x || 0;\n    this.y = opts.y || 0;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = opts.width || 1;\n    this.height = opts.height || 1;\n    this.zoom = opts.zoom || 0;\n    this.padding = opts.padding;\n    this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;\n    this.focalDistance = opts.focalDistance || 1;\n    this.position = opts.position || ZERO_VECTOR;\n    this.modelMatrix = opts.modelMatrix || null;\n\n    const {longitude, latitude} = opts;\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this._initProps(opts);\n    this._initMatrices(opts);\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get subViewports(): Viewport[] | null {\n    return null;\n  }\n\n  get metersPerPixel(): number {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode(): number {\n    if (this.isGeospatial) {\n      return this.zoom < 12\n        ? PROJECTION_MODE.WEB_MERCATOR\n        : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport: Viewport): boolean {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n    if (this === viewport) {\n      return true;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz: number[], {topLeft = true}: {topLeft?: boolean} = {}): number[] {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(\n    xyz: number[],\n    {topLeft = true, targetZ}: {topLeft?: boolean; targetZ?: number} = {}\n  ): number[] {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ as number] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz: number[]): [number, number, number] {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz: number[]): [number, number, number] {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz: number[]): [number, number] {\n    if (this.isGeospatial) {\n      // Shader clamps latitude to +-89.9, see /shaderlib/project/project.glsl.js\n      // lngLatToWorld([0, -89.9])[1] = -317.9934163758329\n      // lngLatToWorld([0, 89.9])[1] = 829.9934163758271\n      const result = lngLatToWorld(xyz);\n      result[1] = clamp(result[1], -318, 830);\n      return result;\n    }\n    return xyz as [number, number];\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz: number[]): [number, number] {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz as [number, number];\n  }\n\n  /**\n   * Get bounds of the current viewport\n   * @return {Array} - [minX, minY, maxX, maxY]\n   */\n  getBounds(options: {z?: number} = {}): [number, number, number, number] {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n\n    return [\n      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n    ];\n  }\n\n  getDistanceScales(coordinateOrigin?: number[]): DistanceScales {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  containsPixel({\n    x,\n    y,\n    width = 1,\n    height = 1\n  }: {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n  }): boolean {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes(): {\n    left: FrustumPlane;\n    right: FrustumPlane;\n    bottom: FrustumPlane;\n    top: FrustumPlane;\n    near: FrustumPlane;\n    far: FrustumPlane;\n  } {\n    if (this._frustumPlanes.near) {\n      // @ts-ignore\n      return this._frustumPlanes;\n    }\n\n    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n\n    // @ts-ignore\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  /**\n   * Needed by panning and linear transition\n   * Pan the viewport to place a given world coordinate at screen point [x, y]\n   *\n   * @param {Array} coords - world coordinates\n   * @param {Array} pixel - [x,y] coordinates on screen\n   * @return {Object} props of the new viewport\n   */\n  panByPosition(coords: number[], pixel: number[]): any {\n    return null;\n  }\n\n  // INTERNAL METHODS\n\n  /* eslint-disable complexity, max-statements */\n  private _initProps(opts: ViewportOptions) {\n    const longitude = opts.longitude as number;\n    const latitude = opts.latitude as number;\n\n    if (this.isGeospatial) {\n      if (!Number.isFinite(opts.zoom)) {\n        this.zoom = getMeterZoom({latitude}) + Math.log2(this.focalDistance);\n      }\n      this.distanceScales = opts.distanceScales || getDistanceScales({latitude, longitude});\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    const {position, modelMatrix} = opts;\n    let meterOffset: number[] = ZERO_VECTOR;\n    if (position) {\n      meterOffset = modelMatrix\n        ? (new Matrix4(modelMatrix).transformAsVector(position, []) as number[])\n        : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center in common space\n      const center = this.projectPosition([longitude, latitude, 0]);\n\n      this.center = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(this.distanceScales.unitsPerMeter)\n        .add(center);\n    } else {\n      this.center = this.projectPosition(meterOffset);\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  private _initMatrices(opts: ViewportOptions) {\n    const {\n      // View matrix\n      viewMatrix = IDENTITY,\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      padding = null, // Center offset in pixels\n      focalDistance = 1\n    } = opts;\n\n    this.viewMatrixUncentered = viewMatrix;\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(viewMatrix)\n      // And center it\n      .translate(new Vector3(this.center).negate());\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      createProjectionMatrix({\n        width: this.width,\n        height: this.height,\n        orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        focalDistance,\n        padding,\n        near,\n        far\n      });\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera parameters\n    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}